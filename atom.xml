<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2020-10-12T00:00:00Z</updated>
    <entry>
    <title>Modern Emacs for Haskell</title>
    <link href="http://abailly.github.io/posts/a-modern-haskell-env.html" />
    <id>http://abailly.github.io/posts/a-modern-haskell-env.html</id>
    <published>2020-10-12T00:00:00Z</published>
    <updated>2020-10-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Modern Emacs for Haskell</h1>

  <h2 class="subtitle">Setting up a more modern development environment with LSP</h2>

<div class="info">Posted on October 12, 2020</div>

<p>For a couple of years now there has been an upsurge of activity on the front of Haskell Tooling and IDE support. As explained in <a href="https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html">this blog post</a> from Neil Mitchell, there is a need, and now a will, to equip Haskell with a more modern development environment based on the now standard <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> introduced by Visual Studio Code. This initiative gave rise to the <a href="https://github.com/haskell/haskell-language-server">Haskell Language Server</a> which aims at fully supporting LSP for the Haskell eco-system and becoming the standard “IDE”.</p>
<p>I have used various solutions for hacking Haskell in Emacs which all are now either extinct or on the path towards extinction:</p>
<ul>
<li><a href="http://haskell.github.io/haskell-mode/">haskell-mode</a> is the oldest one and the one I of course started with,</li>
<li>At some point I switched to <a href="https://github.com/DanielG/ghc-mod">ghc-mod</a> which at the time, ca. 2013-2014 was offering the best experience. It was the first tool to provide basic things like autocompletion, jump to definition and other niceties we’ve come to appreciate from our IDEs,</li>
<li>Then <a href="https://chrisdone.github.io/intero/">intero</a> came out as <a href="https://docs.haskellstack.org/en/stable/README/">stack</a> usage grew and I have used happily for a few years. It was a breeze to install in Emacs and integrated nicely with stack, reusing its configuration files to automatically provide all needed dependencies and enabling fast turnaround from a properly configured REPL. Sadly intero development stopped a couple years ago,</li>
<li>I have also used <a href="https://github.com/ndmitchell/ghcid">ghcid</a> which is pretty much editor or IDE-agnostic, it was (is?) great for providing ultra fast edit-compile-test cycle and it was the only tool that enable me to do <a href="https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864">Test-Commit-Revert</a> in Haskell,</li>
<li>I am not doing anymore Haskell development in my day job so I have switched back to using haskell-mode which at least worked and provided basic support. I never spent the time however to delve into its configuration details hence my environment was pretty simple and I mostly used syntax highlighting and REPL interaction.</li>
</ul>
<p>This week-end, following the announcement in the Haskell Weekly News that HLS supported case-splitting and hole resolution, I decided to bite the bullet and reconfigure my Emacs to use it. Here are the steps I went through in the hope it will be useful for someone else.</p>
<p>First, I spent a lot of time fiddling with my <code>.emacs</code> and packages: I somehow lost a bunch of packages when I tried to install the relevant packages needed for LSP, possibly as a consequence of running <code>package-autoremove</code> without really understand what I was doing, so I add to fix my configuration one <code>require</code> at a time to ensure packages would be resolved if non existent.</p>
<p>I ended with the following configuration with is mostly copied verbatim from <a href="https://github.com/haskell/ghcide/#using-with-emacs">ghcide</a>’s configuration, except for the variables related to process execution in the <code>lsp-haskell</code> package</p>
<pre><code>(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
(use-package yasnippet
  :ensure t)
(use-package lsp-mode
  :ensure t
  :hook (haskell-mode . lsp)
  :commands lsp)
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(use-package lsp-haskell
  :ensure t
  :config
 (setq lsp-haskell-server-path &quot;haskell-language-server-wrapper&quot;)
 (setq lsp-haskell-server-args ())
   ;; Comment/uncomment this line to see interactions between lsp client/server.
  (setq lsp-log-io t))</code></pre>
<p>I then proceeded to install <a href="https://github.com/haskell/ghcide">ghcide</a> but it turned out to not be a good idea.</p>
<p>Then I installed <a href="https://github.com/haskell/haskell-language-server">haskell-language-server</a>. I opted for the “install from source” option as it seemed the simplest and safest to me. Cloning, building and isntalling it was pretty straightforward:</p>
<pre><code>&gt; git clone https://github.com/haskell/haskell-language-server
&gt; cd haskell-language-server
&gt; stack install.hs hls-8.8.4</code></pre>
<p>As this is done through <code>stack</code>, it will install the relevant GHC version automatically in its own directory, and the binary for the server will be installed in <code>~/.local/bin</code> by default.</p>
<pre><code>&gt; ls -l ~/.local/bin/haskell-*
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-8.8
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-8.8.4
-rwxr-xr-x  1 arnaud  staff    3168996 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-wrapper</code></pre>
<p>As I understand it, the executable that needs to be pointed to is the <code>xxx-wrapper</code> which is responsible for starting the server and delegates the actual parsing and compiling to the correct backend:</p>
<div class="figure">
<img src="/images/emacs-lsp-process-tree.png" />

</div>
<p>Emacs needs to be able to find the executable. In my case, I have added the directory top the <code>exec-path</code> variable of Emacs and to the <code>PATH</code> environment variable:</p>
<pre><code>(setenv &quot;PATH&quot; (concat (getenv &quot;HOME&quot;) &quot;/.local/bin:&quot; &quot;/usr/local/bin:&quot; (getenv &quot;PATH&quot;)))

(setq exec-path
      (reverse
       (append
        (reverse exec-path)
        (list (concat (getenv &quot;HOME&quot;) &quot;/.local/bin&quot;)  &quot;/usr/local/bin&quot; ))))</code></pre>
<p>It did not worked the first time I tried to open an Haskell source file and it was useful to be able to got to <code>*lsp-log*</code> and other log buffers generated by the various processes to try to understand why the LSP server was crashing at start. After some tests and poking around on the web, I realised I was missing <strong>the critically important part</strong>: Correct configuration for <a href="https://github.com/mpickering/hie-bios">hie-bios</a> which is a low-level library that’s responsible for providing the correct GHC configuration for a given project or set of files.</p>
<p><a href="https://github.com/mpickering/hie-bios">hie-bios</a> is configured through a <code>hie.yaml</code> file which it locates somewhere up the path from where it’s started. If it does not find one, it uses a default configuration which is most probably incorrect for the project, unless it’s something very simple like a single file. So I ended up writing a <code>hie.yaml</code> at the <strong>root</strong> of the project which is considered to be where the <code>.git</code> directory lives. I am using stack and have no plans to switch, but this implies GHC might be installed by stack and not in the PATH, so we need to tell the server to use a stack-based configuration</p>
<pre><code>cradle:
  stack:</code></pre>
<p>This is however not enough if you have more than one component and the <code>stack.yaml</code> file is not located in the current directory, so I needed to add relevant configuration to ensure it finds all the dependencies, both for the library <em>and</em> for the tests. So here is how a configuration for a library with tests look like:</p>
<pre><code>cradle:
  stack:
  - path: &quot;./src&quot;
    component: &quot;hstore:lib&quot;
  - path: &quot;./test&quot;
    component: &quot;hstore:test:hstore-test&quot;</code></pre>
<p>It’s a little bit annoying one has to maintain this file by hand as it could easily be generated from the <code>package.yaml</code> or <code>.cabal</code> files. An <a href="https://github.com/mpickering/hie-bios/issues/122">issue</a> is open in hie-bios and shall be resolved for <a href="https://github.com/haskell/cabal/pull/6241">cabal</a> soon.</p>
<p>So after a couple hours, I was finally able to open a Haskell file and enjoy the pleasure of being able to case-split, introduce lambdas and resolve holes automatically from within Emacs, thanks to the universal <code>s-l a a</code> keys (where <code>s-l</code> stand for <code>Super + l</code>, with <code>Super</code> being <code>Command</code> on a Mac).</p>
<p>This can give surprising results when, for example, give the following code:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Bar</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Baz</span> <span class="dt">String</span>

<span class="ot">frobnicate ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
frobnicate <span class="fu">=</span> _</code></pre></div>
<p>one uses <code>Attempt to fill hole</code> command:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Bar</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Baz</span> <span class="dt">String</span>

<span class="ot">frobnicate ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
frobnicate <span class="fu">=</span> (\ f
   <span class="ot">-&gt;</span> <span class="kw">case</span> f <span class="kw">of</span>
        (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> []
        (<span class="dt">Baz</span> l_c)
          <span class="ot">-&gt;</span> <span class="kw">case</span> l_c <span class="kw">of</span>
               [] <span class="ot">-&gt;</span> l_c
               ((<span class="fu">:</span>) c l_c3)
                 <span class="ot">-&gt;</span> (<span class="fu">:</span>)
                      (<span class="kw">case</span> l_c3 <span class="kw">of</span>
                         [] <span class="ot">-&gt;</span> c
                         ((<span class="fu">:</span>) c4 l_c5) <span class="ot">-&gt;</span> c4)
                      (<span class="kw">case</span> l_c3 <span class="kw">of</span>
                         [] <span class="ot">-&gt;</span> l_c3
                         ((<span class="fu">:</span>) c4 l_c5) <span class="ot">-&gt;</span> l_c5))</code></pre></div>
<p>More interestingly, case-split is particularly useful to cover all constructors of a datatype. Given:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> _</code></pre></div>
<p>Typing <code>s-l a a</code> then selecting <code>Case...</code> when the cursor is on the hole yields:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> (<span class="kw">case</span> x <span class="kw">of</span>
   (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> _
   (<span class="dt">Baz</span> l_c) <span class="ot">-&gt;</span> _)</code></pre></div>
<p>Then I can <code>Replace with []</code> on the first hole and <code>Homomorphic case-split...</code> on the second hole, yielding:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> (<span class="kw">case</span> x <span class="kw">of</span>
   (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> []
   (<span class="dt">Baz</span> l_c) <span class="ot">-&gt;</span> (<span class="kw">case</span> l_c <span class="kw">of</span>
      [] <span class="ot">-&gt;</span> []
      ((<span class="fu">:</span>) c l_c3) <span class="ot">-&gt;</span> (<span class="fu">:</span>) _ _))</code></pre></div>
<p>I have yet to test this new setup on a significant project but I am already quite pleased by the speed of the provided feedback which matches ghcid and the integration in Emacs.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Team Practices: Daily Log</title>
    <link href="http://abailly.github.io/posts/team-log.html" />
    <id>http://abailly.github.io/posts/team-log.html</id>
    <published>2020-10-08T00:00:00Z</published>
    <updated>2020-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Team Practices: Daily Log</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on October  8, 2020</div>

<p>Writing a personal diary is pretty commonplace and there exists quite a few tools out there to do that. I personally favor Emacs for casual personal journalling and have been using <a href="">org-mode</a> since at least 2014, and some other tools prior to that like <a href="">remember.el</a>. For a few years now, I have been trying to extend that practice from the individual to the collective by writing a <strong>Team’s Log</strong>. I stole the idea from a talk Dan North gave where he mentioned the <em>Captain’s Log</em> as one of the “advanced agile” or “post-agile” practices he thought effective to improve a team’s efficiency and effectiveness.</p>
<h1 id="why-do-it">Why do it?</h1>
<p>I usually work in teams on software products that are created, evolved and maintained over the course of months, years or even a lifetime. I often feel the need to informations from the past, for various reasons:</p>
<ul>
<li>to understand the context in which some decision was made,</li>
<li>to check if an issue I am working on is really the same issue I worked on a while ago,</li>
<li>to find some details of a discussion that did not translate to a commit message or a specific wiki page,</li>
<li>to quickly catch-up with the team when I have been off for a few days or even weeks,</li>
<li>…</li>
</ul>
<p>More generally, I like the idea of keeping in a written form something that I call a <em>Collective Stream of Consciousness</em>, a collection of more or less detailed contextual notes that detail what we think of a problem at some point in time, how we resolved some issue, even which sequence of commands or actions we had to run in order to reach some conclusion or extract some data.</p>
<p>Writing things is essential to structure, learn and share. In his series of book on groupthink and decision making, <a href="decisions-absurdes.html">Christian Morel</a> motivates the importance of writing things down for organisations in order to breed a culture of safety and continuous learning. By insisting that knowledge be written, structured, and continuously read and reviewed, organisations build an operational <em>Body of Knowledge</em> that helps turn unexpected or novel events into routine, spreads knowledge among the organisation’s members, speeds up newcomers onboarding.</p>
<p>In the first volume series of book on Quality Software Management, <a href="https://geraldmweinberg.com/Site/QSM_vol_1.html">System Thinking</a>, Jerry Weinberg proposes a hierarchy of <em>patterns</em> for organisations that ranges from the <em>Oblivious</em> to the <em>Congruent</em>. A key factor in taming chaos is collecting information, data, and making that information and data <em>open</em> for everyone to see. At first, we might fail to collect the right data or measure the right thing, and we might fail to collect it in the right way, confusing precision, accuracy and relevance. But this is the first step towards improving the level of understanding and control we have on the <em>process</em> and the <em>Culture</em> of the organization.</p>
<p>I view building this <em>Collective Stream of Consciousness</em> as a way to gather raw material for further analysis and synthesis: By writing things down, I am more prone to memorize events and notice patterns that can later be refined into more specific documents.</p>
<h1 id="how-to-do-it">How to do it?</h1>
<h2 id="practice">Practice</h2>
<p>My current practice is actually pretty simple: In the team’s wiki, there is one page for each (working) day, which is used by all team members as a shared notebook to log what they do, problems they have, solutions they find… When a month is over, we move relevant pages</p>
<p>Here is a screen capture from our team’s wiki (in this case Azure DevOps) showing a random page’s content:</p>
<div class="figure">
<img src="/images/sample-team-log.png" style="width:100.0%" />

</div>
<p>In this case, I was trying to understand why tests were slow and I graphed the distrbution of execution times for “writes” using some <a href="http://www.gnuplot.info/">GNUPlot</a> script. This picture also shows the tree of daily log entries, with daily pages “archived” under each month.</p>
<p>Other category of fragments I<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> write in the log are:</p>
<ul>
<li>Action plan for the day, often listing actions people talked about in the daily meeting,</li>
<li>Comments and “narratives” while working on some issue, along with a link to the issue tracker,</li>
<li>Details about operations, like configuring a service or troubleshooting a malfunction in Azure, complete with detailed commands run, output, problems and solutions I faced….</li>
<li>Meeting minutes, which I sometimes move to their own page under the <code>Meetings</code> section when they are recurring meetings (retrospectives, sprint planning),</li>
<li>Random thoughts on some topic which does not warrant having its own page yet.</li>
</ul>
<p>Pair Programming lends itself nicely to journaling: The navigator can write down decisions, problems, actions, or questions while the driver writes code. When switching role, the new navigator can quickly go through the log and catch up with previous navigator’s thought process.</p>
<p>I try to use as much hyperlinks to other parts of our “information system” (issue tracker, code repository, CI, tests reports) as I can in order to enrich the context and allow readers, whether other team members or my future self, to be able to gather as much details as they need to make this information useful.</p>
<h2 id="tools">Tools</h2>
<p>As mentioned previously, in my current team we are using the standard <a href="https://docs.microsoft.com/en-us/azure/devops/project/wiki/about-readme-wiki">DevOps Wiki</a> as our infrastructure is 100% Azure-based. Over the past few years, I have tried various options:</p>
<ul>
<li>As an avid Emacs and casual <a href="https://orgmode.org/">org-mode</a> user, I initially tried to maintain an org-mode journal in the source tree, committing it like any other piece of documentation. While this works fine when working alone, it does not scale to multiple users and team use due to merge conflicts: Everyone is editing the same file over and over, usually in close places,</li>
<li>An online wiki is easier to use but most wikis out there do not support concurrent editing of same page by different users, thus leading to the same merge conflict issues. Moreover, wikis are usually edited directly in the browser which means I need to switch tools when programming,</li>
<li><a href="https://docs.google.com">Google docs</a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> provides good support for collaborative online editing. This is my go-to option when there’s no in-house Wiki solution as wiki are more hyperlinks-friendly esp. when integrated in a development environment,</li>
<li>Out of online tools I have used, <a href="https://www.notion.so/">Notions</a> offers the best experience when working in a larger team with 2 or 3 groups of people simultaneously editing the same daily log page.</li>
</ul>
<p>I have yet to discover the perfect tool to support that practice. Such a tool would at least:</p>
<ul>
<li>Support collaborative concurrent editing of the same “note” with automatic conflicts resolution,</li>
<li>Provide seamless integration into common tools used in software development in order to easily capture contextual information when creating notes,</li>
<li>Enable easy linking to other notes through completion and navigation,</li>
<li>Efficiently index notes and provide powerful search capabilities.</li>
</ul>
<p><a href="https://www.orgroam.com/">org-roam</a> is a recent evolution of org-mode inspired by the Zettelkasten method that provides some of these capabilities, but it does not provide collective editing support nor online storage and retrieval of notes.</p>
<h1 id="assessment">Assessment</h1>
<p>I have found the practice of writing a Team’s log very helpful in various circumstances, whether it be to lookup some command I have used before, to investigate recurring bugs and issues, or more generally to dump random ideas and thoughts that sometimes happen to be useful to me or teammates. Writing things down helps structure one’s thought process bringing order and persistance to the somewhat confusing, idiosyncratic and transient stream of consciousness. This is not only valuable at a personal level but also at a the team’s level as it fosters key eXtreme Programming practices like <a href="">Collective Code Ownership</a> and <a href="">Coding Standards</a>.</p>
<p>Turning implicit assumptions, conclusions, perceptions, and ideas into an explicit <em>Stream of consciousness</em> takes the collective to another level whereby it’s not only the <em>Code</em> that’s collectively owned but the <em>process</em> that produces the code, which unlocks the potential for the organisation, at the team level or higher, to apply pattern 3, 4 or even 5 organisations.</p>
<p>Of course, this only works if all the team’s members are willing to engage with that practice, writing and <em>reading</em> the log and actively curating its content.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Yes, this should be <em>we</em> but it’s very often <em>I</em>. More on this later,<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Or any other kind of collaborative editing tool like <a href="https://framapad.org/en/">Framapad</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Le maniement des hommes&quot;</title>
    <link href="http://abailly.github.io/posts/maniement-des-hommes.html" />
    <id>http://abailly.github.io/posts/maniement-des-hommes.html</id>
    <published>2020-03-21T00:00:00Z</published>
    <updated>2020-03-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Le maniement des hommes&quot;</h1>

  <h2 class="subtitle">Éssai sur la rationalité managériale</h2>

<div class="info">Posted on March 21, 2020</div>

<p><a href="https://www.editionsladecouverte.fr/catalogue/index-Le_maniement_des_hommes-9782707190260.html"><em>Le maniement des hommes</em></a> est un essai de Thibault Le Texier qui est paru en 2016 aux éditions <em>La découverte</em>, et comme le sont très souvent les livres de cet éditeur, c’est un ouvrage intelligent et passionnant. Son propos est d’exposer comment le <em>management</em> à partir des écrits fondateurs de Frederick Taylor constitue une <em>rationalité</em> propre, avec son langage, ses modes de pensées, ses buts. Le <em>management scientifique</em> n’a de fait rien de scientifique, c’est-à-dire qu’il n’est pas une science, qu’il ne fait pas partie du domaine de rationalité spécifique de la science expérimentale<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, ni d’ailleurs de celui des sciences humaines qui s’élabore à peu près à la même période, au tournant du XXème siècle.</p>
<p>Mais le management ne se réduit pas non plus à un genre particulier de <em>rationalité marchande</em> : il n’a pas pour but de maximiser les profits ni pour objet principal le marché. C’est ce que démontre le fait que le management, parti de la petite industrie, a conquis l’ensemble des formes d’organisations sociales : gouvernements, services publics, associations, organisations non gouvernementales, il n’est pas jusqu’à l’armée, la justice ou même la famille qui ne soient désormais soumis aux règles du management et à son impératif d’<em>efficacité</em>.</p>
<h1 id="génèse-du-management">Génèse du management</h1>
<p>Le terme de <em>management</em> apparait semble-t’il au XVIIIème siècle et sa proximité morphologique avec le <em>ménage</em> ou la <em>ménagère</em> n’est pas fortuite : le management est d’abord l’art et la manière de prendre soin des enfants et de toutes les personnes dépendantes de la maisonnée. Par extension, il désigne l’organisation de la ferme et plus généralement de l’économie domestique.</p>
<p>La première vague de littérature de management, aux XVIIIème et XIXème siècles, a pour objectif de <em>prendre soin</em> de l’objet du management que ce soit un animal, une culture, un enfant ou un malade. Il y a toujours une dimension d’attachement personnel entre le <em>manager</em> et le <em>managé</em> et le but visé, quand il s’agit d’êtres humains, est l’autonomie de la personne : l’encadrement vise à faire <em>grandir</em> les individus, à les éduquer et les former, pas à les <em>contrôler</em>. Cette attitude est parfaitement adaptée à la société patriarcale et hiérarchisée de la première révolution industrielle, et s’incarne dans la figure du <em>patron paternaliste</em>. Le tissu social y est encore imprégné de solidarités et de dépendances inter-personnelles, de valeurs et de morale, quand bien même les patrons n’hésitent pas à exploiter brutalement la masse des ouvriers chassés de leur campagne.</p>
<p>Dans les sociétés traditionnelles que sont encore les sociétés du XVIIIème et de la première moitié du XIXème siècles, le travail est un impératif moral, une fin en soi. Le terme d’<em>industrie</em> renvoie d’abord à la morale : être <em>industrieux</em> est une qualité essentielle promue par la bourgeoisie qui accède au pouvoir au moment de la première révolution industrielle, mais il importe peu d’être efficace ou performant. Les gestes, les “travaux et les jours”, sont encore très souvent ritualisés, codifiés par la tradition ; les activités sont liées à un statut et une position spécifiques dans l’espace social ; le <em>travail</em> est ce qui produit l’harmonie domestique et sociale.</p>
<p>Le management pré-scientifique est ainsi fondamentalement patriarcal et paternaliste, l’entreprise n’est qu’une extension plus ou moins large de la famille et l’armée est la <em>seule</em> organisation de grande taille connue de tous : l’organisation de type militaire, hiérarchique et autoritaire, sert donc de référence tout au long du XIXème siècle aux dirigeants et aux ingénieurs chargés d’encadrer les ouvriers. C’est ce type d’organisation qui est mis en place dans les grandes compagnies ferroviaires, les premìères grandes entreprises privées aux USA à la fin du XIXème siècle.</p>
<h1 id="émergence-du-management-scientifique">Émergence du management scientifique</h1>
<div class="figure">
<img src="/images/early-forms.png" alt="Une base de données en 1916" />
<p class="caption">Une base de données en 1916</p>
</div>
<p>Le management ne prend son sens actuel qu’au tournant du XXème siècle, aux États-Unis, avec les publications de Frederick Taylor, au moment même où le <em>positivisme</em> et le progressisme se diffusent dans toutes les strates de la société ; où le culte de la performance et de l’efficacité s’imposent comme des évidences, portées par le progrès technologique et scientifique qui, avant les destructions des guerres mondiales, paraissent sans fin ; où la massification des modes de production et l’accroissement spectaculaire de la population urbaine distendent le tissu des relations interpersonnelles.</p>
<p>L’émergence et l’évolution du management accompagnent et s’appuient sur la mutation de ces formes de pouvoirs, passant de formes essentiellement interpersonnelles telles que la féodalité ou le premier capitalisme ; puis vers des formes <em>centralisées</em>, autoritaires, dont les parangons sont l’État-Nation et l’usine de masse qui culminent dans les dictatures fascistes ; enfin dans un pouvoir distribué et <em>systémique</em> ou pour le dire avec les motes de Foucault un <em>bio-pouvoir</em>, une autorité que <em>chacun</em> s’impose sans qu’il soit nécessaire de l’imposer de l’extérieur.</p>
<p>L’arrangement des espaces et du temps - comment organiser des cultures, une cuisine, un atelier, à quel moment faire telle ou telle chose - glisse des choses et des objets - champs, ateliers, maisons - aux êtres et aux pensées : le management scientifique est explicitement conçu comme contrôle des corps et des pensées, comme un dressage et un endoctrinement des individus au service de l’efficacité de l’organisation. Le <em>management</em> de la “nature” évolue progressivement en management des rapports sociaux par le contrôle des actions, déplacements, emplois du temps ; puis en production de normes sociales, de valeurs, de schémas de pensées, bref d’un ordre symbolique spécifique. Comme le souligne aussi <a href="libres-d-obeir.html">Johann Chapoutot</a>, la porosité est totale entre les pensées totalitaires du XXème siècle - nazisme, stalinisme, maoïsme - et la rationalité managériale que promeut le management scientifique.</p>
<p>Le management scientifique s’inscrit ainsi dans le cadre conceptuel cartésien de <a href="https://fr.wikipedia.org/wiki/Mathesis_universalis">Mathesis universalis</a>, il est un prolongement du rationalisme et plus particulièrement de la raison instrumentale considérant l’intégralité du monde comme sujet à la <em>mesure</em> mathématique. Les auteurs des premiers écrits du <em>management scientifique</em> cherchent déjà à tout mesurer, tout mettre en nombres, en équations, en formules, en “processus”…</p>
<p>Le management n’est pas une technique parmi d’autres mais l’extension de la rationalité instrumentale et mécaniste, cartésienne, aux être humains eux-mêmes. Ce n’est pas un outil au service de diverses formes de dominations, mais <em>une</em> forme de domination autonome, une vision du monde <em>totalisante</em> centrée sur l’efficacité.</p>
<blockquote>
<p>La morale et l’efficacité obéissent à des logiques très distinctes, et la première doit servir la seconde.</p>
<p>p. 200</p>
</blockquote>
<p>Pour les raisons grecque et classique, est rationnel l’être qui se conforme à sa nature et qui progresse dans ce chemin sans but ultime : <em>Γνῶθι σεαυτόν</em><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> nous propose Socrate ! Le management est la pointe extrême de la <em>rationalisation du monde</em><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, de la <em>rationalité instrumentale</em> comme puissance d’agir et de transformation du monde par l’homme<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, l’exaltation de la production et de la productivité conçus comme buts en soi. L’homme “maître et possesseur de la nature” <em>objective</em> le monde et ce faisant s’en sépare ontologiquement, il devient un <em>sujet</em> contemplant et manipulant le monde comme un <em>objet</em>.</p>
<h1 id="formes-du-management">Formes du management</h1>
<p>Malgré les apparences et les querelles de chapelles, il n’y a pas de contradictions profondes entre les différents “courants” du management. Du taylorisme pur et dur au management participatif et agile, en passant par le fordisme, le “druckerisme”, le TQM, le Lean, le “mouvement des Ressources Humaines”, toutes ces théories et pratiques, quand bien même elles se seraient construites en opposition à des théories précédentes, ont les mêmes fondements intellectuels : la rationalité managériale est multiforme mais vise toujours à la maîtrise et la mesure de domaines toujours plus étendus du travail. Ces conflits internes sont inévitables et même nécessaires pour que perdure et prospère le management comme champ autonome.</p>
<p>Pas plus qu’il n’est une science, le management n’est une <em>idéologie</em> car il ne promeut pas de projet ou de vision politique propres, mais est porté par les mutations sociales du milieu dans lequel il se développe. Le management prospère autant dans les démocraties libérales que populaires, dans le capitalisme que dans le socialisme réel. Il n’est pas non plus une science, ses lois sont au mieux des principes, ses expérimentations des heuristiques. Les simplifications parfois outrancières et la pauvreté conceptuelle dominent la littérature du management dont les auteur·e·s parviennent sans peine à remplir des centaines de pages avec des platitudes et des évidences assénées d’un ton docte et pénétré.</p>
<p>Le management est un point aveugle de la plupart des penseurs des sciences sociales qui le subsument sous les caractères de la rationalité marchande. Les économistes “classiques” ne pensent pas le management en tant que tel et ne voient que pertes et profits, microéconomie des marchés, efficience et efficacité vues sous l’angle de la concurrence pure et parfaite ; les marxistes et Marx le premier ne voient dans les managers qu’un avatar de la domination de la bourgeoisie sur le prolétariat, des social-traîtres pétris de fausse conscience et manipulés plus ou moins volontairement pour maintenir la super-structure qui les asservit. Seul Weber analysant la <em>bureaucratie</em> comme produit et moteur de l’émergence des États-Nations et de l’extension du capitalisme entrevoit les spécificités de ce groupe social.</p>
<p>Le <em>contrôle</em> n’est pas l’<em>autorité</em>, pas plus que la <em>discipline</em>. Il consiste en un <em>codage</em> généralisé des flux - d’information, de travail, d’apprentissage, de pouvoir - circulant dans l’organisation, codage qui constitue un des thèmes essentiels analysés par G.Deleuze et F.Guattari dans <a href="http://www.leseditionsdeminuit.fr/livre-Capitalisme_et_schizophr%C3%A9nie_2___Mille_plateaux-2015-1-1-0-1.html">Mille plateaux</a>, mais qu’ils renvoient à la logique propre du capitalisme sans distinguer au sein de celui-ci la logique managériale de la logique marchande.</p>
<h1 id="extension-du-domaine-du-management">Extension du domaine du management</h1>
<p>Entre les deux guerres, le management étend son emprise de la production à la consommation et voit croître et prospérer le marketing et la publicité. Il s’agit désormais d’étendre au <em>consommateur</em> lui-même les techniques du management des ouvriers, c’est-à-dire modeler les esprits et les corps, les habitudes, les désirs, envies, pensées propices à la consommation de tel ou tel produit.</p>
<p>Dans les années 60-70, le mouvement du <em>New Public Management</em> fait tomber les dernières barrières séparant le management scientifique des entreprises du gouvernement et de l’administration publiques. L’impératif d’efficacité et la rationalité managériale soumettent désormais l’action publique aux mêmes schèmes de mesure systématique et d’évaluation chiffrée que l’activité marchande et productive des entreprises. Les managers impersonnels - technocrates - se substituent aux politiques “inefficaces”, l’État n’est plus un gouvernement régalien essentiellement investit de la mission d’élaborer et d’appliquer la Loi issue de la puissance souveraine mais un ensemble de <em>services</em>. La <em>gouvernance</em> se substitue au <em>gouvernement</em>, la technique “objective” aux choix politiques “subjectifs”.</p>
<blockquote>
<p>L’entreprise est l’institution référentielle de ce peuple nouveau et le management son sens commun</p>
<p>p.110</p>
</blockquote>
<p>Le “management de soi”, l’obsession de l’objectivité et de l’efficacité pensés comme des idéaux indépassables, colonisent jusqu’à la vie intime des individus et, couplés aux fantastiques moyens techniques de l’informatique débouchent sur le <em>Quantified Self</em> et l’obsession de la mise en chiffres - et donc en données exploitables - de <em>tous</em> les aspects de notre vie. La littérature de “développement personnel” d’inspiration managériale nous enjoint à être de pures volontés objectivant nos corps, nos relations, nos pensées, nos actions et nos désirs dans le but de maximiser notre “bonheur”, notre “bien-être” ou tout simplement notre capital. Ce faisant, nous échangeons des appartenances - parfois lourdes à porter - à des groupes - famille, amis, nation, tribu, clan… - contre l’apparente liberté d’un infini de potentiels à actualiser et optimiser. L’autorité verticale, surplombante et transcendante s’efface remplacée par l’immanence de <em>scripts</em> que nous suivons “pour notre bien”, mais aussi pour le plus grand bénéfice de ceux qui émettent, relaient, exploitent ces multiples injonctions.</p>
<h1 id="conclusion">Conclusion</h1>
<p>De même que l’État se constitue en <em>appareil</em> autour d’une classe spécifique de clercs et laïcs éduqués précoccupés de légitimer un pouvoir abstrait en réaction au pouvoir de l’aristocratie et plus tard au pouvoir personnel du roi, le management scientifique se développe en même temps que croît une classe spécialisé - managers et ingénieurs - et en réaction au pouvoir personnel des entrepreneurs et “patrons”. Cette “homologie” structurale permet d’identifier le management aussi comme un champ au sens de <a href="http://www.seuil.com/ouvrage/sur-l-etat-pierre-bourdieu/9782020662246">P.Bourdieu</a> ; mais alors que pour P.Bourdieu c’est l’État qui constitue le champ ultime, le méta-champ englobant tous les champs, pour T.Le Texier c’est au contraire le management qui possède désormais cette propriété.</p>
<p>Guy Debord est l’un des rares penseurs à avoir compris, sans la nommer explicitement, la spécificité de cette rationalité “managériale” et son emprise sur l’ensemble du réel, ce qu’il dévoile et analyse dans <a href="https://www.babelio.com/livres/Debord-La-societe-du-spectacle/1788">La société du spectacle</a>, cette société où “tout ce qui était directement vécu s’est éloigné dans une représentation” (th. 1), dans laquelle “le but n’est rien, le développement est tout” (th. 14). Qu’il soit “concentré” - sous la forme d’une centralisation bureaucratique et autoritaire de l’appareil de production, “diffus” - sous la forme d’économies de marchés libérales, ou “intégré” - sous la forme du capitalisme globalisé triomphant après l’effondrement de l’Union Soviétique - le spectacle est <em>totalitaire</em> et prend possession de tous les aspects de la vie, et en tant qu’il est fondé sur l’ubiquité de la “marchandise” remplace le qualitatif par le quantitatif (th. 38).</p>
<p>J’écris ces lignes dans le contexte de la crise sanitaire provoquée par la pandémie de <a href="https://fr.wikipedia.org/wiki/Pand%C3%A9mie_de_maladie_%C3%A0_coronavirus_de_2019-2020">Covid-19</a>, alors que 800 millions de personnes se voient appliquées des mesures de confinement. Cette crise met en lumière de manière spectaculaire et tragique les failles et limites de la pensée managériale obsédée par l’efficacité quand elle s’applique à autre chose que la rentabilité économique d’une entreprise privée : c’est le “management” des systèmes de santé soumis aux impératifs de rentabilité et d’efficacité qui produit leur effondrement dans des pays comme l’Italie et peut-être bientôt la France ou les États-Unis.</p>
<p>La soumission permanente de pans entiers de plus en plus vastes de nos sociétés à l’obsession de la mesure, à l’instrumentalisation des êtres, des choses et du Monde, à l’objectivation de tout et de tous soumis à la dictature de la raison managériale ignorante de ses limites et aveugle à ce qui n’est pas quantifiable a produit, produit et produira de plus en plus de “crises” qu’elles soient sanitaires (SRAS, H1N1, Vache folle, Covid-19…), économiques (crise des “subprimes”, “dot-com bubble”, dettes souveraines, prêts étudiants), écologiques (réchauffement climatique, marées noires, chûte de la biodiversité) ou humanitaires (boat-people, famines, crise des migrants en Méditerranée, Syrie, Irak, Afghanistan).</p>
<p>Il serait évidemment absurde et naïf de prétendre que ce sont les managers et le management qui provoquent ces catastrophes, mais il est clair qu’un mode de pensée fondé exclusivement sur la mesure de toute chose, les statistiques à foison, la gestion rationnelle des moyens et la subsomption des fins en objectifs chiffrés est incapable de prendre en compte l’inattendu, l’imprévu, le <em>cygne noir</em>, la catastrophe. Il semble donc plus que jamais nécessaire de remettre à l’honneur l’<a href="/posts/kant2.html">impératif catégorique kantien</a> de <em>toujours</em> considérer autrui comme une fin et non un moyen.</p>
<p>Concrètement, cela signifie pour tous ceux d’entre nous qui sont aujourd’hui insérés dans les réseaux managériaux d’organisations diverses - fonctions publiques, petites et grandes entreprises, sous-traitants et freelance - qu’il est urgent de soumettre notre quotidien à l’épreuve de ces principes : quel est le <em>sens</em> de notre action, de notre travail, de notre rôle dans l’organisation ? Pour <a href="simone-responsabilite.html">G.Anders</a>, c’est la division du travail en fragments de plus en plus petits et de plus en plus déconnctés du but poursuivi, et donc notre incapacité à comprendre et envisager les conséquences de nos actions qui produit du <em>monstrueux</em>. Il est donc essentiel de lutter contre cette division imposée par la pensée managériale et de faire en sorte que le sens du travail de chacun soit compris de tous et que nous soyons maîtres de son organisation. C’est en recréant du <em>collectif</em> et des relations de travail égalitaires en vue d’un but commun que nous parviendrons à nous guérir du poison de l’efficacité.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>En particulier parce que ses théories sont infalsifiables et ses expériences non reproductibles du fait du poids du contexte et de la réflexivité dans toutes les organisations.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>c’est tellement classe de mettre du grec ancien dans un billet de blog, je n’ai pas pu résister à cette coquetterie.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Il est fascinant que cette rationalisation extrême sous la coupe de l’efficacité s’accomplit désormais dans la figure du <em>coach</em> et dans la prolifération de méthodes et pratiques plus ou moins irrationnelles et aux fondements scientifiques douteux. Programmation neuro-linguistique, analyse transactionnelle, communication non-violente, méditation de pleine conscience, modèles MBTI et une foultitude d’autres “outils” font désormais partie de la panoplie du “bon” manager. Retour du refoulé diraient les psychanalystes ?<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>oui, c’est le plus souvent un homme et rarement une femme.<a href="#fnref4">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;La mise en scène de la vie quotidienne&quot;</title>
    <link href="http://abailly.github.io/posts/la-presentation-de-soi.html" />
    <id>http://abailly.github.io/posts/la-presentation-de-soi.html</id>
    <published>2020-02-26T00:00:00Z</published>
    <updated>2020-02-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[Le livre est une analyse des interactions sociales vues comme une pièce de théâtre, un jeu de rôles dans lequel les membres d'une équipe collaborent pour donner un spectacle à des spectateurs]]></summary>
</entry>
<entry>
    <title>Sur &quot;Libres d&#39;obéir&quot;</title>
    <link href="http://abailly.github.io/posts/libres-d-obeir.html" />
    <id>http://abailly.github.io/posts/libres-d-obeir.html</id>
    <published>2020-01-18T00:00:00Z</published>
    <updated>2020-01-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Libres d&#39;obéir&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January 18, 2020</div>

<p><em>Libres d’obéir</em>, sous-titré <em>Le management, du nazisme à aujourd’hui</em> est un essai historique qui vise à mettre en lumière la “modernité du nazisme”, à analyser comment la vision radicale de la société et de l’humanité promue et développée par les nazis durant les 12 ans qu’aura durant le IIIème Reich n’est par sortie, par quelque portail transdimensionel magique<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, d’un univers parallèle mais a des racines et des prolongements dans <em>notre</em> modernité.</p>
<h1 id="synthèse">Synthèse</h1>
<p>Le livre se concentre essentiellement sur la vie de Reinhard Höhn, juriste, penseur du nazisme et de son organisation, <em>SS Oberführer</em> pendant la guerre puis fondateur et directeur de l’école de <em>management</em> de Bad-Harzburg, et aussi prolifique auteur de livres sur l’histoire militaire et le management. Höhn est pris ici comme un exemple archétypique de ces hauts-gradés du nazisme, penseurs de la pureté raciale et de l’espace vital pan-germanique, qui ont mis leur intelligence et leurs talents au service du projet national-socialiste ;<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> et qui après la guerre ont trouvé à recycler ces mêmes talents, édulcorés des éléments idéologiques les plus sulfureux, au sein de la social-démocratie.</p>
<p>Les premiers chapitres, suivant l’ordre chronologique, développent la conception de l’État national-socialiste proposée par Höhn et d’autres, et sa mise en oeuvre en Allemagne avant la guerre puis dans toute l’Europe pendant.</p>
<p>Premier étonnement : le totalitarisme nazi n’aime pas l’État, considéré comme une construction rationnelle d’inspiration romaine et française. L’État et ses fonctionnaires sont vus comme antagoniste à la vision naturaliste et vitaliste du lien organique entre le <em>peuple</em> et son <em>chef</em>. Le <em>führer</em> nazi n’est pas un dictateur, un autocrate, mais il émerge “naturellement” du peuple pour le guider, il ne le “représente” pas comme un élu, il l’incarne, il en est l’émanation naturelle, immanente et par conséquent incontestable : qui est contre le führer est contre le peuple.</p>
<p>L’organisation nazie va donc systématiquement chercher à réduire les pouvoirs de l’État en créant une multitudes d’organismes - d’organes - parallèles, très souvent concurrents les uns des autres, qui vont prendre en charge au nom du peuple tel ou tel aspect de la vie publique, ce qui, combiné à la rapacité et à la haine que se vouent les uns aux autres les différents barons du nazisme, conduit rapidement à un système extrêmement chaotique et mouvant.</p>
<p>Vitaliste, l’idéologie nazie voit dans la profusion d’officines et la compétition un phénomène naturel, le pendant au niveau du groupe de la lutte pour la vie que mènent les races et les être vivants entre eux. Par la compétition, seuls les meilleurs et les plus forts survivent et renforcent donc le grand corps du <em>peuple</em>, et ce qui est vrai des individus l’est aussi des groupes.</p>
<p>L’unité organique entre le chef et le peuple se décline aussi dans les organisations, usines et bureaux : le chef émerge du groupe naturellement, par ses compétences et son leadership ; ce qui n’empêche pas le capitalisme de s’accomoder parfaitement du nazisme car ce principe ne remet pas en cause la propriété des moyens de production, pour autant que ces moyens de production soient mis au service du peuple et du projet national-socialiste.</p>
<p>Compte-tenu de la réalité des conditions économiques de l’Allemagne, ruinée par la guerre et la crise économique, cette idéologie permet de mobiliser les “travailleurs” pour reconstruire le pays et accomplir le destin du peuple germanique de conquérir son espace vital, occupé par des races subalternes (slaves, latins) ou noyauté par les juifs.</p>
<p>Second étonnement : la propagande ne suffit pas, il faut “Manager et ménager la ‘ressource humaine’” comme l’indique le titre d’un chapitre ; il faut en quelque sorte <em>acheter</em> le consentement du peuple. Ce qui sera fait au travers d’une politique sociale généreuse - au moins en apparence - organisant vacances et croisières, loisirs, aides sociales en tout genre proposées par la <em>Kraft durch Freude</em> ou <em>Force par la joie</em>, intégré au <em>Deutsche Arbeitsfront</em> le syndicat unique.</p>
<p>C’est dans ce cadre que Höhn, alors professeur à Berlin et conseiller du Sicherheitsdienst (SD), le service de sécurité et d’espionnage de la SS et du parti, développe et peaufine ses théories du “management”, inspirées notamment par les réformes militaires de <a href="https://en.wikipedia.org/wiki/Gerhard_von_Scharnhorst">von Scharnhorst</a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>. Au coeur de ces principes se trouve l’<em>Auftragstaktik</em> ou <em>tactique par la mission</em> : l’officier se voit confié une mission par ses supérieurs, charge pour lui de mettre en oeuvre <em>tous</em> les moyens pour parvenir à remplir l’objectif<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>.</p>
<p>Höhn “disparait” à la fin de la guerre ce qui lui permet d’éviter la douloureuse épreuve des procès de dénazification, et reparait au début des années 50, après que la RFA a voté des lois d’amnistie pour les seconds couteaux. Il recommence à publier et fonde une école de management à <a href="https://de.wikipedia.org/wiki/Akademie_f%C3%BCr_F%C3%BChrungskr%C3%A4fte_der_Wirtschaft">Bad-Harzburg</a> qui verra passer 600000 cadres de toutes origines (jusqu’à 35000 par à son apogée en 1974) : industrie, services, privé et public…</p>
<p>Décliné en théorie du management, l’<em>Auftragstaktik</em> permet à l’organisation une grande souplesse et une performance maximale et devient le <em>management par objectif</em>. Les “managers” et employés à tous niveaux se voient confiés des missions et objectifs dont ils deviennent responsables, pour l’atteinte desquels tous les moyens sont bons. Ce principe sera développé dans la gestion des “ressources humaines”, notamment avec l’accent mis sur les “fiches de poste” et “lettres de mission”.</p>
<p>Dans les années 70, une nouvelle génération n’accepte plus les compromis fait par la RFA avec le passé nazi pour permettre la reconstruction et le “miracle économique” allemand. Des articles révèlent le passé nazi de Höhn, le forçant à prendre sa retraite. Son école fera faillite mais sera reprise, l’enseignement mis au goût du jour. Höhn meurt en 2000.</p>
<h1 id="analyse">Analyse</h1>
<p>J’ai eu l’occasion de discuter de ce livre - avant de l’avoir lu, suivant les conseils de Pierre Bayard - sur le <em>Slack</em> “Les agiliste”, suite à une interview de <a href="https://www.liberation.fr/debats/2020/01/05/johann-chapoutot-le-nazisme-a-ete-une-matrice-du-management-moderne_1771724">Johann Chapoutot</a> parue dans Libération. Il est clair que l’interview est beaucoup moins nuancée que le livre et que l’amalgame qui y est fait entre le management moderne et le nazisme ressemble fort à la volonté d’atteindre le point Godwin en un coup.</p>
<p>Le livre, en retraçant le parcours intellectuel et professionnel de Reinhard Höhn, permet sinon de révéler du moins de rappeler que la modernité est soluble dans le nazisme malgré, ou peut-être grâce à, l’extraordinaire incohérence dans le <em>discours</em> nazi et dans sa mise en oeuvre : entre l’exaltation des forces de la Nature et l’asservissement de la technicité la moins naturelle, la critique radicale de l’État et l’incroyable enchevêtrement bureaucratique créé par les diginitaires nazis, l’asservissement de l’individu à la communauté, à la “race” et la fascination pour les héros, les individus exceptionnels ; et, donc, la flexibilité et l’agilité requise dans les strates intermédiaires des organisations et la rigidité des objectifs et des hiérarchies.</p>
<p>Bien évidemment, ce livre est surtout une critique du “management”, montrant la filiation directe qui relie les méthodes qui ont aujourd’hui le vent en poupe - délégation, bonheur au travail, flexibilité - aux techniques de <em>Menschenfürung</em> développées par Höhn et ses semblables dans le but de maximiser la “productivité” de la machine de guerre nazie. Le parallèle pourrait même être poussé un cran plus loin en soulignant à quel point l’attention accordée aux employés et cadres des grandes organisations contemporaines a pour contrepoint l’exploitation de masse dans des pays à bas coût de main d’oeuvre, de même que le bonheur du travailleur allemand était indexé sur la mise en coupe réglée et l’esclavage d’une grande partie de l’Europe.</p>
<p>Il par ailleurs souligne la perversité de ces méthodes “modernes” qui d’un côté sont aux petits soins pour les individus, s’occupent des moindres détails de leur bien-être ; et de l’autre les responsabilisent à outrance en leur fixant des objectifs souvent inaccessibles par des voies “normales”, produisant de la charge de travail supplémentaire et parfois des comportements violents. Cette dissociation de la responsabilité entre les fins et les moyens est incroyablement perverse car elle permet à tous les échelons de se défausser : les chefs, en disant qu’ils n’ont pas voulu ça et que les subordonnés ont pris trop d’initiatives, les subordonnés en disant qu’ils n’ont fait que le travail qui leur été demandé et qu’ils n’étaient que des rouages dans la machine.</p>
<p>Le “mystère” nazi - comment une nation parmi les plus civilisées du monde a pu sombrer dans la barbarie industrialisée - n’en est évidemment pas un : en séparant les <em>moyens</em> des <em>fins</em> et en jouant sur les affects d’une population meurtrie et déboussolée, tout devient possible.</p>
<p>“Libres d’obéir” offre aussi d’autres pistes de réflexion qui font écho à toute une littérature sociologique et anthropologique sur la domination, sa fatalité, ses mécanismes, ses masques, en tout premier lieu bien sûr au travail de Bourdieu. Je pense en particulier à ses cours <a href="http://www.seuil.com/ouvrage/sur-l-etat-pierre-bourdieu/9782020662246">Sur l’État</a> et à son analyse de la formation de l’État moderne comme constitution d’un <em>champ</em> autonome permettant à toute une classe de lettrés d’acquérir du pouvoir face à la noblesse et au clergé, qui répond à la théorie nazi de formation de l’État comme instrument au service du Prince contre le Peuple.</p>
<p>Cette vision de l’État comme antithétique à la communauté du peuple ou de la race semble curieusement peu éloignée de certaines conceptions d’inspirations rousseauistes ou libertaires, à cette différence fondamentale près que là où les nazis postulent une communauté d’origine naturelle, constituée par le sang et bornée par la pureté raciale, Rousseau et la tradition anarchiste libertaire ne posent aucune limite à la manière dont les individus libres s’associent pour former communauté.</p>
<p>Plus simplement et plus concrètement, ce livre constitue à mon sens un salutaire rappel sur la généalogie plus que douteuse des organisations modernes et sur la nécessité de “refaire société” sur des bases qui tiennent compte et des <strong>moyens</strong>, et des <strong>fins</strong>, ce qui suppose un changement radical des modes de constitution et de gouvernement des entreprises, syndicats et services publics ; et sur notre responsabilité, en tant que membre de ces organisations.</p>
<p>Il souligne enfin que la domination d’une partie de la population sur une autre ne peut se faire uniquement par la force, ni même principalement par elle : il y faut du consentement.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>L’altérité radicale du Mal est un thème essentiel dans les films et comics de super-héros. Dans le film <em>Avengers</em>, le monde est menacé par des aliens qui surgissent d’un portail transdimensionnel, appelés par Loki, et sauvé par des super-héros qui, s’ils sont divers et parfois étranges n’en sont pas moins tous profondément <em>américains</em>. Il y a des super-vilains américains bien sûr, mais ils sont “normaux”, ils ne menacent pas vraiment l’équilibre du monde, ils sont mauvais mais ne sont pas le <em>Mal</em>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Un exemple plus connu est celui d’<a href="https://en.wikipedia.org/wiki/Albert_Speer">Albert Speer</a>, dont le génie organisateur a grandement aidé l’Allemagne, comparativement pauvre en ressources, à développer une économie de guerre extrêmement efficace. La lecture de ses mémoires, <a href="https://www.fayard.fr/pluriel/au-coeur-du-troisieme-reich-9782818500118">Au coeur du IIIème Reich</a>, vaut le détour.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Von Scharnhorst est le général qui a réformé l’armée prussienne, sclérosée dans les méthodes et la pensée de Frédéric II et laminée par Napoléon en 1806-1807.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Dans les wargames sur la seconde guerre mondiale, les chefs intermédiaires allemands bénéficient toujours d’un “bonus” d’initiative par rapport aux autres nations ; et les fameux <em>Kampfgruppe</em>, groupements ad hoc d’unités combattantes diverses, représentent la traduction de cette flexibilité dans les moyens mis en oeuvre pour atteindre l’objectif.<a href="#fnref4">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>My Projects for 2020</title>
    <link href="http://abailly.github.io/posts/projects-2020.html" />
    <id>http://abailly.github.io/posts/projects-2020.html</id>
    <published>2020-01-01T00:00:00Z</published>
    <updated>2020-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>My Projects for 2020</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January  1, 2020</div>

<p>This year 2019 has been exciting in many respects, but it’s coming to an end and the time is ripe to look forward: 2020, here I come! For my own personal records, I have written up a list of things I would like to work on, investigate, learn, discover and more generally spend some time tinkering with. I look forward to the 31st of December, 2020, to check by which margin I overestimated the time I could reasonably put into side projects!</p>
<h1 id="idris">Idris</h1>
<p>I fell in love with Idris (1) while reviewing Edwin Brady’s <a href="https://www.manning.com/books/type-driven-development-with-idris">awesome book</a>. Having concrete examples of code that leveraged <a href="https://en.wikipedia.org/wiki/Dependent_type">Dependent Types</a> was an eye opener to me. Since then, I <a href="http://abailly.github.io/posts/dependently-typed-accounting.html">have</a> <a href="http://abailly.github.io/posts/dependently-typed-date.html">tried</a> to get a <a href="http://abailly.github.io/posts/dependent-types-ddd.html">better understanding</a> of how dependent types could be put to use in my “Real World”, ie. to improve the design of mundane software.</p>
<p>In 2020, I plan to continue investigating that topic through various angles.</p>
<h2 id="type-systems-and-domain-driven-design">Type Systems and Domain-Driven Design</h2>
<ul>
<li>How can we use Dependent types and Dependently Typed languages to better model the <em>domains</em> our code works on?</li>
<li>What are other interesting type systems that could be used for that purpose?</li>
<li><a href="https://en.wikipedia.org/wiki/Homotopy_type_theory">Homotopy Type Theory</a> looks both extremely fun, extremely abstract and extremely complex for someone who, like me, does not have a PhD in Algebra ; something like a Category Theory but even more hype! <a href="https://github.com/mortberg/cubicaltt">Cubical Type Theory</a> is an implementation of HoTT, could it useful to model the kind of problems I encounter in my day job like Double-entry Ledger, payroll software, distributed systems…?</li>
<li>Two years ago I built an <a href="https://github.com/abailly/xxi-century-typed/tree/master/minilang">implementation of MiniTT</a> in order to deepen my understanding of such type systems, but this language was too minimalist to be really usable. I have tried again following David Christiansen’s <a href="http://davidchristiansen.dk/tutorials/nbe/">Normalization by Evaluation</a> tutorial, this time in Idris.</li>
</ul>
<h2 id="ide-and-developers-experience">IDE and Developer’s Experience</h2>
<ul>
<li>I have started contributed to the best of my abilities to <a href="https://github.com/edwinb/Idris2">Idris2</a> and one area I am particularly interested in is how to improve the developer’s experience, how to leverage the compiler’s machinery to let the developer <em>dialog with the typechecker</em> while building the software?</li>
<li><a href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a> was one of the first languages to provide superior tools for development, with an integrated development environment where one could inspect every aspect of the system and dynamically change it, getting instant feedback. Could we do the same with Idris2, letting the developers interact with the compiler <em>and</em> the live system’s state while building it? Idris, like <a href="https://coq.inria.fr/">Coq</a>, provides sophisticated tooling for <em>theorem proving</em> which is just the activity of deriving code (proof) from types (propositions).</li>
<li><a href="https://github.com/hazelgrove/hazel">Hazel</a> is an example of a system that provides tooling around <em>holes</em>, allowing the developer to build the system partially, providing placeholders (stubs) in areas which need further development while still allowing the system to execute the implemented parts. Surely, there’s something to learn here and implement for Idris!</li>
<li>Being a practitioner and strong proponent of <a href="https://www.jamesshore.com/Agile-Book/pair_programming.html">Pair</a> and <a href="https://en.wikipedia.org/wiki/Mob_programming">Mob Programming</a>, I wish our tools did not suck that much when it comes to sharing with fellow developers! I would like to spend some time building a <em>Distributed Development Environment</em> based on something like Idris to let 2 or more developers collaborate in real time on the development of a system.</li>
</ul>
<h2 id="online-games">Online Games</h2>
<ul>
<li>I have implemented most of the rules of a <a href="https://github.com/abailly/hsgames/tree/master/bautzen1945">wargame</a> in Idris (1 and 2), but have been stuck with turning this kernel into a usable software. I would like to build a UI in Elm that would allow multiple users and multiple simultaneous games, but the support for multi-threading is somewhat lacking in both versions of Idris.</li>
<li>I had hopes I could leverage Idris2’s underlying Scheme runtime to provide the heavylifting for concurrent channels but unfortunately, the game does not even run on Idris2, probably because of the lack of optimisation in various low-level numeric operations on <code>Nat</code>s.</li>
<li>This lead me to the conclusion that having an optimised low-level backend for Idris2 would be useful. <a href="https://llvm.org/">LLVM</a> is the way to go for such an endeavour!</li>
</ul>
<h1 id="testing">Testing</h1>
<h2 id="property--and-model-based-testing">Property- and Model-Based Testing</h2>
<ul>
<li><a href="https://hackage.haskell.org/package/QuickCheck">QuickCheck</a> (along with similar packages for languages other than Haskell) is a fantastic tool when our types come short of providing us the necessary confidence in our implementation. My former colleague <a href="https://bobkonf.de/2018/andjelkovic.html">Stevan Andjelkovic</a> has created <a href="https://github.com/advancedtelematic/quickcheck-state-machine/">quickcheck-state-machines</a> which provides a great implementation of state-machine based testing, allowing one to generate tests from a more abstract automata-like <em>model</em> of a software.</li>
<li>An idea that is dear to my heart and which I have awkwardly promoted as <a href="https://github.com/aleryo/homomorphic-event-sourcing">Homomorphic Event Sourcing</a> is that a single Input/Output State Machine based model could be used both as a <em>tester</em> and as a <em>mock</em>, providing an executable specification to securely develop clients and servers in parallel.</li>
<li>But once we have FSM models, why not bite the bullet and turn those into proper types, like <a href="http://simonjf.com/2016/05/28/session-type-implementations.html">Session types</a>?</li>
<li>I definitely want to keep investigating that field, possibly building on QSM package to provide better mocking</li>
</ul>
<h2 id="fitnesse-atddbdd">FitNesse &amp; ATDD/BDD</h2>
<ul>
<li><a href="http://fitnesse.org">FitNesse</a> has been my favorite BDD/ATDD tool for years, but I must admit it is definitely showing signs of its age: Running a shared instance is somewhat painful to maintain, Wiki syntax is “non-standard” (not there is such a thing as standard Wiki syntax but still…), user experience is terrible when compared to things like http://notion.so … Maybe the time is ripe for starting afresh and create a more modern version of it?</li>
<li>What if we could combine models, examples, documentation and tests execution within a single tool? This idea is related to the <em>developers experience</em> I have already mentioned, and hints at tools like <a href="https://jupyter.org/">Jupyter</a> notebooks and Bret Victor’s <a href="http://worrydream.com/LadderOfAbstraction/">Ladder of Abstraction</a></li>
<li>Maybe the Wiki idea is not so much a useful tool than a barrier to entry for newcomers, esp. non-developers who might be reluctant to code the formatting of a page when they are used to rich UIs? FitNesse is an evolution of <a href="http://fit.c2.com/">FIT</a> which initially interpreted <em>spreadsheets</em>. Given the ubiquity of online spreadsheet tools, I think getting back to a simple tool for interpreting and executing spreadsheets would be worth a try.</li>
</ul>
<h1 id="various-software-related-stuff">Various Software-related stuff</h1>
<ul>
<li>With <a href="https://www.linkedin.com/in/fredericmerizen/?originalSubdomain=fr">Frédéric Merizen</a> I have given in November a trial session of a <a href="">Functional Architecture</a> course inspired by <a href="https://www.deinprogramm.de/sperber/">Michael Sperber</a> and <a href="https://nicolerauch.de/">Nicole Rauch</a> own <a href="https://www.isaqb.org/wp-content/uploads/2018/09/isaqb-Lehrplan-advanced-FUNAR_1.0.pdf">course in German</a>. We plan to build on that experience to provide a commercial version of that training, possibly in several cities in France.</li>
<li>Having worked for almost 3 years at <a href="https://symbiont.io">Symbiont</a> on building a so-called <em>Smart Contracts</em> platform, and more precisely a distributed and decentralised application to manage loans on top of this platform, gave me a new perspective on the potential of <em>Blockchain</em> (aka. <em>Distributed Ledger Technology</em>) for developing distributed systems. I believe a generalised <em>Event Sourcing</em> approach as exemplified in the <a href="https://github.com/aleryo/one-log">One Log</a> talk we gave with Yann Schwarz at <a href="https://www.youtube.com/watch?v=zKtCsODXjbw">Codemesh</a> and <a href="https://bordeaux.ncrafts.io/2018/">NCrafts Bordeaux</a> in 2018, is a great way to design and build software system on such platforms.</li>
<li>I would like to explore how public and/or open-source “blockchain” platforms can support large and complex decentralised applications dedicated to some specific domains like finance, supply chain or even e-government.</li>
<li>At the theoretical level, I definitely need to improve my knowledge of fundamental principles of decentralised systems, how to model them, how to reason about them, how to verify them… I wonder if <a href="http://www.numdam.org/article/ITA_1987__21_2_99_0.pdf">Asynchronous automata</a> could not provided some interesting foundations for reasoning about such kind of systems.</li>
</ul>
<h1 id="non-software">Non-software</h1>
<ul>
<li>Since I have read Merleau-Ponty’s <a href="http://abailly.github.io/posts/pheno-perception.html">Phénoménologie de la perception</a>, I have been fascinated by <em>Phenomenology</em>: What is it, how does it “work”, what insights does it provide… I have started reading Husserl’s <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/Bibliotheque-de-Philosophie/Idees-directrices-pour-une-phenomenologie-pure-et-une-philosophie-phenomenologique">Idées directrices pour une phénoménologie pure et une philosophie phénoménologique</a> in the hope to gather some insights on things like <em>epoché</em> or the <em>phenomenological reduction</em> process.</li>
<li>I think such tools could be useful as a way to approach software differently, maybe complementing the <a href="http://abailly.github.io/posts/therapeutique-du-code.html">therapeutical approach</a> I advocated a couple years ago: Analysing software systems as pure <em>phenomena</em>, in the way they <em>appear</em> to the people that work on them or with them, removing the cruft of judgment, prejudices and builtin assumptions about them ; tracking the <em>intentionality</em> behind the relations we have with software intensive systems.</li>
<li>I recently read Robin K. Hill’s <a href="https://link.springer.com/article/10.1007/s13347-014-0184-5">What an algorithm is?</a> and this looks like the kind of analysis I am trying to develop.</li>
<li>I have also started reading Piketty’s <a href="https://www.seuil.com/ouvrage/capital-et-ideologie-thomas-piketty/9782021338041">Capitalisme et idéologie</a> which is a “Sequel” to his extraordinary successful <a href="http://www.seuil.com/ouvrage/le-capital-au-xxie-siecle-thomas-piketty/9782021082289">Le capital au XXIème siècle</a>. Piketty is one of the few modern-day thinkers that are both optimistic and realistic, providing concrete and actionable - even if counter-intuitive or controversial - solutions to make a better world.</li>
<li>In the same vein, I recently discovered the existence of <a href="https://en.wikipedia.org/wiki/Modern_Monetary_Theory">Modern Monetary Theory</a> which seems to be a form of Neo-Keynesianism, an heterodox macroeconomic theory that strives to counter neo-liberalist economic theory and restrictive monetary policies that are the heart of our world’s growing inequalities. I look forward to read the book <a href="https://www.amazon.fr/gp/product/1137610662/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1">Macroeconomics</a> and form a better understanding of what <em>MMT</em> is and how to rebuild a credible Left alternative.</li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>That’s obviously a ridiculously too high number of complex topics for a single person, in a single year. Especially taking into account I also plan to earn some money with a day job that might not fit perfectly with any of those projects, spend more time with my family, read books just for the pleasure of reading books, run and workout… Let’s see what 2020 has to offer, I will be happy if I can make some decent progress on one or two of those topics!</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Adventures in Dependently Typed Accounting</title>
    <link href="http://abailly.github.io/posts/dependently-typed-accounting.html" />
    <id>http://abailly.github.io/posts/dependently-typed-accounting.html</id>
    <published>2019-09-06T00:00:00Z</published>
    <updated>2019-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Adventures in Dependently Typed Accounting</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September  6, 2019</div>

<blockquote>
<p>This article is the <a href="/posts/dependently-typed-date.html">third installment</a> of a series of articles exploring connection between <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://en.wikipedia.org/wiki/Dependent_type">Dependent types</a> as implemented in <a href="http://idris-lang.org">Idris</a>. It’s been written as prepaatory work to a talk given at the <a href="https://www.meetup.com/software-craftsmanship-bdx/events/264578542/">Okiwi meetup</a> in Bordeaux.</p>
</blockquote>
<p>Although it took me more than 2 years to write a sequel to my previous post on the subject of <em>DDD + T(ype)DDD</em>, it’s a subject that I keep having in the back of my mind and something I try to apply in my day job wherever it’s possible. This time, I am investigating how to write a double-entry bookkeeping module in Idris, in the spirit of <a href="https://www.ledger-cli.org/">ledger</a> and <a href="https://hledger.org/">hledger</a>. Of course, what I wrote is nowhere near as full-featured as hledger, it’s mostly a proof-of-concept that only allows one to <em>parse</em> a ledger-formatted file and <em>pretty-prints</em> back its content.</p>
<p>What’s interesting in double-entry accounting is that it’s a “business-domain” that is relatively simple to explain and understand, grounded on some basic <em>invariants</em> that should be enforced to guarantee transactions and ledger stay consistent. This post won’t go into the details of the code which can be found in a <a href="https://github.com/abailly/xxi-century-typed/tree/master/idris/src/Accounting">github repository</a>. It’s more of a narrative on the design choices I made and what it entails to write such code in Idris, trying to highlights both the strengths of the language and its weaknesses, or its darker corners.</p>
<p>I would like to say a big “Thank you!” to the smart and friendly people from the <code>#idris</code> channel who have helped me write most of the proofs in this code, providing advices and direction on how to approach proof-writing in such a language.</p>
<h1 id="basic-concepts">Basic Concepts</h1>
<p>Here is an excerpt from <a href="https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system">Wikipedia page on double-entry bookkeeping</a>:</p>
<blockquote>
<p>In the double-entry accounting system, at least two accounting entries are required to record each financial transaction. These entries may occur in asset, liability, equity, expense, or revenue accounts. Recording of a debit amount to one or more accounts and an equal credit amount to one or more accounts results in total debits being equal to total credits for all accounts in the general ledger. If the accounting entries are recorded without error, the aggregate balance of all accounts having Debit balances will be equal to the aggregate balance of all accounts having Credit balances. Accounting entries that debit and credit related accounts typically include the same date and identifying code in both accounts, so that in case of error, each debit and credit can be traced back to a journal and transaction source document, thus preserving an audit trail. The accounting entries are recorded in the “Books of Accounts”. Regardless of which accounts and how many are impacted by a given transaction, the fundamental accounting equation of assets equal liabilities plus capital will hold.</p>
</blockquote>
<p>From this description we get some basic information about the “domain” that we’ll want to implement:</p>
<ul>
<li>A <em>transaction</em> comprises at least 2 <em>entries</em></li>
<li>An <em>entry</em> records a <em>debit</em> or <em>credit</em> amount in an <em>account</em></li>
<li>An <em>account</em> can fall into 5 different categories: <em>asset</em>, <em>liability</em>, <em>equity</em>, <em>expense</em>, or <em>revenue</em></li>
<li>The aggregate debit and credit <em>balance</em> of all accounts should be equal</li>
<li>A <em>book of accounts</em> should preserve a <em>fundamental equation</em> that ensures <code>asset = liability + equity</code><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></li>
</ul>
<p>From these elements, we can start to code and first of all define the <em>types</em> we’ll need. The whole point of this series of post is to apply DDD principles to Type-Driven Development which means we want our <em>domain concepts</em> to be reflected directly into the <em>core domain</em> of our code. So we end up needing the following types:</p>
<ul>
<li>An <code>Entry</code> which contains an <code>Account</code> and some <em>amount</em> (more on this later) with a <code>Direction</code>, <code>Debit</code> or <code>Credit</code>,</li>
<li>A <code>Transaction</code> has a date, a <code>String</code> label and a list of <code>Entry</code> which must be <code>Balance</code>d,</li>
<li>A <code>BookOfAccounts</code> is a list of <code>Transaction</code>s such that the <em>fundamental equation</em> holds at all time.</li>
</ul>
<h1 id="take-1">Take 1</h1>
<p>Equipped with all this information, I started implementing the various data types, embedding the needed invariants within the definition of the types. My initial version looked like the following (see <a href="https://github.com/abailly/xxi-century-typed/blob/2c81760819f1ab1d9ba0bc101b64a168d2817bb8/idris/src/Accounting/Core.idr">Core.idr</a> for details).</p>
<h2 id="core-domain">Core Domain</h2>
<p>The <code>Balance</code> is a simple alias for a tuple of a <code>Nat</code> and a <code>Direction</code> (debit or credit) and the other core types are straightforward:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Balance</span> <span class="ot">:</span> <span class="dt">Type</span>
<span class="dt">Balance</span> <span class="fu">=</span> (<span class="dt">Nat</span>, <span class="dt">Direction</span>)

<span class="kw">data</span> <span class="dt">Account</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkAccount</span> <span class="ot">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> { type <span class="ot">:</span> <span class="dt">AccountType</span> } <span class="ot">-&gt;</span> <span class="dt">Account</span>

<span class="kw">record</span> <span class="dt">Entry</span> <span class="kw">where</span>
  constructor <span class="dt">MkEntry</span>
  <span class="fu">amount</span> <span class="ot">:</span> <span class="dt">Balance</span>
  <span class="fu">account</span> <span class="ot">:</span> <span class="dt">Account</span></code></pre></div>
<p>Then a <code>Transaction</code> contains <code>Entries</code> of length at least 2 and with a <code>Balance</code> of <code>(0, Cr)</code>.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Entries</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkEntries</span> <span class="ot">:</span> (entries <span class="ot">:</span> <span class="dt">Vect</span> n <span class="dt">Entry</span>) <span class="ot">-&gt;</span>
              { <span class="kw">auto</span> need2Entries <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">2</span> n } <span class="ot">-&gt;</span>
              { <span class="kw">auto</span> balanced <span class="ot">:</span> balance entries <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>) } <span class="ot">-&gt;</span>
              <span class="dt">Entries</span>

<span class="kw">record</span> <span class="dt">Transaction</span> <span class="kw">where</span>
  constructor <span class="dt">Tx</span>
  <span class="fu">label</span> <span class="ot">:</span> <span class="dt">String</span>
  <span class="fu">date</span> <span class="ot">:</span> <span class="dt">Date</span>
  <span class="fu">entries</span> <span class="ot">:</span> <span class="dt">Entries</span></code></pre></div>
<p>The <code>balance</code> function computes the aggregated balance of a list of entries, taking advantage of the fact our <code>Balance</code> type is a <code>Monoid</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">balance</span> <span class="ot">:</span> <span class="dt">Vect</span> n <span class="dt">Entry</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span>
balance <span class="fu">=</span>  normalise <span class="fu">.</span> concat <span class="fu">.</span> map amount</code></pre></div>
<p>The <code>normalise</code> function is needed because a 0 balance can be either a <code>Dr</code> or <code>Cr</code>. More on this later…</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">  <span class="kw">where</span>
    <span class="fu">normalise</span> <span class="ot">:</span> <span class="dt">Balance</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span>
    normalise (<span class="dt">Z</span>, <span class="dt">Dr</span>) <span class="fu">=</span> neutral
    normalise bal     <span class="fu">=</span> bal</code></pre></div>
<p>And we are then ready to define our <code>BookOfAccounts</code> type to group a sequence of transactions:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">BookOfAccounts</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">BookTransactions</span> <span class="ot">:</span> (txs <span class="ot">:</span> <span class="dt">Vect</span> k <span class="dt">Transaction</span>) <span class="ot">-&gt;</span>
                     { <span class="kw">auto</span> fundamentalEquation <span class="ot">:</span> invert (assets txs <span class="fu">&lt;+&gt;</span> expenses txs) <span class="fu">=</span> liabilities txs <span class="fu">&lt;+&gt;</span> capital txs <span class="fu">&lt;+&gt;</span> revenues txs } <span class="ot">-&gt;</span>
                     <span class="dt">BookOfAccounts</span></code></pre></div>
<p>Note that we have modified the <code>fundamentalEquation</code> to take into account <code>expenses</code> and <code>revenues</code>. It is actually the case that <code>asset = liability + equity</code> only when taking into account the profit or deficit that is the difference between revenues and expenses. In actual accounting practices, a “normal” transaction always involves an expense or revenue account and one or more balance sheet account.</p>
<h2 id="testing">Testing</h2>
<p>One of the benefits of using a Type-Driven Approach in a language like Idris is that we can use the compiler/typechecker to run <em>tests</em>, instead of having to define separate test suites.</p>
<p>Given some <code>Account</code>s definitions:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Capital</span> <span class="ot">:</span> <span class="dt">Account</span>
<span class="dt">Capital</span> <span class="fu">=</span> <span class="dt">MkAccount</span> <span class="st">&quot;Capital&quot;</span> {type <span class="fu">=</span> <span class="dt">Equity</span>}

<span class="dt">Bank</span> <span class="ot">:</span> <span class="dt">Account</span>
<span class="dt">Bank</span> <span class="fu">=</span> <span class="dt">MkAccount</span> <span class="st">&quot;Bank&quot;</span> {type <span class="fu">=</span> <span class="dt">Asset</span>}</code></pre></div>
<p>We can use propositional equality, that is the <code>Type</code> asserting that two expressions are the same, as a way to assert some property holds, and then <em>prove</em> the property actually holds by providing an implementation for it that will be typechecked:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">valid1</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Dr</span>) <span class="dt">Bank</span>,
                  <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>)
valid1 <span class="fu">=</span> <span class="dt">Refl</span>

<span class="fu">valid2</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Bank</span>,
                  <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Dr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>)
valid2 <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>Interestingly we can also state <em>negative</em> properties by proving there can never be an implementation for this type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">invalid</span> <span class="ot">:</span> <span class="dt">Not</span> (balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Bank</span>,
                         <span class="dt">MkEntry</span> (<span class="dv">101</span>, <span class="dt">Dr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>))
invalid <span class="fu">=</span> <span class="fu">\</span> <span class="dt">Refl</span> <span class="kw">impossible</span></code></pre></div>
<p>And those tests found a bug in my code! The order in which the entries were given in a transaction mattered as I had forgotten to recursively call the accumulation function in one case.</p>
<h2 id="parsing">Parsing</h2>
<p>Once we have our core model’s types defined, we can try to talk to the outside world. Here, we’ll simply parse a list of transactions in the <em>ledger</em> format:</p>
<pre><code>2019-01-01 Some transaction
  Asset:Bank  D 100
  Equity:Capital C 100

2019-01-02 Another transaction
  Asset:Bank C 90
  Expense:Foo D 80
  Liability:Tax D 10
</code></pre>
<p>and ensure we are able to pretty-print it in the same format.</p>
<p>I use the <a href="https://github.com/ziman/lightyear">lightyear</a> parser combinators library which is pretty-much a clone of Haskell’s parsec and is similar to every other parser combinators library out there. What’s more relevant to our purpose is the fact that the types I have defined <em>enforce</em> their invariant at the <em>constructor level</em> which means they require the calling context to provide the <em>proofs</em> those invariants are indeed valid.</p>
<p>In the <code>parseEntries</code> function for example, we need to make sure provide a sequence of the correct length (at least 2) and a proof that the entries are <em>balanced</em> in order to build an <code>Entries</code> value.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">parseEntries</span> <span class="ot">:</span> <span class="dt">Parser</span> <span class="dt">Entries</span>
parseEntries <span class="fu">=</span> <span class="kw">do</span>
  e1 <span class="ot">&lt;-</span> parseEntry
  endOfLine
  e2 <span class="ot">&lt;-</span> parseEntry
  endOfLine
  es <span class="ot">&lt;-</span> sepBy parseEntry endOfLine
  <span class="kw">let</span> entries <span class="fu">=</span> e1 <span class="ot">::</span> e2 <span class="ot">::</span> fromList es
  <span class="kw">case</span> decEq (balance entries) <span class="dt">Zero</span> <span class="kw">of</span>
    (<span class="dt">Yes</span> prf) <span class="ot">=&gt;</span> pure <span class="fu">$</span> <span class="dt">MkEntries</span> entries
    (<span class="dt">No</span>  <span class="fu">_</span>)   <span class="ot">=&gt;</span> fail <span class="st">&quot;Entries are not balanced, total debits minus total credits should be 0&quot;</span></code></pre></div>
<p>In other words, there is no way<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> to build an invalid value and the Idris type system guarantees our <em>core model</em> will stay consistent <em>at compile time</em>. Applying a <em>Ports and adapters</em> or <em>Hexagonal Architecture</em> strategy leaves no room for introducing errors in our core model, completely alleviating the need to have such validation concerns (eg. checking values range, lengths, validate data…) leak into the model’s code.</p>
<h2 id="evaluation">Evaluation</h2>
<p>I was pretty happy with myself, patting me in the back for having succeeded in modelling double-entry bookkeeping in a nice simple type-safe model. Then I realised that <em>implementing</em> <code>Monoid Balance</code> was the first step, I still needed to <em>prove</em> the <a href="https://en.wikibooks.org/wiki/Haskell/Monoids#Monoid_laws">monoid laws</a> hold for my type and <code>&lt;+&gt;</code> operation. This is when things started to go awry…</p>
<p>The proof for neutral element is short but already highlights the main issue:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">rightNeutralBalance</span> <span class="ot">:</span> (x <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (x <span class="fu">&lt;+&gt;</span> (<span class="dv">0</span>, <span class="dt">Cr</span>) <span class="fu">=</span> x)
rightNeutralBalance (n, <span class="dt">Cr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusZeroRightNeutral n <span class="kw">in</span> <span class="dt">Refl</span>
rightNeutralBalance (<span class="dt">Z</span>, <span class="dt">Dr</span>) <span class="fu">=</span> believe_me <span class="st">&quot;special case for zero debit&quot;</span>
rightNeutralBalance (<span class="dt">S</span> n, <span class="dt">Dr</span>) <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>The problem is that there really are <em>two</em> neutral elements, a 0 debit and a 0 credit. I have chosen to consider the canonical neutral element to be <code>(0, Cr)</code> but that’s just a convention which comes bite me in the back when trying to prove things: I am forced to use the magic <code>believe_me</code> function to lure the typechecker in the <code>(0, Dr)</code> case.</p>
<p>Things get even worse when trying to prove associativity:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">associativeBalance</span> <span class="ot">:</span> (x <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (y <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (z <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (x <span class="fu">&lt;+&gt;</span> (y <span class="fu">&lt;+&gt;</span> z) <span class="fu">=</span> (x <span class="fu">&lt;+&gt;</span> y) <span class="fu">&lt;+&gt;</span> z)
associativeBalance (a, <span class="dt">Dr</span>) (b, <span class="dt">Dr</span>) (c, <span class="dt">Dr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusAssociative a b c <span class="kw">in</span> <span class="dt">Refl</span>
associativeBalance (a, <span class="dt">Cr</span>) (b, <span class="dt">Cr</span>) (c, <span class="dt">Cr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusAssociative a b c <span class="kw">in</span> <span class="dt">Refl</span>
associativeBalance (a, <span class="dt">Dr</span>) (b, <span class="dt">Cr</span>) (c, <span class="dt">Cr</span>) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} a (plus b c))
  <span class="fu">|</span> (<span class="dt">Left</span> l) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} a b)
    <span class="fu">|</span> (<span class="dt">Left</span> x) <span class="fu">=</span> <span class="kw">rewrite</span> minusPlusPlusMinus b c a <span class="kw">in</span> <span class="dt">Refl</span>
    <span class="fu">|</span> (<span class="dt">Right</span> r) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} (a <span class="fu">-</span> b) c)
      <span class="fu">|</span> (<span class="dt">Left</span> x) <span class="fu">=</span> <span class="kw">rewrite</span> minusPlusMinusMinus b c a <span class="kw">in</span> <span class="dt">Refl</span>
      <span class="fu">|</span> (<span class="dt">Right</span> x) <span class="fu">=</span> <span class="ot">?hole_4</span></code></pre></div>
<p>What happens here is that I got caught in a maze of lemmas involving various combinations of plus and minus operations, which unvoidably would end in the need to prove that <code>Dr = Cr</code> which, obviously, would fail or need some magic axiom.</p>
<p>After much struggling with the typechecker and discussion on slack, I realised this proof was problematic because the underlying types were fatally flawed. As brillantly stated by Ohad Kammar:</p>
<blockquote>
<p>Since it’s going to be impossible to get Idris to recognise all false statements automatically, the best we can hope for is that proving false statements is going to get more and more difficult until the programmer gives up</p>
</blockquote>
<p>The types are wrong because I am conflating two concepts: The <em>Balance</em> resulting from aggregating one or more entries for some account(s), and the <em>Amount</em> of each entry, along with a direction (Debit or Credit). Although they both are integral values with a “sign”, they have different meaning in the domain and different behaviour: A <em>Balance</em> can be 0, whereas an entry’s Amount cannot.</p>
<p>Moreover, the structure of the <code>Balance</code> type is also wrong and some form of premature optimisation: Instead of having a proper data type to represent the concept along with the constraints it supports, I am trying to “abuse” existing types.</p>
<h1 id="take-2">Take 2</h1>
<p>So I went for a deep refactoring of my code to cleanly separate the concepts of an <code>Amount</code> and a <code>Balance</code> along with their proper constraints. This was also a good opportunity to start splitting my code in more manageables parts.</p>
<h2 id="amounts">Amounts</h2>
<p>An <code>Amount</code> is basically a non-zero <code>Nat</code>ural integer so let’s embed that property in our type’s constructor:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Amount</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkAmount</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> notZero <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> n } <span class="ot">-&gt;</span> <span class="dt">Amount</span></code></pre></div>
<p>We want our <code>Amount</code> to be straightforward to use so I’ve decided I would like to equip it with a <code>Num</code> implementation:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Num</span> <span class="dt">Amount</span> <span class="kw">where</span>
  (<span class="dt">MkAmount</span> n {notZero<span class="fu">=</span>nz}) <span class="fu">+</span> (<span class="dt">MkAmount</span> k {notZero<span class="fu">=</span>nz&#39;}) <span class="fu">=</span>
    <span class="dt">MkAmount</span> (n <span class="fu">+</span> k) { notZero <span class="fu">=</span> plusRightIsLte nz }

  (<span class="dt">MkAmount</span> n {notZero<span class="fu">=</span>nz}) <span class="fu">*</span> (<span class="dt">MkAmount</span> k {notZero<span class="fu">=</span>nz&#39;}) <span class="fu">=</span>
    <span class="dt">MkAmount</span> (n <span class="fu">*</span> k) { notZero <span class="fu">=</span> lteOneMult nz nz&#39; }

  fromInteger <span class="fu">=</span> fromIntegerAmount</code></pre></div>
<p>Although the actual <em>code</em> for addition and multiplication is trivial and it is <em>obvious</em> that adding and multiplying non-zero integers yields non-zero integers, it was non-trivial (at least for me) to build the needed proofs. The addition case relies on a couple of properties from <a href="https://www.idris-lang.org/docs/current/prelude_doc/docs/Prelude.Nat.html">Nat</a> defined in Idris’ prelude, namely that adding a number to the right of a <code>LTE</code> comparison preserves it, and that <code>LTE</code> is transitive:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">plusRightIsLte</span> <span class="ot">:</span> <span class="dt">LTE</span> j k <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (k <span class="fu">+</span> n)
plusRightIsLte x   {k} <span class="fu">=</span> lteTransitive x (lteAddRight k)</code></pre></div>
<p>The multiplication case is similar except that the standard prelude does not provide a <code>lteMultRight</code> proof so I need to build it myself. This proofs is of course slightly different from the addition case because we need the factor <code>k</code> to be non-zero:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)
lteMultRight <span class="dt">Z</span>               <span class="fu">=</span> <span class="dt">LTEZero</span>
lteMultRight n     {k <span class="fu">=</span> <span class="dt">Z</span>}   <span class="kw">impossible</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> <span class="dt">S</span> k} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (plusRightIsLte <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>This is done by induction on <code>n</code> while prooving the case <code>k = 0</code> is indeed <code>impossible</code>, and here is a detailed step-by-step implementation:</p>
<p>Start with the signature for the <em>proposition</em>. Note that we can already use that signature in our implementation of <code>Num Amount</code>, as an additional hypothesis we’ll need to prove for our implementation to satisfy the typechecker:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)</code></pre></div>
<p>Hitting <code>C-c C-s</code> in Emacs and then case-splitting (with <code>C-c C-c</code> on <code>n</code> gives us the two base cases:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)
lteMultRight <span class="dt">Z</span> <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_1</span>
lteMultRight (<span class="dt">S</span> j) <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_2</span></code></pre></div>
<p>The first case is directly solvable by hitting <code>C-c C-a</code> on the provided hole, while we need to bring in scope the (implicit) <code>k</code> and case-split on it for the second case:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight <span class="dt">Z</span> <span class="fu">=</span> <span class="dt">LTEZero</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> <span class="dt">Z</span>} <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_1</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_3</span></code></pre></div>
<p>The second case is clearly <code>impossible</code> yet the typechecker fails to infer it automatically so we have to fill it by hand. This leaves us with the following hole to fill:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"> `<span class="co">--                                     k : Nat</span>
                                         <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
                                        <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> (fromInteger <span class="dv">1</span>) (<span class="dt">S</span> k)
     <span class="co">------------------------------------------------------------------------------</span>
      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>lteMultRight_rhs_3 <span class="ot">:</span> <span class="dt">LTE</span> (<span class="dt">S</span> j) (<span class="dt">S</span> (plus k (mult j (<span class="dt">S</span> k))))</code></pre></div>
<p>This type looks like something we can recurse over inductively because we know that:</p>
<pre><code>λΠ&gt; :t LTESucc
LTESucc : LTE left right -&gt; LTE (S left) (S right)</code></pre>
<p>So peeling one layer</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="dt">LTESucc</span> <span class="ot">?hole</span></code></pre></div>
<p>and looking for the type of the hole we have</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"> `<span class="co">--                       k : Nat</span>
                           <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
                          <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> (fromInteger <span class="dv">1</span>) (<span class="dt">S</span> k)
     <span class="co">--------------------------------------------------------</span>
      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (plus k (mult j (<span class="dt">S</span> k)))</code></pre></div>
<p>gives us some more information. We can call <code>lteMultRight</code> inductively on <code>j</code> (which is reducing <code>n</code>) and see what’s needed:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="dt">LTESucc</span> (<span class="ot">?hole</span> <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>which gives us the <code>hole</code></p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">  <span class="fu">k</span> <span class="ot">:</span> <span class="dt">Nat</span>
  <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
  <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> (<span class="dt">S</span> k)
<span class="co">--------------------------------------</span>
<span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (mult j (<span class="dt">S</span> k)) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (plus k (mult j (<span class="dt">S</span> k)))</code></pre></div>
<p>We now notice that the type of <code>hole</code> looks like the type of our <code>plusRightIsLte</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">plusRightIsLte</span> <span class="ot">:</span> <span class="dt">LTE</span> j n         <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (n <span class="fu">+</span> k)
<span class="fu">hole</span>           <span class="ot">:</span> <span class="dt">LTE</span> j (j <span class="fu">*</span> <span class="dt">S</span> k) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (k <span class="fu">+</span> (j <span class="fu">*</span> <span class="dt">S</span> k))</code></pre></div>
<p>but with <code>n = j * S k</code> and the order of arguments in the addition on the right reversed. We can pull in the fact that addition is commutative:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (<span class="ot">?hole</span> <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>and now our <code>hole</code> has the right type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (j <span class="fu">*</span> <span class="dt">S</span> k) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j ((j <span class="fu">*</span> <span class="dt">S</span> k)  <span class="fu">+</span> k)</code></pre></div>
<p>which allows us to conclude our proof:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (plusRightIsLte <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>The real process was much more hectic and I needed quite a lot of help from slack’s people!</p>
<h2 id="balance">Balance</h2>
<p>We can now turn our attention to the <code>Balance</code> type and provide an implementation that takes into account the possibility for a balance to be <em>null</em> while preserving the chances to make our <code>Balance</code> type a proper monoid:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Balance</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">Zero</span> <span class="ot">:</span> <span class="dt">Balance</span>
  <span class="dt">Bal</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d <span class="ot">:</span> <span class="dt">Direction</span>) <span class="ot">-&gt;</span> <span class="dt">Balance</span></code></pre></div>
<p>The key insight here is to introduce a special constructor to denote 0 which will remove the need to do “magical” things when 2 <code>Balance</code> gets to compensate each other depending on the ordering of the operands. The definitions for the various algebraic structure our <code>Balance</code> is supposed to implement (semigroup, monoid and group) are simple once we introduce the <code>compensate</code> operation relating <code>Amount</code>s and <code>Direction</code>s to yield a <code>Balance</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">compensate</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d <span class="ot">:</span> <span class="dt">Direction</span>)
          <span class="ot">-&gt;</span> (n&#39; <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d&#39; <span class="ot">:</span> <span class="dt">Direction</span>)
          <span class="ot">-&gt;</span> { <span class="kw">auto</span> notEqDir <span class="ot">:</span> <span class="dt">Not</span> (d <span class="fu">=</span> d&#39;) }
          <span class="ot">-&gt;</span> <span class="dt">Balance</span>
compensate (<span class="dt">MkAmount</span> n) d (<span class="dt">MkAmount</span> n&#39;) d&#39; <span class="kw">with</span> (decEq n n&#39;)
    <span class="fu">|</span> (<span class="dt">Yes</span> prf) <span class="fu">=</span> <span class="dt">Zero</span>
    <span class="fu">|</span> (<span class="dt">No</span> contra) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} n n&#39;)
      <span class="fu">|</span> (<span class="dt">Left</span> l)  <span class="fu">=</span> <span class="dt">Bal</span> (<span class="dt">MkAmount</span> (n&#39; <span class="fu">-</span> n)
                        { notZero <span class="fu">=</span> notEqualMinusGTOne n n&#39; l contra }) d&#39;
      <span class="fu">|</span> (<span class="dt">Right</span> r) <span class="fu">=</span> <span class="dt">Bal</span> (<span class="dt">MkAmount</span> (n <span class="fu">-</span> n&#39;)
                        { notZero <span class="fu">=</span> notEqualMinusGTOne n&#39; n r (notEqReflexive contra) }) d</code></pre></div>
<p>This definition is however made more complex than we’d hoped because: 1. When substracting 2 <code>Nat</code>ural numbers, we need to prove the first number is greater than or equal to the second one, which entails the need to call <code>order</code> here to case-split on the order of the 2 numbers with the relevant proof, 2. We also need to ensure the difference is still greater than or equal to 1 in order to build an <code>Amount</code>.</p>
<p>This is a tribute to the fact our <code>Amount</code> type is “complex”, eg. its constructor is not only a <em>structure</em> to aggregate some other datatypes but also carries with it some <em>proofs</em> which need to be maintained at all time. This will come bite us again later on…</p>
<h2 id="refactoring">Refactoring</h2>
<p>Changing our 2 core types’ definition ripples through our system but without entailing any deep changes in our top-level types. The structure and the properties of our <code>Entry</code>, <code>Transaction</code>, <code>Entries</code> and <code>BookOfAccounts</code> types stay mostly the same except for the fact we don’t use <code>Balance</code> for defining an <code>Entry</code> but separate the <code>Amount</code> and the <code>Direction</code>. We only have to fix the compiler’s errors one at a time and end-up with pretty much the same code than we had before.</p>
<p>The introduction of <code>Amount</code> forces us however to make the numbers explicit in our sample entries. Although <code>Amount</code> is a <code>Num</code>ber and the compiler automatically introduces a conversion <code>fromInteger</code> when we use a literal in place of an <code>Amount</code>, writing</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">valid1</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> <span class="dv">100</span> <span class="dt">Dr</span> <span class="dt">Bank</span>,
                   <span class="dt">MkEntry</span> <span class="dv">100</span> <span class="dt">Cr</span> <span class="dt">Capital</span> ] <span class="fu">=</span> <span class="dt">Zero</span>
valid1 <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>yields the following typechecker error:</p>
<pre><code>             Type mismatch between
                     Zero
             and
                     compensate (fromIntegerAmount 100) Dr (fromIntegerAmount 100) Cr</code></pre>
<p>because the typechecker cannot see “past” <code>fromIntegerAmount</code>. We need to either explicitly call <code>MkAmount</code> or turn on <code>public export</code> visibility on <code>fromIntegerAmount</code> to allow the typechecker to reduce expressions usinge the definition of the function.</p>
<h2 id="evaluation-1">Evaluation</h2>
<p>The situation is definitely better than with our first model: We have a clear separation of two key concepts in our system and have strengthened our understanding of the domain and the relationship between the domain and the code by baking more properties.</p>
<p>Turns out it’s not all bright and shinny, which becomes apparent when we try (again) to prove the <code>Group Balance</code> properties. I won’t go into the tedious details in this already long post but this ended up being a long, interesting but painful journey in the realm of proofs writing. Interested reader is referred to the <a href="https://github.com/abailly/xxi-century-typed/blob/master/idris/src/Accounting/Proofs.idr">Proofs.idr</a> file which contains the current (unfinished) state of the proofs of neutral element, inverse and associativity of <code>Balance</code> with <code>&lt;+&gt;</code> operation.</p>
<p>I gave up trying to prove associativity at some point, when it became clear the proof would be a long and tedious enumeration of all possible cases depending on the respective ordering of the <code>Balance</code>s and the values of their <code>direction</code>. This is caused by the fact the definition of <code>&lt;+&gt;</code> involves a case-split on the <code>direction</code>s and then uses <code>compensate</code> which itself involves 2 case-splitting: on the the equality of the values, and on their relative ordering. The Idris typechecker works by replacing each function call by its definition and trying to reduce the resulting expression to some ground types. This means that when one wants to provide a proof that <code>(a &lt;+&gt; b) &lt;+&gt; c = a &lt;+&gt; (b &lt;+&gt; c)</code>, the applications of <code>&lt;+&gt;</code> are only reduced if the typechecker can follow the various branches in <code>&lt;+&gt;</code> definition to conclude. This can only happen if we provide the relevant proofs which basically means the structure of our proof necessarily follows from various <em>paths</em> leading to a conclusion in our function’s implementation.</p>
<h1 id="conclusion-and-takeaways">Conclusion and Takeaways</h1>
<p>I have not yet undertaken <em>Take 3</em> but it’s pretty clear I am not there yet: The fact the proof for associativity of <code>Balance</code> is still daunting and painful is certainly a sign the involved types are more complex than they should be and need some more refactoring.</p>
<p>There are a couple of other options that would be worth exploring: * The embedding of the <code>notZero</code> proof does not seem like a good idea as it brings more proof obligations in scope at each use of an <code>Amount</code>. A better solution could be to have <code>Amount</code> use directly <code>Nat</code> but consider it to represent it’s successor, and then provide smart constructor and operations to manipulate those numbers while preserving this internal property, * There exists a <a href="https://github.com/idris-lang/Idris-dev/blob/master/libs/contrib/Data/ZZ.idr">ZZ</a> module to represent <em>relative</em> integers. I could either get some inspiration from it or use it directly for <code>Amount</code>s and to hold a <code>Balance</code>, with some encoding to extract the direction (debit or credit) from the sign of the number, * Rather than trying to make <code>Balance</code> into a <code>Monoid</code>/<code>Group</code>, I could define a <code>Vect n Entry</code> to be a <code>Monoid</code> action <em>on</em> a <code>Balance</code>, eg. provide a specialised operation that applies an <code>Entry</code> on a <code>Balance</code> to give another <code>Balance</code>.</p>
<p>I am currently leaning towards exploring a combination of option 2 (use <code>ZZ</code> to contain an <code>Entry</code>’s amount and drop <code>Amount</code>) and option 3 (keep a separate <code>Balance</code> type but only use it in conjuction with <code>Entry</code>) as it seems to be both simpler than the current solution yet still close to the domain.</p>
<p>All in all, this experience has confirmed my initial intuition about Idris and the relevance of dependently-typed languages in providing “better” business domain models, something which I have been convinced of since I discovered Idris thanks to Edwin Brady’s <a href="https://www.manning.com/books/type-driven-development-with-idris">book</a>. Working through some involved (for me) proofs was an eye opener on both how difficult this process can be, and how much insight in one’s design it can provide. Some key takeaways I would like to share are:</p>
<ul>
<li>“Proving” propositions by coding their implementation is really fun, and at the same time immensely frustrating: You see something that’s obvious, and you try to convince the typechecker this is indeed obvious armed with a bunch of functions, types and rewriting rules, and it sometimes does not align and you don’t know why…</li>
<li>Proving negative statements (eg. types of the form <code>foo -&gt; Void</code>) is often, somewhat unsurprisingly, harder and less intuitive than proving positive statements</li>
<li>Thanks to the help provided by various people on slack, I had some <em>Ah-ah</em> moments on the inner workings of the typechecker and gathered some more insights on how to write proofs:</li>
<li>For a function call involved in a proof to be reduced, it needs to which case to chose which implies one need to either provide explicitly pattern-matching on arguments or <code>with</code> clauses (which really act like “local” arguments),</li>
<li>The order of case-splitting on arguments matters and can make a proof more or less complicated,</li>
<li>It’s generally easier to prove general statements and then use that in a specialised way, than the converse,</li>
<li><em>Implicit</em> values are not rewritten by <code>rewrite ... in ...</code> statements, so they need to be provided in some way in the context</li>
<li>As already stated, it’s better to not have <em>implicit</em> proofs be part of one’s types definitions: Only export the type itself and provide smart constructors when needed.</li>
<li>Leveraging the REPL and the interactions it permits is very important as it permits one to isolate the problems to solve, step-by-step, until all is left are simple lemmas or possibly axioms,</li>
<li>Relating domain-level concepts to more abstract mathematical or computer-related concepts can be a source of insights on the domain itself, for example relating a <code>Balance</code> to <code>Monoid</code> or <code>Group</code>. And trying to prove the relevant properties gives more insights on the <em>representation</em> used and whether or not it suits our purpose.</li>
</ul>
<p>This last point in particular is interesting as it provides a way to start a dialog between the <em>domain</em> and the <em>code</em> that is not one-way. We often develop software considering the “business domain” <em>ex abstracto</em>, as if the fact we were designing a <em>software system</em> for that domain was irrelevant. But this is not true, the fact it <em>runs on software</em> changes the domain itself hence it’s perfectly legitimate we can gather insights about the domain from the code implementing it. In the case of <em>accounting</em> this is pretty obvious as we are manipulating numbers and it’s a well-studied domain, but I think most if not all domains would strongly benefit from such dialog, transforming as hodge-podge of ad-hoc rules into something simpler, more regular and probably more efficient.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>It’s interesting to note the original sentence seems to imply capital and equity are one and same thing, which is not true.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Short of cheating using something like <a href="https://www.idris-lang.org/docs/current/prelude_doc/docs/%5Bbuiltins%5D.html#believe_me">believe_me</a> of course that will <em>subvert the typechecker</em>.<a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Homero 2019</title>
    <link href="http://abailly.github.io/posts/homero2019.html" />
    <id>http://abailly.github.io/posts/homero2019.html</id>
    <published>2019-01-02T00:00:00Z</published>
    <updated>2019-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Homero 2019</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January  2, 2019</div>

<p>En écoutant <a href="https://www.franceinter.fr/emissions/les-histoires-du-monde/les-histoires-du-monde-02-janvier-2019">France inter</a> ce matin j’ai eu immédiatement envie de partager cette lecture collective sur twitter de l’Iliade en français. J’ai donc immédiatement tweeté les premiers vers du premier chant de l’Iiliade, avant de me rendre compte que la contrainte exigeait de twitter <em>un chant par semaine</em>. Il est donc devenu urgent d’écrire un programme pour faire en sorte de pouvoir générer ces tweets automatiquement au lieu de devoir laborieusement les taper un par un. Voici le fruit, brut de décoffrage de cette micro-aventure…</p>
<p>Tout d’abord un peu de cérémonies pour que le fichier contenant le code soit interprétable comme un script:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">#!/usr/bin/env stack</span>
<span class="co">-- stack runhaskell --resolver lts-12.5 --</span></code></pre></div>
<p>Puis les inévitables extensions de langage et imports…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE LambdaCase #-}</span>
<span class="kw">import           </span><span class="dt">Control.Applicative</span>
<span class="kw">import           </span><span class="dt">Data.Char</span>
<span class="kw">import qualified</span> <span class="dt">Data.List</span>           <span class="kw">as</span> <span class="dt">List</span>
<span class="kw">import           </span><span class="dt">Data.Monoid</span>
<span class="kw">import           </span><span class="dt">System.Directory</span>
<span class="kw">import           </span><span class="dt">System.Environment</span>
<span class="kw">import           </span><span class="dt">System.IO</span></code></pre></div>
<p>On va avoir envie de générer plus d’un tweet à la fois, et on va donc lire le nombre de tweets à générer en argument de la ligne de commande:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getNumTweets ::</span> <span class="dt">IO</span> <span class="dt">Int</span>
getNumTweets <span class="fu">=</span> getArgs <span class="fu">&gt;&gt;=</span> \<span class="kw">case</span>
  [] <span class="ot">-&gt;</span> pure <span class="dv">1</span>
  (n<span class="fu">:</span>_) <span class="ot">-&gt;</span> pure <span class="fu">$</span> read n</code></pre></div>
<p>Le principe de ce programme, concentré dans la fonction <code>makeTweets</code> est extrêmement simple, on pourrait même dire brutal:</p>
<ul>
<li>On va itérer jusqu’à ce que le nombre de tweets à générer soit de 0:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">makeTweets ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
makeTweets <span class="dv">0</span> _ <span class="fu">=</span> pure ()
makeTweets numTweets content <span class="fu">=</span> <span class="kw">do</span></code></pre></div>
<ul>
<li>On va lire le curseur depuis un fichier intitulé <code>.break</code> dans le répertoire courant, curseur qui stocke notre “état” sous la forme de l’index du premier mot du reste du texte. Si le fichier n’existe pas, on part tout simplement du début</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  start <span class="ot">&lt;-</span> readBreak <span class="fu">&lt;|&gt;</span> pure <span class="dv">0</span></code></pre></div>
<ul>
<li>On va travailler sur la liste des listes de mots du texte en entrée, où un mot est simplement une suite de lettres séparée par des espaces. Comme Haskell est un langage <em>paresseux</em>, cette liste ne va pas être construite explicitement si ce n’est pas nécessaire. Pour fluidifier la lecture on enlève du texte les renvois de notes qui apparaissent sous la forme de nombres</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">let</span> ws <span class="fu">=</span> List.inits <span class="fu">.</span> drop start <span class="fu">.</span> words <span class="fu">.</span> filter (not <span class="fu">.</span> isDigit) <span class="fu">$</span> content</code></pre></div>
<ul>
<li>De cette liste de liste de mots, on va sélectionner la <em>dernière</em> occurence qui:
<ol style="list-style-type: decimal">
<li>à une longueur inférieure à 260 lorsqu’on reconstitue une phrase à partir des mots</li>
<li>se termnine par un signe de ponctuation</li>
</ol></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      sentence <span class="fu">=</span> lastWithPunctuation <span class="fu">$</span> takeWhile ((<span class="fu">&lt;</span> <span class="dv">260</span>) <span class="fu">.</span> length <span class="fu">.</span> unwords) ws</code></pre></div>
<ul>
<li>Il ne reste plus qu’à mettre à jour notre “état” avec la longueur de la liste de mots sélectionnée, puis à imprimer la phrase ornée du hashtag <code>#homero2019</code> sur la sortie standard</li>
<li>La récursion peut se poursuivre en réduisant le nombre de tweets et en conservant le même contenu</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      end <span class="fu">=</span> start <span class="fu">+</span> length sentence
  putStrLn <span class="fu">$</span> unwords sentence <span class="fu">&lt;&gt;</span> <span class="st">&quot; #homero2019&quot;</span>
  writeBreak end
  makeTweets (numTweets <span class="fu">-</span> <span class="dv">1</span>) content</code></pre></div>
<p>La fonction auxiliaire <code>lastWithPunctuation</code> est particulièrement brutale et dangereuse, mais néanmoins amusante:</p>
<ul>
<li>On inverse l’ensemble des listes, soit 3 niveaux de listes imbriquées jusqu’à identifier le dernier caractère de chaque “phrase” candidate</li>
<li>On passe toutes les phrases qui ne se terminent pas par un signe de ponctuation</li>
<li>et on retourne la première occurence qui se termine par un tel signe.</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">lastWithPunctuation ::</span> [[ <span class="dt">String</span> ]] <span class="ot">-&gt;</span> [<span class="dt">String</span>]
lastWithPunctuation <span class="fu">=</span> head <span class="fu">.</span> dropWhile (\ s <span class="ot">-&gt;</span> not <span class="fu">$</span> isPunctuation <span class="fu">$</span> head <span class="fu">$</span> head <span class="fu">$</span> reverse <span class="fu">&lt;$&gt;</span> reverse s) <span class="fu">.</span> reverse</code></pre></div>
<p>Les deux fonctions <code>readBreak</code> et <code>writeBreak</code> servent simplement à mettre à jour le fichier <code>.break</code> contenant l’état du flux de tweets.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">writeBreak ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
writeBreak <span class="fu">=</span> writeFile <span class="st">&quot;.break&quot;</span> <span class="fu">.</span> show

<span class="ot">readBreak ::</span> <span class="dt">IO</span> <span class="dt">Int</span>
readBreak <span class="fu">=</span> <span class="kw">do</span>
  exist <span class="ot">&lt;-</span> doesFileExist <span class="st">&quot;.break&quot;</span>
  <span class="kw">if</span> exist
    <span class="kw">then</span> read <span class="fu">&lt;$&gt;</span> readFile <span class="st">&quot;.break&quot;</span>
    <span class="kw">else</span> pure <span class="dv">0</span></code></pre></div>
<p>Il ne reste plus qu’à écrire le <code>main</code> dont le principal travail est d’appeler <code>makeTweets</code> avec le contenu lu depuis l’entrée standard:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  numTweets <span class="ot">&lt;-</span> getNumTweets
  getContents <span class="fu">&gt;&gt;=</span> makeTweets numTweets</code></pre></div>
<p>En téléchargeant le Chant I depuis le <a href="https://lesbelleslettresblog.com/2015/03/25/homere-iliade-chant-i-en-version-integrale-dans-la-traduction-de-paul-mazon/">site officiel de l’éditeur</a> et en le copiant/collant dans un fichier <code>chant1</code>, on peut lancer le programme <code>tweets.hs</code>:</p>
<pre><code>$ cat chant1 | ./tweets.hs 3
Chante, déesse, la colère d’Achille, le fils de Pélée; détestable colère, qui aux Achéens valut des souffrances sans nombre et jeta en pâture à Hadès tant d’âmes fières de héros, #homero2019
tandis que de ces héros mêmes elle faisait la proie des chiens et de tous les oiseaux du ciel – pour l’achèvement du dessein de Zeus. Pars du jour où une querelle tout d’abord divisa le fils d’Atrée, protecteur de son peuple, et le divin Achille. #homero2019
Qui des dieux les mit donc aux prises en telle querelle et bataille ? Le fils de Létô et de Zeus. C’est lui qui, courroucé contre le roi, fit par toute l’armée grandir un mal cruel, dont les hommes allaient mourant; cela, #homero2019</code></pre>
<p>j’aurais aimé pouvoir utiliser <a href="https://hackage.haskell.org/package/tweet-hs">tweet-hs</a> pour pouvoir effectivement tweeté ces textes mais malheureusement, le processus pour obtenir des clés OAuth sur twitter est long et pénible et je ne sais pas si j’aurais l’énergie nécessaire pour ce faire…</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>XP is the new SCRUM</title>
    <link href="http://abailly.github.io/posts/scrum-and-xp.html" />
    <id>http://abailly.github.io/posts/scrum-and-xp.html</id>
    <published>2019-01-01T00:00:00Z</published>
    <updated>2019-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>XP is the new SCRUM</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January  1, 2019</div>

<p>This is the blurb that introduces <a href="https://www.amazon.fr/SCHWABER-AGILE-SCRUM_p1-United-States/dp/0130676349/ref=sr_1_2?ie=UTF8&amp;qid=1546375554&amp;sr=8-2&amp;keywords=ken+schwaber">Agile Software Development with SCRUM</a>, the seminal book by Ken Schwaber and Mike Beedle that explained Scrum, or rather <em>SCRUM</em> as it should be correctly spelled, to a wide audience.</p>
<blockquote>
<p>eXtreme Programming is an ideal many software shops would love to reach, but with the constant pressures to produce software quickly, they cannot actually implement it. The Agile software process allows a company to implement eXtreme Programming quickly and immediately-and to begin producing software incrementally in as little as 30 days! Implementing eXtreme Programming is easier said than done. The process can be time consuming and actually slow down current software projects that are in process. This book shows readers how to use SCRUM, an Agile software development process, to quickly and seamlessly implement XP in their shop-while still producing actual software. Using SCRUM and the Agile process can virtually eliminate all downtime during an XP implementation.</p>
</blockquote>
<p>This message in a bottle from a not-so-distant past - the book was published in 2001 - is interesting in at least 2 respects:</p>
<ul>
<li>Its first statement is still valid, eighteen years later: XP is still an “ideal many software shops would love to reach” but find unattainable because of various forms of pressure,</li>
<li>SCRUM was explicitly advocated as a <em>process</em> to “quickly and seamlessly implement XP”, a promise it mostly failed to deliver or that was lost in the fury of <em>agile transformations</em> that arose in the wake of SCRUM takeovers of the software development methods scene.</li>
</ul>
<p>Will 2019 be the year we’ll finally see XP being recognised?</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Phénoménologie de la perception&quot;</title>
    <link href="http://abailly.github.io/posts/pheno-perception.html" />
    <id>http://abailly.github.io/posts/pheno-perception.html</id>
    <published>2018-11-20T00:00:00Z</published>
    <updated>2018-11-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Phénoménologie de la perception&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 20, 2018</div>

<h2 id="sur-lempirisme">Sur l’empirisme</h2>
<p>“On ne peut pas réfuter une pensée qui s’ignore elle même.” L’empirisme ignore l’expérience, soit la rencontre entre un <em>sujet</em> et le <em>monde</em>. Les constructions théoriques seront toujours plus <em>réels</em> car plus “dures”, plus précises que ce dont l’expérience peut rendre compte. L’objectivation est irréfutable car elle supprime la conscience du sujet ou bien plutôt sa relation au monde, et réciproquement la relation que le monde entretient avec le sujet, l’inclusion de celui-ci dans celui-là. L’inévitable conséquence en est le dualisme.</p>
<h2 id="sur-lintellectualisme">Sur l’intellectualisme</h2>
<p>La réflexion manque de se réfléchir elle même et rend implicite l’existence du <em>sujet connaissant</em> et la possibilité théorique de <em>tout connaître</em>. Elle manque ainsi le <em>phénomène de la pensée</em> elle même dans son analyse des conditions de possibilité de la connaissance. “Que puis-je connaître ?” présuppose qu’il y a quelque chose à connaître par un sujet connaissant, mais ignore complètement la situation concrète de ce sujet. Toute réflexion est absolue, détachée du corps, de l’espace et du temps, détachée des autres.</p>
<h2 id="primat-de-la-vision">Primat de la vision</h2>
<p>L’objet est saisi en tant qu’objet parce qu’il s’inscrit sur un <em>horizon</em> et qu’avec moi d’autres objets le “regardent”. Je peux saisir l’objet dans sa profondeur grâce aux autres objets, en construisant les relations qu’ils entretiennent les uns avec les autres, en me mettant à leur place, adoptant un point de vue multiple.</p>
<h2 id="relation-du-corps-au-monde">Relation du corps au monde</h2>
<p>Le corps n’est pas <em>dans</em> l’espace et le temps, il les <em>habite</em> et il leur donne forme. C’est parce que nous avons un corps qu’il y a un espace-temps à explorer pour nous. L’étude des conséquences de lésions nerveuses et maladies dégéneratives montre - par contraste - qu’en l’état dit “normal” nous n’avons pas <em>connaissance</em> du monde, nous n’avons pas à l’objectifier pour agir et se mouvoir : le monde est ce qui est là pour nous, à notre portée. Quand je bouge mon bras pour prendre un objet je ne planifie pas mon acte avant de l’accomplir, ce que doit faire un malade. Le corps est porteur de sens, ou plutôt il est le moyen pour nous de signifier, de donner sens aux choses du monde en nous mettant en relation avec elles.</p>
<h2 id="le-corps-comme-oeuvre-dart">Le corps comme oeuvre d’art</h2>
<p>Comme le corps, l’oeuvre d’art est individualité, à la fois expression et exprimé. Les sens sont fondamentalement unis dans l’appréhension du corps. Je ne suis pas <em>dans</em> mon corps, je <em>suis</em> mon corps.</p>
<h2 id="mimer-un-état-pour-le-faire-advenir">Mimer un état pour le faire advenir</h2>
<p>Quand je veux m’endormir, je <em>mime</em> l’état du sommeil, calme et paisible, et c’est mon corps qui répond à cette imitation en s’endormant “réellement”. Similairement la croyance est la conséquence de la pratique religieuse et non sa cause : je crois parce que j’accomplis régulièrement des rituels prescrits.</p>
<h2 id="impossibilité-de-lexistence-pure">Impossibilité de l’existence pure</h2>
<p>Parce que j’ai un corps sensible, je suis ouvert au monde et il est impossible de supprimer toute <em>intention</em>. Vivre n’est pas seulement exister mais aussi percevoir, répondre à la proposition du corps d’entrer en relation avec le monde, en quelque sorte de le créer. Cela invalide toute possibilité d’une méditation pure.</p>
<h2 id="sur-la-parole">Sur la parole</h2>
<p>L’empirisme conçoit le langage comme suite de traces, d’images verbales, déclenchées par des stimuli sonores ou visuels. L’intellectualisme le conçoit comme manifestation de la pensée. “Dans la première conception, il n’y a personne qui parle, dans la seconde il y a un sujet mais un sujet <em>pensant</em>.” Le mot seul, isolé, en lui-même n’a pas de sens, mais les mots prononcés <em>ont un sens</em> : la pensée tend vers son expression verbale et reste confuse, ignorante d’elle-même tant qu’elle n’est pas formulée dans des mots. <em>Nommer</em> fait exister les choses pour nous.</p>
<h2 id="perception-et-corps-propre">Perception et corps propre</h2>
<p>La continuité du monde et de ma perception de celui-ci est une conséquence de de l’identité du corps propre au cours du mouvement : je perçois continûment parce que je <em>suis</em> continûment au travers de mon corps : je n’ai pas besoin de voir explicitement l’arrière d’un cube pour le poser, mon corps me permettrait de tourner autour et de de faire l’expérience du géometral du cube qui découle donc de cette identité.</p>
<h2 id="langage-et-monde-conventionnel">Langage et monde conventionnel</h2>
<p>Comme le geste nous relie au monde physique et nous permet de communiquer à propos de lui, de le partager avec d’autres, la parole nous relie au monde <em>social</em> et conventionnel, symbolique, nous permet de le partager avec d’autres au moyen de gestes linguistiques. Le signe, la parole, le langage ne sont pas arbitraires au sens de “Construits ex nihilo”, ils <em>doivent</em> être ce qu’ils sont en vertu de leur histoire, de contraintes physiques, d’influences, pour permettre de communiquer dans un certain cercle.</p>
<h2 id="unité-de-la-perception">Unité de la perception</h2>
<p>Lorsque nous percevons le monde autour de nous, nos sens sont utilisés simultanément et communiquent les uns avec les autres. Ce n’est que lorsque nous nous concentrons sur telle ou telle partie, lorsque nous analysons tel objet que ceux-ci acquièrent certaines qualités propres à tel ou tel sens. Les sons ont une résonnance visuelle ou tactile, les images et couleurs suscitent des émotions et sensations corporelles.</p>
<h2 id="unité-perceptive-de-la-chose">Unité perceptive de la chose</h2>
<p>“un tableau contient enn lui-même jusqu’à l’odeur du paysage” c’est à dire que toute perception d’une chose est association, les qualités sonores, visuelles, olfactives, tactiles accompagnent la vision, le toucher ou l’ouïe. L’acuité de l’expérience fait l’acuité des sens. Donc voir une chose est le signe de toute ses qualités : voir du feu nous “donne” sa chaleur, son crépitement…</p>
<h2 id="le-sens-est-chargé-de-prédicats-anthropologiques">Le sens est chargé de prédicats anthropologiques</h2>
<p>Parce que les choses existent pour nous, au travers de notre expérience, celle-ci et notre manière de la décrire, donc notre langage, sont chargés de notre situation dans le monde, des contraintes et caractéristiques de notre corps. C’est exactement ce que décrivent Lakoff et Johnson dans leur analyses des métaphores dont notre langage est saturé : c’est parce que nous existons et vivons que ces métaphores sont universellement présentes.</p>
<h2 id="contiuité-et-inépuisabilité-du-monde">Contiuité et inépuisabilité du monde</h2>
<p>Je n’ai pas une succession discontinue de points de vues, de perspectives, quand je perçois mais une interaction continue avec les choses et les paysages. Je ne pense pas chaque image mais chaque instant glisse dans l’autre. Modéliser la perception comme un processus discret, une succession d’images ou de sensations est incorrect. L’effort et la concentration produisent des jugements d’identités d’une chose, d’une succession de ses états, parce que prélevés sur un fond continu.</p>
<p>Le monde n’est pas la somme des choses mais ce dont les choses proviennent, un “réservoir infini de choses”.</p>
<h2 id="hallucinations-perceptions-et-rêves">Hallucinations, perceptions et rêves</h2>
<p>La perception est très différente de l’hallucination car le monde y est tout entier engagé et les malades qui souffrent de visions sont parfaitement capables de faire la différence entre celles-ci et des objets réels. L’hallucination est entièrement projection de l’esprit, et pourtant elle <em>impressionne</em>, elle produit un effet sur le malade quand bien même celui-ci sait qu’elle n’est pas réelle. Et quid du rêve dont je ne peux faire la différence d’avec une perception <em>quand je le vis</em> ?</p>
<p>C’est parce que le rêve, comme l’hallucination et comme la perception se déroule avant toute opération intellectuelle, dans cette relation au monde réel qui nous implique tout entier et qui est notre corps, avant tout jugement prédicatif.</p>
<blockquote>
<p>Le perçu, le rêvé, l’halluciné demeure en deça du doute et de la démonstration</p>
</blockquote>
<p>Il n’y a pas d’erreur possible là où il n’y a pas de vérité possible : le perçu <strong>est</strong> pour nous avant toute pensée.</p>
<h2 id="temporalité">Temporalité</h2>
<p>Quand je pense, je réfléchis sur moi, mes pensées passées, je suis déjà dans le futur et je ne peux qu’utiliser des souvenirs, des témoignages incertains. Dans toute réflexion s’insère le temps, dont l’épaisseur introduit du doute et de l’ambiguïté.</p>
<h2 id="sur-la-possibilité-et-le-sens-du-cogito">Sur la possibilité et le sens du cogito</h2>
<p>Je ne peux pas objectiver mes pensées : chaque pensée, le fait même de penser est un processus dont je ne peux vraiment garder la trace entièrement que dans la mémoire qui est elle même un processus. Réfléchir c’est donc toujours reprendre la pensés, la réactualiser à partir de bribes de souvenirs et d’autres pensées qui deviennent les objets du processus mais sont soumis à la même loi. La pensée n’est donc pas <em>Essence</em> mais <em>Existence</em> et le <em>Je suis</em> du cogito doit être entendu comme un <em>J’existe</em>. Mais il n’y a pas de relation de cause à conséquence entre les deux termes : ce n’est pas la pensée qui fait l’existence, ni l’existence qui fait la pensée.</p>
<h2 id="vrai-et-faux-sentiment">Vrai et faux sentiment</h2>
<p>Ce qui distingue le sentiment vrai du sentiment faux ou ambigu, de la fausse conscience c’est <em>l’action</em>. Le sentiment vrai est vrai parce que mon existence y est toute entière engagée, parce que je fais vivre ce sentiment dans mes actes. Être amoureux c’est agir avec amour envers l’être aimé, c’est vivre le sentiment de l’amour dans chaque moment de l’existence, être courageux c’est vivre avec courage et affronter le danger.</p>
<p>Quand je m’engage dans le doute je fais cesser tout doute méta, toute régression à l’infini sur le doute de la réalité de ce que je ressens.</p>
<h2 id="sujet-objet-présence">Sujet + objet = présence</h2>
<p>Les choses n’ont un sens pour nous que parce que nous sommes dans une relation de présence à elles. Le sens suppose une position, une polarité donc un sujet qui crée les faits, les choses, le temps les phénomènes dans un certain sens. Le corps objectif, le monde objectif de la science n’est pas la vérité du corps phénoménal ou du monde phénoménal mais en est une image appauvrie, une représentation.</p>
<h2 id="la-liberté-comme-être-au-monde">La liberté comme <em>être au monde</em></h2>
<p>La liberté n’est pas l’infini des choix qu’une conscience isolée ferait, pure subjectivité, ou illusion totale déterminée par le monde. “Nous choisissons le monde comme lui nous choisit” il n’y a pas de liberté absolue car j’agis toujours en fonction d’une situation que m’offre le monde, mais il n’y a jamais absence de liberté car j’existe au mondne et agit sur lui.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
