<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2017-04-17T00:00:00Z</updated>
    <entry>
    <title>Weekly Review - Week 15</title>
    <link href="http://abailly.github.io/posts/weekly-review-15.html" />
    <id>http://abailly.github.io/posts/weekly-review-15.html</id>
    <published>2017-04-17T00:00:00Z</published>
    <updated>2017-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 15</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April 17, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="monday">2017-04-10 Monday</h1>
<dl>
<dt><a href="https://github.com/qmuli/qmuli/">qmuli/qmuli: Qmuli - Serverless framework for Haskell</a></dt>
<dd><p>While preparing my talk about configuration management with Haskell, I went back to this fascinating idea: Execute Haskell code over AWS Lambda.</p>
</dd>
</dl>
<h1 id="tuesday">2017-04-11 Tuesday</h1>
<dl>
<dt><a href="https://projecteuler.net/problem%3D1">Problem 1 - Project Euler</a></dt>
<dd><p>Thinking about building something like <em>Project Euler</em> but dedicated to philosophical questions…</p>
</dd>
</dl>
<h1 id="wednesday">2017-04-12 Wednesday</h1>
<dl>
<dt><a href="https://gist.github.com/masaedw/1571296">run emacs.app or emacsclient on Mac OS X</a></dt>
<dd><p>Still working on getting a decent emacsclient-based setup on Mac</p>
</dd>
<dt><a href="http://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within">Getting the source directory of a Bash script from within - Stack Overflow</a></dt>
<dd><p>Surprisingly not straightforward esp. if one wants to take care of all corner cases</p>
</dd>
<dt><a href="http://modesofexistence.org/crossings/#/fr/tec-ref">AIME - {TEC·REF}</a></dt>
<dd><p>Back to <a href="/posts/eme.html">AIME project</a> while working on my talk for newCrafts. Most of the links below are residuals from a trail of surfing the web starting from trying to better understand the TEC/REF crossing and following references from there</p>
</dd>
<dt><a href="http://www.artspace.com/magazine/interviews_features/the_big_idea/a-guide-to-object-oriented-ontology-art-53690">What Is Object-Oriented Ontology? A Quick-and-Dirty Guide to the Philosophical Movement Sweeping the Art World | Art for Sale | Artspace</a></dt>
<dd><p>It seems there exists something called <em>Object-Oriented Ontology</em> or <em>OOO</em> for short which is quite an earth-shaking news to learn for a former OO programmer slowly shifting towards FP. Maybe there is some reverse movement going on in the field of metaphysics and speculative philosophy where people coming from a purely logical framework (aka. classical logic, logical positivism, intuitionism…) would move towards an <em>object-oriented</em> approach. Seems mostly relevant and very active in the aesthetics.</p>
</dd>
</dl>
<ul>
<li><a href="http://conversations.e-flux.com/t/the-uses-and-abuses-of-object-oriented-ontology-and-speculative-realism/2105">The uses and abuses of object-oriented ontology and speculative realism - Frontpage - e-flux conversations</a></li>
<li><a href="https://avoidingthevoid.wordpress.com/dictionary-of-concepts-for-graham-harmans-object-oriented-philosophy-draft-work-in-progress/">Dictionary of concepts for Graham Harman’s object-oriented philosophy {draft: work in progress} | Avoiding/the</a></li>
<li><a href="http://www.thedewlab.com/blog/2012/07/12/introduction-to-object-oriented-ontology/">Introduction to Object Oriented Ontology | The DEW Lab</a></li>
<li><a href="https://doctorzamalek2.wordpress.com/2010/07/23/brief-srooo-tutorial/">brief SR/OOO tutorial | Object-Oriented Philosophy</a></li>
<li><a href="http://www.shaviro.com/Blog/?p%3D995">Processes and Powers – The Pinocchio Theory</a></li>
</ul>
<dl>
<dt><a href="http://www.shaviro.com/Othertexts/Things.pdf">Things.pdf</a></dt>
<dd><p>This one I read in more details, the author being somewhat supportive of OOO but apparently with some peculiar twists:</p>
</dd>
</dl>
<ul>
<li>objects have an existence of their own which is incommensurable to us</li>
<li>we go into a state of terror when we realise this as exemplified by the mechanic from the introductory short story whose tools come alive and flesh-like</li>
<li>following Heidgger, Shaviro posits that objects, things, tools are withdrawn from mere presence, they “cannot be reduced to its presence-at-hand - that is to say to the sum of its delineable properties” =&gt; contra correlation of things and human mind</li>
<li>but this dissolution, this alienness has a dual movement which manifests itself especially with <em>broken tools</em>: things become more-than-present, they spring to life <em>against</em> us, in their singularity</li>
<li>we don’t use tools, we <em>ally</em> with them to reach our goals</li>
<li>things proposition me (Whitehead): They are not only a mere packet of sense-data</li>
<li>things have a relation between themselves which is <em>aesthetical</em>: feeling an object for its own sake</li>
<li>linked to romanticism and <em>wholeness</em> (??), the world as a “single gigantic system of references”</li>
<li>democracy of fellow creatures</li>
<li>anthropomorphism goes against anthropocentrism =&gt; imbues things with feelings, “thoughts” and desires</li>
<li>vitalism and panpsychism =&gt; Gaia ?</li>
</ul>
<dl>
<dt><a href="http://sitr.us/2014/05/05/category-theory-proofs-in-idris.html">Category Theory proofs in Idris - sitr.us</a></dt>
<dd><p>Using Idris to institute a Categorical framework and make proofs with it</p>
</dd>
<dt><a href="http://www.di.fc.ul.pt/~bessani/publications/dsn14-bftsmart.pdf">dsn14-bftsmart.pdf</a></dt>
<dd><p>Byzantine fault-tolerant distributed consensus is the algorithmic problem at the heart of blockchains. This article claims to reach tens of thousands of TPS with its implementation of BFT consensus in Java. There quite a few companies like <a href="https://symbiont.io/technology/introducing-symbiont-assembly/#the-api">Symbiont.io</a> building upon this technology to provide so-called “smart contracts” capabilities.</p>
</dd>
<dt><a href="https://qz.com/950973/remote-work-for-programmers-the-ultimate-office-perk-is-avoiding-the-office-entirely/">Remote work: For programmers, the ultimate office perk is avoiding the office entirely — Quartz</a></dt>
<dd><p>Another nail in the coffin of office work?</p>
</dd>
<dt><a href="http://www.drmaciver.com/2015/10/the-economics-of-software-correctness/">The economics of software correctness | David R. MacIver</a> and <a href="https://www.jwz.org/doc/worse-is-better.html">The Rise of ``Worse is Better’’</a></dt>
<dd><p>Those two articles go hand in hand…</p>
</dd>
</dl>
<h1 id="thursday">2017-04-13 Thursday</h1>
<dl>
<dt><a href="http://zilsel.hypotheses.org/2103#more-2103">Le réalisme kitsch | Zilsel</a></dt>
<dd><p>Une critique du <em>nouveau réalisme</em> dont le <em>réalisme spéculatif</em> qui a parti lié avec l’Ontologie Orientée-Objet dont je parle plus haut. Ainsi que de Latour, Meillassoux, Garcia et autres philosophes post-post-modernes.</p>
</dd>
<dt><a href="https://developer.android.com/studio/command-line/sdkmanager.html">sdkmanager | Android Studio</a></dt>
<dd><p>On a more practical matter, I paired with Bernard on setting up an environment for mobile apps development based on <a href="http://cordova.apache.org">Cordova</a>. Setting this up is less straightforward than one would like and requires things like installing the <a href="https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager">Intel® Hardware Accelerated Execution Manager (Intel® HAXM)</a>…</p>
</dd>
<dt><a href="https://forge.ocamlcore.org/scm/viewvc.php/trunk/calendarFAQ-2.6.txt?view%3Dmarkup&amp;root%3Dcalendar">OCaml Calendar FAQ</a></dt>
<dd><p>Working on a follow-up to my first post <a href="/posts/dependent-types-ddd.html">mixing DDD and Type DD</a>, I started shaving some yak: Implement a (naive) dependently-typed date module in Idris. I got a gentle reminder in this <a href="http://stackoverflow.com/questions/43352519/how-to-properly-handle-fin-n-and-integer-when-computing-dates">SO question</a> that handling dates correctly is extremely challenging, as this detailed post on dates handling from an OCaml library exposes.</p>
</dd>
<dt><a href="https://labs.spotify.com/2017/03/31/spotifys-lovehate-relationship-with-dns/">Spotify’s Love/Hate Relationship with DNS</a></dt>
<dd><p>How Spotify leverages DNS in its microservices architecture</p>
</dd>
</dl>
<h1 id="friday">2017-04-14 Friday</h1>
<dl>
<dt><a href="https://naughtthought.wordpress.com/2011/08/17/the-twilight-of-becoming-and-process/">The Twilight of Becoming (and Process) | Naught Thought</a></dt>
<dd><p>Another post related to my exploration of OOO.</p>
</dd>
</dl>
<h1 id="saturday">2017-04-15 Saturday</h1>
<dl>
<dt><a href="http://the-programmers-stone.com/about/implications-for-software-engineers/">The Programmers’ Stone » Implications for Software Engineers</a></dt>
<dd><p>I don’t know how I stumbled on this blog which seems to be an online version of a book. Some more comments on <a href="http://wiki.c2.com/?ProgrammersStone">C2 wiki</a>… Looks like yet another instance of “developers are special” and “there are 10x programmers” myths, resting on some midly interesting research results from neurosciences related to <a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow">Kahneman’s</a> work on behavioural economics.</p>
</dd>
<dt><a href="http://www.wackids.com/">the wackids</a></dt>
<dd><p>And now for something different: A rock band playing rock classics on toy instruments!</p>
</dd>
<dt><a href="http://abailly.github.io/posts/kant2.html">Arnaud Bailly - Sur “Critique de la raison pure” (2)</a></dt>
<dd><p>Published notes from last year’s reading of Kant’s CRP</p>
</dd>
</dl>
<h1 id="sunday">2017-04-16 Sunday</h1>
<dl>
<dt><a href="https://aphyr.com/posts/341-hexing-the-technical-interview">Hexing the technical interview</a> and <a href="https://aphyr.com/posts/342-typing-the-technical-interview">Typing the technical interview</a></dt>
<dd><p>Two fantastic posts from Kyle Kingsbury of Jepsen fame, demonstrating the breadth and depth of his knowledge of computer systems, from writing bytecode in clojure to type-level programming in Haskell</p>
</dd>
<dt><a href="https://halshs.archives-ouvertes.fr/halshs-00695545/document">Régler sa vie more geometrico: Spinoza</a></dt>
<dd><p>Comment s’inspirer de l’Éthique ?</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Critique de la raison pure&quot; (2)</title>
    <link href="http://abailly.github.io/posts/kant2.html" />
    <id>http://abailly.github.io/posts/kant2.html</id>
    <published>2017-04-15T00:00:00Z</published>
    <updated>2017-04-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Critique de la raison pure&quot; (2)</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April 15, 2017</div>

<p>Quelques notes supplémentaires sur Kant, la <a href="https://fr.wikipedia.org/wiki/Critique_de_la_raison_pure">Critique de la raison pure</a> et les <a href="https://fr.wikipedia.org/wiki/Fondation_de_la_m%C3%A9taphysique_des_m%C5%93urs">Fondements de la métaphysique des moeurs</a>. Ce billet fait suite à <a href="/posts/kant.html">d’autres notes</a> prises lors d’une session d’AOF 2016.</p>
<h1 id="fin-de-la-critique-de-la-raison-pure">Fin de la Critique de la Raison Pure</h1>
<ul>
<li>Les idées <em>absolues</em> agissent comme régulateurs de la raison, mais quant elles sont entendues commes principes consitutifs elles produisent des <em>antinomies</em>, génère des débats entre des alternatives qui ne peuvent se résoudre car elles sont soit toutes deux fausses, soit toutes deux vraies: aucune expérience et partant aucune déduction de l’entendement ne peut permettre de décider
<ul>
<li>dans l’ordre du monde la série des causes n’est ni finie ni infinie, mais <em>indéfinie</em> : étant <em>dans</em> le monde, on ne peut que poursuivre l’enquête, chercher à comprendre et remonter les chaînes de causalité sans jamains espérer atteindre une réponse définitive qui ne pourrait se trouver que <em>hors du monde</em></li>
<li>dans l’ordre du sujet, la raison permet d’assurer l’unité du sujet en absolutisant toutes ses expériences et pensées dans une <em>substance unique et simple</em>, mais il n’est pas possible d’en faire une expérience directe. La raison pure est condition d’affirmation du sujet par le <em>je pense</em> mais ne peut fonder son existence,</li>
<li>De même pour l’idée de Dieu, produite par la raison comme un principe régulateur de l’unité de l’expérience du monde, d’une synthèse globale du réelle : penser un grand architecte permet d’offrir un fondement défini à la série des causalités</li>
</ul></li>
<li>la raison est <em>paresseuse</em> quand elle croit en ses principes comme étant constitutifs d’une chose réelle: en se contentant d’un explication absolue, elle s’arrête de faire son travail qui est de chercher à comprendre. La compréhension n’est plus alors fondée sur l’entendement mais sur le <em>dogme</em></li>
<li>Il n’y a pas de fondement expérimental possible aux <em>idées</em> de la raison pure, ces idées ne servent que de “point de fuite” pour les raisonnements de l’entendement qui eux nécessitent un contenu empirique. C’est donc une erreur de prétendre <em>connaître</em> Dieu, l’immortalité de l’âme ou l’infini du réel</li>
<li>Il est légitime de postuler une cause unique comme un outil pour nous aider à comprendre le divers du réel, comme une hypothèse scientifique, mais elle ne doit jamais nous empêcher de chercher à prolonger notre compréhension de la chaîne des conditions. Pour la connaissance, la volonté de Dieu ou l’ordonnancement de la Nature sont équivalents</li>
<li>Il y a un <em>usage pratique</em>, c’est-à-dire aux fins de jugement, de la raison pure: parce qu’elle nous porte naturellement à penser à <em>l’immortalité de l’âme</em> (existence d’une substance simple) et à <em>l’existence de Dieu</em> (existence d’un être parfait à l’origine de toute chose) elle nous rend moraux. Autrement dit, c’est parce que l’homme a un sens moral qu’il croît en Dieu.</li>
</ul>
<h1 id="fondement-de-la-métaphysique-des-moeurs">Fondement de la métaphysique des moeurs</h1>
<ul>
<li>La morale est fondée sur des impératifs, des <em>devoirs</em> qui s’imposent à moi, qui donnent une direction à mon intention quels que soient les résultats effectifs de mes actes. La morale en acte est la <em>volonté bonne</em></li>
<li>Une morale universelle doit valoir pour tous les êtres de raison, ce qui implique qu’elle ne puisse être fondée sur une expérience particulière, même élargie à l’espèce humaine, mais doit être trouvée dans la raison elle même</li>
<li>L’expérience et la raison empirique ne sont sources que <em>d’impératifs hypothétiques</em> limités dans le temps, l’espace. Tout impératif moral de ce genre peut se voir opposer d’autres impératifs hypothétiques et les lois morales ne sont alors que relatives</li>
<li>Le devoir authentique provient d’impératifs catégoriques, applicables en tous temps et tous lieux</li>
<li>Un impératif lie des moyens à des fins, il définit quelles sont les fins qui doivent être tandis que la raison pure définit les fins qui peuvent être</li>
<li>La seule fin qui ne soit pas ancrée dans une expérience particulière est l’être de raison même, la personne: la seule fin qui soit commune à tous les êtres est l’existence (c’est le conatus spinoziste déguisé…)</li>
<li>De même qu’il n’y a qu’une seule fin universelle, il n’y a qu’un seul impératif catégorique qui se décline en trois formulations:
<ul>
<li>“Agit de telle sorte que toute personne ne soit pas considérée uniquement comme un moyen mais aussi comme une fin”</li>
<li>“Agit de manière à ce que ta maxime ait valeur universelle”</li>
<li>“Agit comme un législateur universel”</li>
</ul></li>
<li>La morale issue de l’impératif catégorique est une morale de l’autonomie: je suis moral parce que je suis un être rationnel et la loi morale que je m’impose, s’impose à tous les êtres de raison universellement. Je suis le législateur et le censeur de moi même</li>
<li>A contrario, toute autre morale produit de l’hétéronomie: ce sont des règles extérieures, contingentes, qui s’imposent à moi de manière arbitraire. Si j’agit moralement parce que j’applique les commandements d’un texte, quel qu’il soit, je suis “agi” (je ne suis pas actif, mais passif eut dit Spinoza: je ne suis pas guidé par ma raison mais par des émotions et des actes extérieurs)</li>
<li>C’est parce que nous sommes libres, ou plus précisément parce que nous avons l’idée de la liberté, que nous somme moraux en tant qu’entités autonomes. Mais c’est parce que nous sommes à même de nous donner des lois, donc parce que nous sommes moraux, que nous sommes libres: il y a une apparente circularité</li>
<li>Ce qui fait disparaître la circularité c’est que l’on parle de deux points de vues différents:
<ul>
<li>D’un point de vue du monde sensible, phénoménal, nous sommes soumis aux lois de la nature et aux impératifs moraux. C’est le domaine de l’intuition (sensible, appréhension du réel au travers des sens et des catégories de l’espace et du temps) et de l’intellect, et celui de l’hétéronomie,</li>
<li>Mais du point de vue du monde intelligible, de la raison pure, nous sommes à même de produire des idées inconditionnées, donc nous sommes libres et autonomes.</li>
</ul></li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Pour une  thérapeutique du code</title>
    <link href="http://abailly.github.io/posts/therapeutique-du-code.html" />
    <id>http://abailly.github.io/posts/therapeutique-du-code.html</id>
    <published>2017-04-14T00:00:00Z</published>
    <updated>2017-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Pour une  thérapeutique du code</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April 14, 2017</div>

<p>Cela fait désormais de nombreuses années que j’écris du code qui a vocation à se retrouver dans des logiciels, eux-mêmes ayant vocation à répondre à des fonctions diverses et variées. Dans ma relation au code, je fait régulièrement l’expérience d’une véritable difficulté physique, d’une douleur : je suis en train de travailler sur un programme, un algorithme, un bout de truc pour déployer une application ; le temps passe et cela ne fonctionne pas correctement, je m’obstine et c’est comme si je poussais un rocher de plus en plus lourd ; la lucidité s’émousse, la clairvoyance sur les moyens et les fins s’embrume par l’accumulation de détails apparemment absurdes et un dédale de pages <em>web</em> prodiguant des solutions à tel problème qui font naître d’autres problèmes de plus en plus éloignés du but recherché<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> ; et dans mon cas se manifeste une douleur physique là, entre les omoplates, une tension musculaire dépassant le seuil de l’inconfort pour se transformer en brûlure, et c’est comme si j’avais dû traîner une lourde charge sur plusieurs centaines de mètres, un rocher de Sysiphe en miniature.</p>
<p>Cette sensation récurrente combinée à mon expérience du travail de développeur dans des organisations aussi diverses que des banques, des startups, des éditeurs de logiciels petits et gros ma fait prendre conscience de la nécessité et de la pertinence d’adopter une approche <em>thérapeutique</em> du code, d’où est née l’idée de créer <a href="http://drcode.io">Dr.Code</a>. Mais qu’est ce que ça veut dire une «approche thérapeutique» du code ? Voila ce que je voudrais expliciter ici…</p>
<p>Par <em>code</em> j’entends ici l’ensemble des artefacts qui constituent un logiciel ou un système logiciel : non seulement le code source de l’application mais aussi ses scripts, l’infrastructure de déploiement, le <em>build</em>, les outils de développement, bref les éléments, objets et systèmes techniques qui sont la matière, l’environnement autant que le fruit du travail des développeurs<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. Ces «êtres de la technique», pour reprendre les mots de <a href="/posts/eme.html">Bruno Latour</a>, ont une existence propre, un <em>mode d’existence</em> spécifique, pour reprendre, là encore non seulement Latour, mais aussi toute une tradition souterraine et néanmoins vivace de la philosophie contemporaine qui, depuis au moins <a href="/posts/objets-techniques.html">Simondon</a>, cherche à comprendre le concept de technique et l’importance croissante qu’il a pris dans nos vies<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>.</p>
<p>Que le code me résiste est pour moi caractéristique : cette chose existe en dehors de moi, au point de pouvoir me faire mal, engendrer de la douleur mais aussi du plaisir. Et comme l’explique fort bien <a href="http://modesofexistence.org/crossings//#/fr/tec-ref">Latour</a>, il ne s’agit pas ici d’un déficit de connaissance ou de compétence mais bien d’une question d’ingéniosité, d’un tour de main, d’astuce ou de <em>metis</em> pour reprendre le beau mot grec. Le code est cet être technique qui demande de celui qui entre en relation avec lui de la metis, soit un mélange de sagesse, d’expérience, de connaissances, d’astuce - de rouerie aussi - qui permet de <em>trouver le bon angle</em> d’attaque, la meilleure approche, le <em>bon algo</em> ou la <em>bonne lib</em>…</p>
<blockquote>
<p>Par un autre détournement, les couches successives d’un programme, d’un compilateur, d’une puce, d’un radar parviennent à se compliquer et à s’aligner au point de remplacer le solide attelage qui attachait jusqu’ici les wagons d’un métro automatique pour finir par un « attelage immatériel » entièrement calculé.</p>
<p>B.Latour, <a href="http://modesofexistence.org/crossings//#/fr/tec-ref">Enquête sur les modes d’existence</a></p>
</blockquote>
<p>Quand je travaille le bois, ce qui m’arrive de temps à autre, il est clair que le bois a un <em>grain</em>, des propriétés qui dépendent de son essence - le chêne sera beaucoup plus dur à travailler que du pin, le frêne est plus rigide et «fonctionne» bien pour faire des étagères ou des grandes longueurs, de sa géométrie - on ne fait pas de plan de travail d’un seul tenant parce que sinon il va se vriller, il faut ajuster plusieurs planches les une aux autres, de l’usage que je compte en faire - ce n’est pas une bonne idée de faire un coffrage dans une pièce humide avec du pin… C’est évident parce que le bois est un matériau vivant, mais c’est aussi vrai pour du béton par exemple, de la pierre, du tissu ou n’importe quel autre matériau que les humains sont amenés à «travailler».</p>
<p>Et c’est aussi le cas des outils : non seulement leur usage, leur destination, mais encore leurs propriétés spécifiques, se prêteront avec plus ou moins de bonne grâce aux <em>desiderata</em> de l’artisan qui les met en oeuvre. Pour atteindre son but, celui-ci devra donc mobiliser tous ces êtres en vue de l’atteinte dudit but, et cela se fera avec d’autant plus d’aisance qu’il suivra le <em>fil du bois</em>, le grain des choses, qu’il saura tirer parti des caractéristiques de chacun d’entre eux, non seulement générales - utiliser un marteau pour frapper un clou plutôt qu’un tournevis - mais aussi spécifiques - savoir que ce marteau est équilibré de telle manière pour ajuster la force de frappe et éviter de marquer le bois. Lorsque cela «fonctionne», l’artisan et le codeur peuvent atteindre cet état que l’on appelle le <em>flow</em> qui n’a rien de mystérieux ni de mystique - sauf à considérer que l’expérience mystique est elle-même caractérisée par un état de flow - mais est simplement la manifestation psychologique et physique d’une congruence plus ou moins parfaite entre tous les êtres qui participent du travail de l’artisan.</p>
<p>Approcher le code en thérapeute consiste simplement à considérer les dysfonctionnements de celui-ci - ses «bugs», ses plantages, sa «dette technique», ses branches mortes… - comme des <em>symptômes</em> d’une infélicité<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> plus profonde dans l’existence de ce code. Et donc à rechercher au delà de ces symptômes les conditions de leur apparition, de la même manière qu’un médecin au chevet d’un malade cherchera au delà de la fièvre ou de l’apparition de boutons à identifier la maladie.</p>
<p>Mais de même que le médecin, lorsqu’il fait le travail pour lequel il a prêté serment, va prendre en considération non seulement la maladie mais aussi la personne, son environnement, son mode de vie, son hygiène, son passé, la santé de ses ascendants, afin de proposer une thérapeutique qui ne «guérisse» pas simplement les symptômes mais surtout <em>améliore</em> la santé du patient ; de même est-il nécessaire de prendre en compte la relation du code avec son environnement si l’on veut espérer le «soigner» réellement. Or qu’est ce que l’environnement du code ? Ce sont les humains qui le manipule et le produisent, bien sûr, et tous les autres êtres non techniques telles que les organisations, les êtres de fiction, les liens politiques avec lesquels il interagit !</p>
<p>La <a href="http://www.melconway.com/Home/Conways_Law.html">loi de Conway</a> qui nous montre comment l’existence du code est influencée par la structure de l’organisation au sein de laquelle il est produit, le <a href="https://refuses.github.io/preprints/writing.pdf">style</a> d’écriture du code qui reflète la pensée des êtres l’ayant écrit sont des manifestations bien connues de ces relations.</p>
<p>Soigner le code, c’est donc aussi soigner les <em>codeurs</em> qui l’écrivent, le modifient, le manipulent ; <em>l’organisation</em> dans laquelle il s’insère ; les <em>croyances</em> et <em>idées politiques</em> qui circulent et constituent le substrat idéologique informant les conditions de production du code… Bref, c’est s’intéresser à tous les <em>actants</em> du <em>système</em> de code.</p>
<p>Dr.Code est la matérialisation de ces idées, somme toute assez simples, dont je tire quelques principes destinés à guider les <em>consultations</em>:</p>
<dl>
<dt>Le patient est le mieux placé pour identifier les remèdes à ses maux</dt>
<dd><p>… dans la mesure où il accepte de faire le travail d’analyse et d’enquête nécessaire. Cela signifie que le but de la consultation n’est pas de traiter les symptômes de manière mécaniste mais d’enquêter et de faire émerger au grand jour les problèmes que les douleurs ressenties par et dans le code manifestent<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>.</p>
</dd>
<dt>Le praticien a pour rôle d’aider le patient à faire ce travail</dt>
<dd><p>… et pas de lui faire appliquer telle ou telle technique, ou adopter tel ou tel outil, telle ou telle méthode. Sa position n’est pas celle d’un expert surplombant les problèmes porté par les ailes de son savoir encyclopédique. La connaissance et l’expertise sont conçues comme ouverture du champ des <em>possibles</em>, combustible pour la pensée, apport d’énergie pour accroître les potentialités du système. Il y a peu de cas où des solutions purement mécanistes s’avèrent pertinentes.</p>
</dd>
<dt>Le dialogue <em>avec</em> et autour du code est le principal outil utilisé</dt>
<dd><p>… selon l’antique pratique de la maïeutique<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>. Il s’agit de proposer une écoute active, participative et bienveillante de tous les acteurs concernés, dans la mesure du possible. <em>Active</em> car l’écoutant n’est pas une chose inerte qui ne serait que le simple reflet de ma conscience, une marionnette que je manipule, mais une entité autonome avec ses propres modalités d’existence qu’il est nécessaire de bien comprendre pour mieux la <em>traduire</em> ; <em>participative</em> car le dialogue est structuré par des questions permettant de préciser, relancer, ouvrir ; <em>bienveillante</em> car, jusqu`à preuve du contraire, sont présupposées la bonne foi et la bonne volonté de tous les <em>actants</em> du système.</p>
</dd>
<dt>Les solutions techniques s’inscrivent dans un contexte</dt>
<dd><p>… et ne sont jamais comprises comme des <a href="http://worrydream.com/refs/Brooks-NoSilverBullet.pdf">balles en argent</a> capables de résoudre les problèmes à elles seules. Le <em>Développement Dirigé par les Tests</em> est une <a href="/posts/tdd.html">technique puissante</a> mais qui ne résoudra pas les problèmes du code, elle ne fera que révéler des tensions, des blocages ou des ouvertures qu’il faudra résoudre ou exploiter. Les métriques de qualité du code ne prendront sens que si elles sont produites en vue d’une fin précise, par rapport à des hypothèses qu’elles doivent permettre de valider ou des contraintes qu’elles matérialisent.</p>
</dd>
</dl>
<p>On l’aura compris, approcher le code sous l’angle d’une thérapeutique n’est pas le chemin le plus facile et ne conviendra pas nécessairement à tous. Certains préféreront une thérapeutique mécaniste, symptomatique, à base de solutions technologiques ou organisationnelles formatées, certifiées et immédiatement reconnaissables ; des solutions que, reprenant la terminologie du modèle <a href="https://en.wikipedia.org/wiki/Cynefin_framework">Cynefin</a>, nous pourrions dire relever des domaines <em>Simple</em> ou <em>Compliqué</em>. Et dans nombre de cas, cette approche sera pertinente et efficace.</p>
<p>Pour les autres, dont la situation est de l’ordre du <em>Complexe</em>, le dialogue devra permettre d’interroger en profondeur l’ensemble du système et de ses acteurs, les habitudes, les relations entre différents modes d’existence afin de conduire à une meilleure hygiène de vie du code.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>L’expression consacrée est <a href="https://recher.wordpress.com/2016/02/28/tondre-un-yak/">tondre un yack</a> même si la tonte de yack s’apparent plus souvent à la procrastination et n’est pas nécessairement source de frustrations.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>le terme de développeur étant ici aussi entendu au sens large et incluant tous ceux qui de près ou de loin ont affaire (ou à faire) au code : testeurs, chefs de projet, SRE, DevOps, DBAs, architectes et bien sûr le treillis de <em>managers</em> «nécessaires» à faire travailler ensemble ces différents métiers.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Ce point devrait faire l’objet d’un article plus élaboré…<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Le terme est encore de Latour<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>Pour le dire dans les termes de Spinoza, la compréhension est augmentation de ma puissance d’agir et principale source de <em>Joie</em>.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>Les développeurs ont l’habitude d’utiliser un canard en plastique comme interlocuteur, d’où l’expression <em>rubber ducking</em>.<a href="#fnref6">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 14</title>
    <link href="http://abailly.github.io/posts/weekly-review-14.html" />
    <id>http://abailly.github.io/posts/weekly-review-14.html</id>
    <published>2017-04-09T00:00:00Z</published>
    <updated>2017-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 14</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April  9, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="http://www.phoenixframework.org/v0.13.1/docs/advanced-deployment">Exrm Releases · Phoenix</a></dt>
<dd><p>While pairing with Bernard on Barrel we investigated how to package applications built in Elixir</p>
</dd>
<dt><a href="https://magit.vc/manual/magit.html#Getting-Started">Magit User Manual</a></dt>
<dd><p>A gentle reminder that magit rocks and I should be using it.</p>
</dd>
<dt><a href="https://media.pragprog.com/titles/elixir/ElixirCheat.pdf">ElixirCheat12 - ElixirCheat.pdf</a></dt>
<dd><p>Elixir’s syntax is quite easy to grasp thanks to its proximity with Ruby, but there are quite a few details I am not familiar with.</p>
</dd>
<dt><a href="http://pumpkindb.org/">PumpkinDB</a></dt>
<dd><p>A “new” database focusing on providing good foundations for Event Sourced applications. Interestingly, it uses a dialect of <a href="https://en.wikipedia.org/wiki/Forth_(programming_language)">Forth</a> language to express queries and operations to be run in the DB Engine.</p>
</dd>
<dt><a href="https://mitpress.mit.edu/books/certified-programming-dependent-types">Certified Programming with Dependent Types | The MIT Press</a></dt>
<dd><p>Looks like this could be a good read given my current strong interest in dependently typed languages. Uses Coq but I suspect this could be equally applicable to Agda and Idris.</p>
</dd>
<dt><a href="https://opencredo.com/programmable-infrastructure-needs-testing/">Programmable Infrastructure Needs Testing Too - OpenCredo</a></dt>
<dd><p>Good reminder that we should apply the good things we have learnt the hard way from programming when treating <em>infrastructure as code</em>: Test-Driven Development is equally meaningful, if a bit harder to implement. Infrastructure and configuration management is another area where type-driven development shines.</p>
</dd>
<dt><a href="http://tydeworkshop.org/2017">TyDe 2017</a></dt>
<dd><p>If I were still doing research, one workshop I would love to apply for.</p>
</dd>
<dt><a href="http://oldcomputers.net/zx81.html">Sinclair ZX-81 computer</a></dt>
<dd><p>My first computer…</p>
</dd>
<dt><a href="http://2017.programmingconference.org/track/refuses-2017#modal-phid_545469060e55a2083d899855b00321c4">Salon des Refusés 2017 - ‹Programming› 2017</a></dt>
<dd><p>Thanks to @<a href="https://twitter.com/abolibibelot">abolibibelot</a>, this conference’s page provides a wealth of interesting and/or puzzling links on programming</p>
</dd>
<dt><a href="https://gregoor.github.io/syntactor/">Syntactor</a></dt>
<dd><p>Even if the idea of enhancing code editors to take care of the syntactic structure is not new and has not yet blossomed, this implementation is a good reminder this could be a great tool if done properly</p>
</dd>
<dt><a href="http://lettres.ac-rouen.fr/archives_bac/annales/a71.html">Scène VIII</a></dt>
<dd><p>Sometimes feeling like Cyrano…</p>
</dd>
<dt><a href="http://www.slate.fr/story/125493/celine-alvarez">Pourquoi tant de profs ne supportent plus Céline Alvarez? | Slate.fr</a></dt>
<dd><p><a href="https://www.celinealvarez.org/">Céline Alvarez</a> has reached celebrity in 2016 thanks to her book on education, drawn from an experiment she ran for 3 years in Aubervilliers. She has attracted a lot of criticism from professional teachers. It seems to me the relationship between the kind of education she promotes and what it is for 99% of the people is akin to the relationship between what software development is like at companies like Google and what it is for the rest of us…</p>
</dd>
<dt><a href="http://www.brownbaglunch.fr/">BrownBagLunch</a></dt>
<dd><p>Added myself to Nantes’ baggers</p>
</dd>
<dt><a href="https://www.pantone.com/fashion-color-report-spring-2017">Color Intelligence - PANTONE Fashion Color Report Spring 2017</a></dt>
<dd><p>@<a href="https://twitter.com/__MaxS__">__MaxS__</a> provided some feedback on the use of colors on <a href="http://drcode.io">Dr.Code</a> and I discovered Pantone issued quarterly reports on which colors are <em>trending</em>! Yet having a good palette does not help you much if you lack any kind of design skill…</p>
</dd>
<dt><a href="https://color.adobe.com/fr/create/color-wheel/">Roue chromatique | Modèles de couleurs - Adobe Color CC</a></dt>
<dd><p>Another site to make nice color palettes. Same remark applies here!</p>
</dd>
<dt><a href="https://refuses.github.io/preprints/writing.pdf">Programming is Writing is Programming - writing.pdf</a></dt>
<dd><p>A good read from the already mentioned <em>Salon des refusés</em>. Advocates how close to writing programming is, which implies we programmers should take care of styling issues.</p>
</dd>
<dt><a href="https://refuses.github.io/preprints/creationism.pdf">creationism.pdf</a></dt>
<dd><p>Another somewhat puzzling read from the <em>Salon des refusés</em>. If you are into Social Darwinism and Libertarianism…</p>
</dd>
<dt><a href="https://medium.com/@grgtwt/code-is-not-just-text-1082981ae27f">Code is not just text – Gregor – Medium</a></dt>
<dd><p>Yet another link from the <em>Salon des refusés</em></p>
</dd>
<dt><a href="http://fare.tunes.org/">Faré’s Home Page - François-René Rideau - Đặng-Vũ Bân</a></dt>
<dd><p>Home page of the “Creationism” paper’s author.</p>
</dd>
<dt><a href="http://witheve.com/deepdives/literate.html">Literate Programming and Eve</a></dt>
<dd><p>Eve is an experimental language and IDE that “<em>presents an alternative take on what programming could be</em>”. I have always been attracted to such kind of tools that propose to mix text, layout and code, in the spirit of literate programming and <a href="http://nbviewer.jupyter.org/">notebooks</a>.</p>
</dd>
<dt><a href="https://github.com/puffnfresh/tryidris">puffnfresh/tryidris: Try Idris</a></dt>
<dd><p>An online sandbox to try Idris. Can even compile to Javascript.</p>
</dd>
<dt><a href="https://github.com/tfjmp/php2uni">tfjmp/php2uni: PHP2Uni</a></dt>
<dd><p>Alternative approach to building unikernels from “standard” languages</p>
</dd>
<dt><a href="https://zwischenzugs.wordpress.com/2017/04/04/things-i-learned-managing-site-reliability-for-some-of-the-worlds-busiest-gambling-sites/">Things I Learned Managing Site Reliability for Some of the World’s Busiest Gambling Sites | zwischenzugs</a></dt>
<dd><p>Good read on the importance of process and documentation for operations.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Domain Driven Design, meet Dependent Types</title>
    <link href="http://abailly.github.io/posts/dependent-types-ddd.html" />
    <id>http://abailly.github.io/posts/dependent-types-ddd.html</id>
    <published>2017-04-06T00:00:00Z</published>
    <updated>2017-04-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Domain Driven Design, meet Dependent Types</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April  6, 2017</div>

<blockquote>
<p>This article aims to be the first post in a series exploring connection between <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://en.wikipedia.org/wiki/Dependent_type">Dependent types</a> as implemented in <a href="http://idris-lang.org">Idris</a>. I plan to go through all the examples scattered across Eric Evan’s <a href="https://www.abebooks.com/products/isbn/9780321125217/22376984258">seminal book</a>, revisiting them in the light of functional programming with dependent types. My intuition is that using DT languages will allow us to produce better and safer designs.</p>
</blockquote>
<p>Let’s go first through some ceremonies in order to please the Gods of programming:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">module</span> <span class="dt">Cargo</span>
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data</span><span class="fu">.</span><span class="dt">List</span>
<span class="fu">&gt;</span> <span class="kw">%default</span> <span class="kw">total</span></code></pre></div>
<p>We will go through the first example Eric Evans gives, p.17 of his book: A simple model describing booking of <code>Cargo</code> for <code>Voyage</code>s. We have some very simple data structure describing cargos and voyages. A cargo is described by its identification string and a size.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">record</span> <span class="dt">Cargo</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   constructor <span class="dt">MkCargo</span>
<span class="fu">&gt;</span>   cargo_id <span class="ot">:</span> <span class="dt">String</span>
<span class="fu">&gt;</span>   size <span class="ot">:</span> <span class="dt">Int</span></code></pre></div>
<p>And a <code>Voyage</code> is a list of cargos, a total capacity and a confirmation order<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">record</span> <span class="dt">Voyage</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   constructor <span class="dt">MkVoyage</span>
<span class="fu">&gt;</span>   capacity <span class="ot">:</span> <span class="dt">Int</span>
<span class="fu">&gt;</span>   orderConfirmation <span class="ot">:</span> <span class="dt">Int</span>
<span class="fu">&gt;</span>   cargos <span class="ot">:</span> <span class="dt">List</span> <span class="dt">Cargo</span></code></pre></div>
<p>Given a voyage, it is simple matter to compute the total booked cargo size for this voyage:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> bookedCargoSize <span class="ot">:</span> <span class="dt">Voyage</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="fu">&gt;</span> bookedCargoSize <span class="fu">=</span> sum <span class="fu">.</span> map size <span class="fu">.</span> cargos</code></pre></div>
<p>Then booking a <code>Cargo</code> for a <code>Voyage</code> checks the voyage can accomodate the given cargo’s size before adding it to its load:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> makeBooking <span class="ot">:</span> <span class="dt">Cargo</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span>
<span class="fu">&gt;</span> makeBooking cargo voyage <span class="fu">=</span>
<span class="fu">&gt;</span>   <span class="kw">if</span> bookedCargoSize voyage <span class="fu">+</span> size cargo <span class="fu">&lt;</span> capacity voyage
<span class="fu">&gt;</span>   <span class="kw">then</span> <span class="kw">record</span> { cargos <span class="fu">=</span> cargo <span class="ot">::</span> cargos voyage } voyage
<span class="fu">&gt;</span>   <span class="kw">else</span> voyage</code></pre></div>
<p>However, it is customary for shipping company to accept <em>overbooking</em>, say 10%. Our booking function then becomes:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> makeBooking&#39; <span class="ot">:</span> <span class="dt">Cargo</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span>
<span class="fu">&gt;</span> makeBooking&#39; cargo<span class="fu">@</span>(<span class="dt">MkCargo</span> <span class="fu">_</span> size) voyage<span class="fu">@</span>(<span class="dt">MkVoyage</span> capacity orderConfirmation cargos) 
<span class="fu">&gt;</span>              <span class="fu">=</span>  <span class="kw">if</span> cast (bookedCargoSize voyage <span class="fu">+</span> size) <span class="fu">&gt;</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">1</span> <span class="fu">*</span> cast capacity
<span class="fu">&gt;</span>                    <span class="kw">then</span>  voyage
<span class="fu">&gt;</span>                    <span class="kw">else</span> <span class="kw">record</span> { cargos <span class="fu">=</span> cargo <span class="ot">::</span> cargos } voyage </code></pre></div>
<p>Obviously, this has the huge drawback of mixing different concerns: Updating the voyage with the cargo and computing the overbooking rule. What we want to do is to make this <em>overbooking policy</em> more explicit, say in a type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="dt">OverbookingPolicy</span> <span class="ot">:</span> <span class="dt">Type</span> 
<span class="fu">&gt;</span> <span class="dt">OverbookingPolicy</span> <span class="fu">=</span> <span class="dt">Cargo</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></code></pre></div>
<p>Then our standard 10% overbooking policy is reified in its own function:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> tenPercentOverbooking <span class="ot">:</span> <span class="dt">OverbookingPolicy</span>
<span class="fu">&gt;</span> tenPercentOverbooking cargo<span class="fu">@</span>(<span class="dt">MkCargo</span> <span class="fu">_</span> size) voyage<span class="fu">@</span>(<span class="dt">MkVoyage</span> capacity orderConfirmation cargos) <span class="fu">=</span> 
<span class="fu">&gt;</span>   cast (bookedCargoSize voyage <span class="fu">+</span> size) <span class="fu">&gt;</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">1</span> <span class="fu">*</span> cast capacity</code></pre></div>
<p>and later on used to compute booking:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> makeBooking&#39;&#39; <span class="ot">:</span> <span class="dt">Cargo</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span> <span class="ot">-&gt;</span> <span class="dt">OverbookingPolicy</span> <span class="ot">-&gt;</span> <span class="dt">Voyage</span>
<span class="fu">&gt;</span> makeBooking&#39;&#39; cargo voyage isAllowed
<span class="fu">&gt;</span>              <span class="fu">=</span>  <span class="kw">if</span> isAllowed cargo voyage
<span class="fu">&gt;</span>                    <span class="kw">then</span> voyage
<span class="fu">&gt;</span>                    <span class="kw">else</span> <span class="kw">record</span> { cargos <span class="fu">=</span> cargo <span class="ot">::</span> cargos } voyage </code></pre></div>
<p>Simple and efficient.</p>
<p>However, this function is somewhat lacking with respect to how much information it provides in its type: We know nothing about the transformed <code>voyage</code> that it produces and in particular we don’t know if the <code>OverbookingPolicy</code> has been applied or not and if the <code>cargo</code> is part of the load. Having this information around in the type system would be handy to clients that need to take more decisions from this booking…</p>
<p>Enters dependent types: We will use a type to express the <em>proposition</em> that some <code>Voyage</code> contains some <code>Cargo</code> load which will be part of the outcome of the <code>makeBooking</code> function. This means we would like our <code>makeBooking</code> function to have the following signature:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">makeBooking&#39;&#39;</span> <span class="ot">:</span> (cargo <span class="ot">:</span> <span class="dt">Cargo</span>) <span class="ot">-&gt;</span> <span class="dt">Voyage</span> 
              <span class="ot">-&gt;</span> <span class="dt">OverbookingPolicy</span> 
              <span class="ot">-&gt;</span> (voyage&#39; <span class="ot">:</span> <span class="dt">Voyage</span> <span class="fu">**</span> <span class="dt">Dec</span> (<span class="dt">HasCargo</span> cargo voyage&#39;))</code></pre></div>
<p>The return type is a <em>dependent pair</em> which associates an instance of <code>Voyage</code>, a value, with another value whose type depends on <code>voyage'</code>. Just like a standard pair this allows us to pack more information in our return type, namely the possibly updated <code>voyage</code> and a <em>proof</em> that <code>cargo</code> is part of <code>voyage'</code>, or not.</p>
<p>In order to decide whether a voyage <code>HasCargo</code> or not, we need to be able to decide whethere two <code>Cargo</code>s are equal or not which in Idris terms means implementing the interface <code>DecEq</code> for the <code>Cargo</code> type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> mutual
<span class="fu">&gt;</span>   implementation <span class="dt">DecEq</span> <span class="dt">Cargo</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     decEq (<span class="dt">MkCargo</span> cid <span class="fu">_</span>) (<span class="dt">MkCargo</span> cid <span class="fu">_</span>) <span class="fu">=</span> 
<span class="fu">&gt;</span>       <span class="kw">case</span> decEq cid cid <span class="kw">of</span> 
<span class="fu">&gt;</span>         (<span class="dt">Yes</span> prf)   <span class="ot">=&gt;</span> <span class="kw">rewrite</span> prf <span class="kw">in</span> <span class="dt">Yes</span> <span class="dt">Refl</span>
<span class="fu">&gt;</span>         (<span class="dt">No</span> contra) <span class="ot">=&gt;</span> <span class="dt">No</span> <span class="fu">$</span> contra <span class="fu">.</span> fst <span class="fu">.</span> cargoInj</code></pre></div>
<p>The <code>cargoInj</code> is a utility function that allows us to relate a proof that the two cargo’s ids differ (<code>contra</code>) to actual <code>Cargo</code> inhabitants.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>   <span class="kw">private</span>
<span class="fu">&gt;</span>   cargoInj <span class="ot">:</span> (<span class="dt">MkCargo</span> cid s <span class="fu">=</span> <span class="dt">MkCargo</span> cid&#39; s&#39;) <span class="ot">-&gt;</span> (cid <span class="fu">=</span> cid&#39;, s <span class="fu">=</span> s&#39;)
<span class="fu">&gt;</span>   cargoInj <span class="dt">Refl</span> <span class="fu">=</span> (<span class="dt">Refl</span>, <span class="dt">Refl</span>)</code></pre></div>
<p>We can now define <code>HasCargo</code> type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">HasCargo</span> <span class="ot">:</span> (cargo <span class="ot">:</span> <span class="dt">Cargo</span>) <span class="ot">-&gt;</span> (voyage <span class="ot">:</span> <span class="dt">Voyage</span>) <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   <span class="dt">CargoConfirmed</span> <span class="ot">:</span> { <span class="kw">auto</span> prf <span class="ot">:</span> <span class="dt">Elem</span> cargo cargos } 
                   <span class="ot">-&gt;</span> <span class="dt">HasCargo</span> cargo (<span class="dt">MkVoyage</span> cap order cargos)</code></pre></div>
<p><code>HasCargo</code>’s only constructor, <code>CargoConfirmed</code>, given a proof that <code>cargo</code> is an element of <code>voyage</code>’s <code>cargos</code>, yields a proof that <code>cargo</code> is confirmed to be part of <code>voyage</code>. This is a convoluted way to assert the fact a cargo is inside the list of cargos carried by a voyage. Note that we expect the compiler to be able to provide the proof autoatically from the environment and so it is left <em>implicit</em>.</p>
<p>To be useful in our <code>makeBooking</code> function, we need to equip this type with a decision procedure, e.g. a function that produces a <code>DecEq (HasCargo ...)</code> instance given some cargo and some voyage:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> mutual
<span class="fu">&gt;</span>   hasCargo <span class="ot">:</span> (cargo <span class="ot">:</span> <span class="dt">Cargo</span>) <span class="ot">-&gt;</span> (voyage <span class="ot">:</span> <span class="dt">Voyage</span>) <span class="ot">-&gt;</span> <span class="dt">Dec</span> (<span class="dt">HasCargo</span> cargo voyage)
<span class="fu">&gt;</span>   hasCargo cargo (<span class="dt">MkVoyage</span> capacity orderConfirmation []) <span class="fu">=</span> <span class="dt">No</span> voyageIsEmpty</code></pre></div>
<p>The case where the list of <code>cargos</code> of a <code>voyage</code> is empty is easy: Simply return a <code>No</code> with a contradiction <code>voyageIsEmpty</code> (see later). The non-empty case is a little bit trickier:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>   hasCargo cargo (<span class="dt">MkVoyage</span> capacity orderConfirmation cargos) <span class="fu">=</span> </code></pre></div>
<p>First we pattern-match to check whether or not the <code>cargo</code> is in the list which gives us a <code>DecEq (Elem cargo cargos)</code> instance:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>     <span class="kw">case</span> isElem cargo cargos <span class="kw">of</span></code></pre></div>
<p>In the <code>Yes</code> case, we simply produce <code>CargoConfirmed</code> and the compiler can use the <code>prf</code> proof of membership in scope to satisfy the requirements of the constructor:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>       (<span class="dt">Yes</span> prf)   <span class="ot">=&gt;</span> <span class="dt">Yes</span> <span class="dt">CargoConfirmed</span></code></pre></div>
<p>In the <code>No</code> case, we need to transform our proof by contradiction an element is not present in a proof by contradiction <code>HasCargo</code> does not hold, which means (again) composing functions to extract the proof from a <code>CargoConfirmed</code> instance and pass it to <code>contra</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>       (<span class="dt">No</span> contra) <span class="ot">=&gt;</span> <span class="dt">No</span> (contra <span class="fu">.</span> cargoConfirmed)</code></pre></div>
<p>This code makes use of the following utility functions as contradictions:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> 
<span class="fu">&gt;</span>   voyageIsEmpty <span class="ot">:</span> <span class="dt">HasCargo</span> cargo (<span class="dt">MkVoyage</span> capacity orderConfirmation []) 
<span class="fu">&gt;</span>                 <span class="ot">-&gt;</span> <span class="dt">Void</span>
<span class="fu">&gt;</span>   voyageIsEmpty <span class="dt">CargoConfirmed</span> <span class="kw">impossible</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span>   cargoConfirmed <span class="ot">:</span> <span class="dt">HasCargo</span> cargo (<span class="dt">MkVoyage</span> capacity orderConfirmation cargos)
<span class="fu">&gt;</span>                  <span class="ot">-&gt;</span> <span class="dt">Elem</span> cargo cargos
<span class="fu">&gt;</span>   cargoConfirmed (<span class="dt">CargoConfirmed</span> {prf}) <span class="fu">=</span> prf</code></pre></div>
<p>We are now fully armed to define <code>makeBooking'''</code> function which is just our <code>makeBooking''</code> function augmented with an actual proof telling us whether or not the <code>cargo</code> has been actually confirmed.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> makeBooking&#39;&#39;&#39; <span class="ot">:</span> (cargo <span class="ot">:</span> <span class="dt">Cargo</span>) <span class="ot">-&gt;</span> <span class="dt">Voyage</span> 
<span class="fu">&gt;</span>                <span class="ot">-&gt;</span> <span class="dt">OverbookingPolicy</span>
<span class="fu">&gt;</span>                <span class="ot">-&gt;</span> (voyage&#39; <span class="ot">:</span> <span class="dt">Voyage</span> <span class="fu">**</span> <span class="dt">Dec</span> (<span class="dt">HasCargo</span> cargo voyage&#39;))
<span class="fu">&gt;</span> makeBooking&#39;&#39;&#39; cargo voyage<span class="fu">@</span>(<span class="dt">MkVoyage</span> capacity orderConfirmation cargos) isAllowed <span class="fu">=</span> 
<span class="fu">&gt;</span>   <span class="kw">let</span> voyage&#39; <span class="fu">=</span> <span class="kw">if</span> isAllowed cargo voyage
<span class="fu">&gt;</span>                   <span class="kw">then</span> <span class="dt">MkVoyage</span> capacity orderConfirmation (cargo <span class="ot">::</span> cargos)
<span class="fu">&gt;</span>                   <span class="kw">else</span> voyage
<span class="fu">&gt;</span>   <span class="kw">in</span> (voyage&#39; <span class="fu">**</span> hasCargo cargo voyage&#39;) </code></pre></div>
<p>In the original function (or method) defined in the book, <code>makeBooking</code> returned an integer which was supposed to be booking confirmation order, or -1 if the booking could not be confirmed. It seems to me the above formulation improves over this simple but potentially obscure <em>coding</em> of return type, explicitly embodying the success or failure to add the cargo to the voyage in the return <em>type</em> while concurrently updating the voyage. What I found really interesting is that while we are not only improving the cohesion/coupling through the separation of concerns <code>OverbookingPolicy</code> yields, we are also <em>opening</em> the function to other use thanks to the more precise return type.</p>
<p>Dependent types (or even non-obviously-dependent-yet-sophisticated type systems like Haskell’s or OCaml’s) really allows (or forces) us to reason in two stages: Things we can reason about at compile time and things we can reason about at run-time, with the added value of being able to express the two using the same expressions. I suspect these capabilities could be useful to provide more robust and expressive designs for real-world problems, and not only as a tool for automated theorem proving, and this is what I intend to explore in the next installments of this series.</p>
<blockquote>
<p>Thanks to <a href="https://twitter.com/rhwy">Rui Carvalho</a> for the feedback and to <a href="https://www.meetup.com/fr-FR/Crafting-Software/events/238241119/">Crafting Software Meetup</a> to give me the incentive to explore these topics</p>
</blockquote>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This one I copied verbatim from the book but I don’t use really in the code…<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>I borrowed the technique from <code>Reflection.idr</code> source code. It is another instance of Curry-Howard where function composition is equated to transitivity of implication.<a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;La lutte pour la reconnaissance&quot;</title>
    <link href="http://abailly.github.io/posts/lutte-pour-reconnaissance.html" />
    <id>http://abailly.github.io/posts/lutte-pour-reconnaissance.html</id>
    <published>2017-04-03T00:00:00Z</published>
    <updated>2017-04-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;La lutte pour la reconnaissance&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April  3, 2017</div>

<p>Quelques notes sur un ouvrage d’<a href="http://philosophy.columbia.edu/directories/faculty/axel-honneth">Axel Honneth</a>, philosophe allemand disciple de l’École de Francfort et de sa philosophie critique, <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/Folio/Folio-essais/La-lutte-pour-la-reconnaissance">La lutte pour la reconnaissance</a>.</p>
<h1 id="résumé">Résumé</h1>
<h2 id="hegel">Hegel</h2>
<ul>
<li>Le terme de <em>lutte pour la reconnaissance</em> est une théorie de “jeunesse” de Hegel, avant la mise en forme de sa philosophie de l’Esprit : le sujet émerge des relations avec autrui, de la survenue dans la conscience d’une reconnaissance par autrui, symétrique à ma reconnaissance de l’autre. “J’existe parce que l’on me <em>reconnait</em> une existence”</li>
<li>Hegel distingue trois niveaux de reconnaissance:
<ul>
<li>physique et psychologique, construite par les relations familiales,</li>
<li>juridique, du sujet en tant que participant à un ensemble de <em>contrats</em>,</li>
<li>éthique, en tant que membre d’une communauté politique, d’un État</li>
</ul></li>
<li>Il s’oppose à la fois aux anciens pour qui l’homme est un animal social et à Hobbes pour qui la société est un “mal nécessaire” pour lutter contre la lutte de tous contre tous, en proposant un modèle d’émergence du fait social au travers d’une suite de <em>luttes pour la reconnaissance</em> du sujet</li>
<li>Hegel fonde la lutte pour la reconnaissance sur un <em>Idéal</em>, celui de la marche de l’Esprit vers sa réalisation complète</li>
</ul>
<h2 id="mead">Mead</h2>
<ul>
<li>Par contraste, <a href="https://en.wikipedia.org/wiki/George_Herbert_Mead">George Mead</a> cherche à construire une théorie de la reconnaissance qui soit empirique et matérialiste. C’est dans la distinction entre le <em>Je</em> et le <em>Moi</em> qu’il trouve la première opposition qui fonde toutes les autres:
<ul>
<li>Le <em>Je</em> est un point de vue, celui qui parle et qui pense quand “je dis Je”. Il est par nature inconnaissable et ne peut pas être objectivé. C’est la part “créative” du sujet, celle qui fait continuellement pression pour accroître son espace de liberté,</li>
<li>Le <em>Moi</em> est une construction sociale, l’objectivation du sujet à partir des interactions avec l’autre. C’est la part “normative” du sujet, celle qui cherche à s’adapter à l’existence,</li>
<li>C’est le <em>Je</em> qui construit le <em>Moi</em></li>
</ul></li>
<li>Entre <em>Je</em> et <em>Moi</em> il y a un écart qui est la source de la lutte pour la reconnaissance du <em>Je</em> selon deux catégories:
<ul>
<li>l’autonomie individuelle, dans laquelle le sujet est reconnu comme <em>membre</em> d’un groupe, semblable en tant que membre à tous les autres,</li>
<li>l’autoréalisation personnelle dans laquelle le sujet est reconnu comme singulier, unique, différent de tous les autres sujets,</li>
<li>cette autoréalisation se manifeste socialement dans le <em>métier</em>, l’intégration du sujet dans une division fonctionnelle de la société où son individualité trouve à s’exprimer,</li>
</ul></li>
<li>Cette reconnaissance pose un problème : ce sont les valeurs d’autrui, de la société qui sont reconnues, pas <em>mes</em> valeurs uniques (si tant est qu’elles existent). Ce qui est reconnu par les autres se sont mes qualités en tant qu’elles sont socialement utiles à un moment donné.</li>
</ul>
<h2 id="autres-approches">Autres approches</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Donald_Winnicott">Donald Winnicott</a> donne une validation empirique de la lutte pour la reconnaissance au travers de l’évolution de la relation mère-enfant:
<ul>
<li>Au stade 1, la mère et l’enfant sont en symbiose : il n’y a pas de sujet séparé,</li>
<li>L’enfant développe sa subjectivité par l’agression envers sa mère et la destruction d’objets : il objectifie sa mère ce qui lui permet de reconnaître sa propre subjectivité dans l’existence (et les réactions) d’un autre sujet,</li>
<li>Au stade 2, la mère et l’enfant sont des sujets distincts en dépendance relative,</li>
</ul></li>
<li>Selon <a href="https://en.wikipedia.org/wiki/John_Dewey">John Dewey</a>, les émotions humaines sont liées à des actions, à leur échec ou leur succès. Il distingue deux types d’échecs : soit technique, soit morale selon le type d’actions. Les atteintes morales causées par le sujet lui même entraîne le sentiment de culpabilité, tandis que les atteintes provoquent l’indignation. La honte est une réaction pour résoudre une tension induite par l’indignation et les atteintes causées au sujet, qui provoque la lutte pour la reconnaissance, le conflit social et politique</li>
<li>Aussi bien Mead que Winnicott (et d’autres auteurs) donnent un contenu empirique aux intuitions de Hegel : la notion de reconnaissance et son corollaire le mépris, sont bien des éléments centraux de la formation du sujet, tant sur le plan des relations personnelles que des relations sociales</li>
</ul>
<h2 id="reconnaissance-et-lutte-sociale">Reconnaissance et lutte sociale</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Karl_Marx">Karl Marx</a> développe l’idée que la lutte des classes est un conflit d’ordre moral pour rétablir la pleine reconnaissance sociale des travailleurs. Le travail est un moyen de reconnaissance intersubjective: le consommateur reconnait le producteur qui lui-même reconnait le consommateur, les deux étant partenaires dans la relation autour du travail, dans l’objet produit. En captant le travail, le capitalisme induit une <em>perte de reconnaissance</em>. C’est un modèle purement utilitariste : la lutte est purement économique ce qui réduit la dimension morale. Karl Marx abandonne la dimension symbolique de la lutte pour la reconnaissance pour la réduire à une lutte matérielle, un <em>conflit d’intérêts</em></li>
<li><a href="https://en.wikipedia.org/wiki/Georges_Sorel">Georges Sorel</a> a contrario rejette l’utilitarisme étroit de Marx et met l’accent sur l’aspect moral des luttes sociales. Il promeut un <em>socialisme éthique</em> mêlant marxisme et kantisme. La morale est ancrée dans l’expérience éthique de l’individu au sein du groupe familiale et le sentiment collectif d’humiliation alimente lutte des classes, provoquant la confrontation (violente) avec le système normatif existant (droit) pour obtenir la reconnaissance. Ce faisant, Sorel ne perçoit pas la dimension universaliste du droit qui apparait uniquement comme un moyen de légitimer un pouvoir. Il dénonce le relativisme de la forme juridique qui suit les intérêts de la classe au pouvoir et tombe dans le populisme, la violence et, in fine, le fachisme, par l’incapacité dans laquelle il se trouve de distinguer au sein de la société bourgeoise le bon (le droit universel) du mauvais (le pouvoir de classe), confondant deux formes d’atteintes à la reconnaissance : le respect et l’estime de soi</li>
<li>Jean-Paul Sartre s’est aussi emparé du sujet, notamment dans <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/Folio/Folio-essais/Reflexions-sur-la-question-juive">Réflexion sur la question juive</a> et ses textes contre le colonialisme. Pour lui, la “question juive” est une forme de mépris social, donc une absence de reconnaissance. Il invoque le concept de névrose comme trouble des rapports de reconnaissance mutuelle qui apparait dans la domination coloniale. Il semble toutefois confondre différentes formees de reconnaissance et maintenir un certain flou théorique.</li>
</ul>
<h2 id="reconnaissance-et-vie-éthique">Reconnaissance et vie éthique</h2>
<h3 id="le-rapport-à-soi">Le rapport à soi</h3>
<ul>
<li>Axel Honneth propose un modèle “unifié” des 3 stades de la lutte pour la reconnaissance:</li>
</ul>
<table>
<colgroup>
<col width="21%" />
<col width="23%" />
<col width="25%" />
<col width="29%" />
</colgroup>
<thead>
<tr class="header">
<th>mode de reconnaissance</th>
<th>solicitude personnelle</th>
<th>considération cognitive</th>
<th>estime sociale</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dimension personnelle</td>
<td>affects et besoins</td>
<td>responsabilité morale</td>
<td>capacités et qualités</td>
</tr>
<tr class="even">
<td>forme de reconnaissance</td>
<td>relations primaires (amour)</td>
<td>relations juridiques (droits)</td>
<td>communauté de valeurs (solidarité)</td>
</tr>
<tr class="odd">
<td>potentiel développement</td>
<td></td>
<td>généralisation, concrétisation</td>
<td>individualisation, égalisation</td>
</tr>
<tr class="even">
<td>relation à soi</td>
<td>confiance en soi</td>
<td>respect de soi</td>
<td>estime de soi</td>
</tr>
<tr class="odd">
<td>forme de mépris</td>
<td>sévices, violences</td>
<td>privation de droits, exclusion</td>
<td>humiliation, offense</td>
</tr>
<tr class="even">
<td>forme d’identité menacée</td>
<td>intégrité physique</td>
<td>intégrité sociaele</td>
<td>honneur, dignité</td>
</tr>
</tbody>
</table>
<ul>
<li>À chaque stade est associée notamment une forme de relation à soi: confiance en soi, respect de soi et estime de soi ; relation qui est mise à mal par différentes formes de <em>mépris</em>, de non-reconnaissance, de violence (physique ou symbolique)</li>
<li>La distinction entre le <em>respect de soi</em> que produit la reconnaissance juridique et <em>l’estime de soi</em> que produit la communauté de valeurs est particulièrement importante pour comprendre la dynamique des conflits sociaux, équilibrant un mouvement entre universalisation et individualisation. Dans la société d’ancien régime ou traditionnelle, l’estime sociale vient du groupe dont l’individu fait partie, elle prend la forme de <em>l’honneur</em> et est stable dans le temps. Quand s’universalise la reconnaissance de l’individu comme semblable à tous les autres au travers du droit, l’individualisme s’accroît, des groupes antagonistes se créent car il n’y a plus de référence unique de l’échelle sociale : qui déterminent quelles sont les bonnes fins ?</li>
</ul>
<h3 id="dynamique-des-luttes-et-morale">Dynamique des luttes et morale</h3>
<ul>
<li>Axel Honneth cherche ainsi à identifier les sources de la lutte sociale dans la vie éthique, de la morale, dans la dynamique d’une lutte pour la reconnaissance qui ne soit pas purement utilitariste mais prenne en compte l’intégralité (et le désir d’intégrité) de l’individu:
<ul>
<li>la relation familiale, l’individuation de l’enfant par sa formation constitue le premier stade de reconnaissance : il produit la <em>confiance en soi</em> qui est la condition des autres développements,</li>
<li>l’enfant grandissant, y compris par des expériences négatives de mépris, de violence, développe un sentiment moral : “il est juste d’être reconnu comme un sujet autonome”,</li>
<li>lorsque l’adulte se trouve inséré dans la société en tant que dominé, il fait l’expérience de l’humiliation, de la perte de l’estime de soi qui s’attache au mépris pour les classes défavorisées (pauvres, femmes, immigrés…),</li>
<li>mais il peut généraliser son expérience de la reconnaissance familiale, son “sentiment moral”, pour l’élargir à la société toute entière et lutter socialement pour élargir le cadre normatif existant,</li>
<li>cette lutte crée un nouveau cadre social de reconnaissance et par ailleurs produit de l’estime de soi par la participation à un groupe en lutte et la reconnaissance qu’elle produit de l’importance de l’individu.</li>
</ul></li>
<li>Il cherche ainsi à dépasser le modèle utilitariste qui ne perçoit les luttes sociales qu’en termes d’intérêts de groupes pour maintenir ou acquérir telle position, telles biens (y compris symboliques). Car in fine il existe toujours une forme de consensus moral sur ce qui constitue un intérêt légitime. Ou autrement dit la remise en cause d’intérêts “matériels” est toujours aussi perçue comme une atteinte morale et une remise en cause du cadre normatif existant.</li>
<li>Le contrat social (implicite) est ainsi un système de reconnaissance mutuel dont la transformation est le fruit de luttes, constantes, de certains sous-groupes</li>
</ul>
<h1 id="discussion">Discussion</h1>
<p>Je vois dans le livre d’Axel Honneth une tentative, à mon sens réussie, pour fonder les luttes sociales sur quelque chose qui ne soit ni une pure lutte d’intérêts antagonistes, ni une téléologie de type marche de l’Esprit ou sens de l’Histoire. En s’appuyant sur le travail d’anthropologues, psychologues, sociologues, il réactualise la théorie de Hegel d’une construction et d’un progrès sociaux induits par le mécanisme de la lutte pour la reconnaissance, en “montrant” la réalité empirique de ce mécanisme. Il est très intéressant de penser, et de voir démontrer, le fait que c’est la reconnaissance personnelle du sujet dans le cercle familial, la “lutte” pour la reconnaissance de son intégrité physique et psychique, de son autonomie, qui fonde les autres stades de la lutte : c’est parce qu’il l’expérience de la confiance en soi que l’enfant peut développer plus aisément, plus tard, le respect et l’estime de soi. Et c’est aussi dans cette expérience personnelle qu’il puise la faculté de généraliser cette demande aux autres humains, au groupe social. Il n’y a pas de fatalité ou de prédestination morale, mais pas non plus une sèche lutte d’intérêts catégoriels qui ne seraient alors que relatifs, simples manifestations de rapports de pouvoirs à un instant donné de l’histoire : les individus luttent aussi pour des questions morales et symboliques, et ce d’autant plus fermement que ces questions sont relatives à une expérience intime.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 13</title>
    <link href="http://abailly.github.io/posts/weekly-review-13.html" />
    <id>http://abailly.github.io/posts/weekly-review-13.html</id>
    <published>2017-04-02T00:00:00Z</published>
    <updated>2017-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 13</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April  2, 2017</div>

<dl>
<dt><a href="https://blog.acolyer.org/2017/03/27/ethically-aligned-design/">Ethically aligned design | the morning paper</a></dt>
<dd><p>Another interesting post from <em>The Morning Paper</em>, this time about ethics and software. This resonates with some discussions we have had at latest Software Craft(wo)manship. Reading the paper I was attracted to ….</p>
</dd>
<dt><a href="https://www.amazon.com/Moral-Machines-Teaching-Robots-Right/dp/0199737975">Moral Machines: Teaching Robots Right from Wrong: Wendell Wallach, Colin Allen</a></dt>
<dd><p>… but some reviews I read dettered me from buying it. I will try to dig into the subject a little bit more and look for some relevant texts (beside Kant, of course)</p>
</dd>
<dt><a href="/posts/simone-responsabilite.html">Celui qui appuie sur le bouton est-il le seul coupable ?</a></dt>
<dd><p>My notes on the afternoon spent under the wise guidance of <a href="http://peggyavez.com/">Peggy Penet-Avez</a> (aka. <a href="http://simoneetlesphilosophes.fr/">Simone</a>) thinking my way across the concepts of intention, action, responsibilit, guilt…</p>
</dd>
<dt><a href="http://dev.null.org/dadaengine/">The Dada Engine</a></dt>
<dd><p>A well known post-modern articles generator. Stemmed from a discussion on the obscurity of Lacan which is the basis of <a href="https://s3-us-west-2.amazonaws.com/vulk-blog/ThePervertsGuidetoComputerProgramming-ThePaper.pdf">The Perverts’ guide to computer programming</a>.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/03/29/deepcoder-learning-to-write-programs/">DeepCoder: Learning to write programs</a></dt>
<dd><p>Recurrent/Convolution neural networks that “learn” to write programs from input/output samples. Interestingly, the program generated are pure functional expressions…</p>
</dd>
<dt><a href="https://github.com/donnemartin/system-design-primer">donnemartin/system-design-primer: Learn how to design large-scale systems</a></dt>
<dd><p>A huge set of links on system design</p>
</dd>
<dt><a href="https://github.com/idris-lang/Idris-dev/blob/master/docs/st/introduction.rst">Idris-dev/introduction.rst at master</a></dt>
<dd><p>A new Idris tutorial on the use of ST, a type for modelling state-machines.</p>
</dd>
<dt><a href="https://hexdocs.pm/ex_unit/ExUnit.Case.html#describe/2">ExUnit v1.4.2</a></dt>
<dd><p>Had to understand Elixir’s unit testing framework while we were pairing with Bernard on a barrel-db demo.</p>
</dd>
<dt><a href="http://2013.ruleml.org/presentations/UniLFS-DumitruRoman.pdf">PowerPoint-Präsentation - UniLFS-DumitruRoman.pdf</a></dt>
<dd><p>A deck on RuleML, a language to model business process rules</p>
</dd>
<dt><a href="https://nim-lang.org/">Nim Programming Language</a></dt>
<dd><p>Another link stemming from a discussion on the <em>Artisans du logiciel</em> Slack. An statically typed imperative language (formerly known as Nimrod)</p>
</dd>
<dt><a href="https://www.reddit.com/r/spacemacs/comments/4a62la/magit_tutorial/">Magit tutorial? : spacemacs</a></dt>
<dd><p>Not only did I have to program in Elixir (a dynamically typed language…), but I had to do it in Spacemacs! We found the experience to be somewhat painful because of some lag in pressing the <code>Esc</code> key, an issue which is solved by <a href="https://github.com/syl20bnr/spacemacs/issues/5413">this post</a>. Here is the final tmux configuration we use:</p>
<pre><code> set -g prefix C-a
 set -g default-terminal &quot;screen-256color&quot;
 set -g mode-mouse on
 set -g mouse-resize-pane on
 set -g mouse-select-pane on
 set -g mouse-select-window on
 set -s escape-time 0
 set-option -g default-shell /bin/zsh</code></pre>
</dd>
<dt><a href="http://stackoverflow.com/questions/10753073/whats-the-theoretical-basis-for-existential-types">Theory of existential types</a></dt>
<dd><p>While preparing a short post on <a href="/posts/existential-types.html">Existential types</a> I stumbled upon this SO answer which provides deeper theoretical insights.</p>
</dd>
<dt><a href="http://web.engr.oregonstate.edu/~erwig/cs582/slides/2.Idris.key.pdf">Understanding Idris</a></dt>
<dd><p>Interesting slide deck on Idris</p>
</dd>
<dt><a href="https://speakerdeck.com/kdaniels/building-bridges-with-effective-devops-1">Building Bridges with Effective Devops</a></dt>
<dd><p>A deck drawn from this weeks’ <a href="http://www.devopsweekly.com/">Devops weekly</a> newsletter on how to build “bridges” across cultures and teams. I was ready to buy the book but the book has mixed reviews on O’Reilly’s site. Insights welcomed.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Understanding Existential Types</title>
    <link href="http://abailly.github.io/posts/existential-types.html" />
    <id>http://abailly.github.io/posts/existential-types.html</id>
    <published>2017-03-31T00:00:00Z</published>
    <updated>2017-03-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Understanding Existential Types</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on March 31, 2017</div>

<p>Existential types are a less well-known extension to Haskell’s type system and Damas-Hindley-Milner type theory, although they are a logical consequence of the identification of type theory with predicate logic: If type variables can be universally quantified then it seems logical they can also be existentially quantified. I have used existential types in Haskell on several occasions but my brain always struggled to really understand what was going on and how to fix the dreaded error messages I got back from the compiler.</p>
<p>While working on <a href="/slides/xxi-century-typed.html">my talk</a> on type-driven development I used existentials to model one of the evolution step of the quizz program I was working on and had some sort of epiphany. This short post is an attempt to capture the insights I gathered in the hope it might be useful for other people.</p>
<h1 id="the-problem">The Problem</h1>
<p>The problem is pretty simple and quite common. A quizz is made up from different <em>types</em> of questions which are part of a quizz, say open questions, multiple choice questions, rating questions. Each question expects a different type of answer: A free text for open questions, selected option for MCQ, a number for rating questions, but the answer is always initially given by the user as a text which must be converted to the right form.</p>
<p>So we have the following (abridged) types of questions:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">OpenQuestion</span> 
<span class="kw">data</span> <span class="dt">MCQuestion</span>
<span class="kw">data</span> <span class="dt">RatingQuestion</span></code></pre></div>
<p>We expose the API of questions as a <em>typeclass</em> in order to be future-proof (we would like to make it easy to introduce new types of questions):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Questionable</span> q <span class="kw">where</span>
    <span class="kw">type</span> <span class="dt">Answer</span><span class="ot"> q ::</span> <span class="fu">*</span>
    <span class="co">-- other methods omitted....</span>
<span class="ot">    isCorrectAnswer ::</span> <span class="dt">Answer</span> q <span class="ot">-&gt;</span> q <span class="ot">-&gt;</span> <span class="dt">Bool</span></code></pre></div>
<p>and then we need to define a <code>Quizz</code> as a sequence of questions and some functions to compute the answers to the questions and assess the user’s result. The <code>User</code> is simply modelled as a function that provides an answer (or no answer) as a string, given any question.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Text</span>

<span class="kw">data</span> <span class="dt">Quizz</span> <span class="fu">=</span> <span class="dt">Quizz</span> {<span class="ot"> questions ::</span> [ <span class="dt">Question</span> ] }

<span class="ot">answerQuestion ::</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">Question</span> <span class="ot">-&gt;</span> <span class="dt">Quizz</span> <span class="ot">-&gt;</span> <span class="dt">Quizz</span>
answerQuestion user question quizz <span class="fu">=</span> <span class="fu">...</span>

<span class="ot">answers ::</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">Quizz</span> <span class="ot">-&gt;</span> <span class="dt">Quizz</span>
answers user quizz <span class="fu">=</span>
 foldr (answerQuestion user) quizz (questions quizz)</code></pre></div>
<p>The key issue is then to define <code>Question</code> in such a way that it allows us to work with current (and future) question’s types in a uniform way.</p>
<h1 id="using-existential-type">Using Existential type</h1>
<p>A very simple solution would be to wrap each possible type in a specialized constructor, which in essence amounts to <em>tag</em> each possible <code>Question</code> with its type:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Question</span> <span class="fu">=</span> 
    <span class="dt">MCQ</span> <span class="dt">MCQuestion</span>
  <span class="fu">|</span> <span class="dt">Open</span> <span class="dt">OpenQuestion</span>
  <span class="fu">|</span> <span class="dt">Rating</span> <span class="dt">RatingQuestion</span></code></pre></div>
<p>This solution, while simple to use as it is amenable to direct pattern-matching, suffers from an obvious drawback: It closes the range of available types of questions, or rather makes it difficult to add a new one.</p>
<p>Given that each type of question is assumed to be an instance of the <code>Questionnable</code> interface, we can wrap them using existential quantification in the type <code>Question</code>, using one of the two available syntaxes. The classic data type declaration syntax:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Question</span> <span class="fu">=</span>
  forall q <span class="fu">.</span> <span class="dt">Questionable</span> q <span class="ot">=&gt;</span> <span class="dt">Question</span> q</code></pre></div>
<p>or the GADT-style syntax which explicitly exposes the constructor <code>Question</code> as a function</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Question</span> <span class="kw">where</span>
  <span class="dt">Question</span><span class="ot"> ::</span> <span class="dt">Questionable</span> q <span class="ot">=&gt;</span> q <span class="ot">-&gt;</span> <span class="dt">Question</span></code></pre></div>
<p>The effect of an existential type construction is to limit the scope of the type variable <code>q</code> appearing in the constructor, thus in effect ensuring the question itself, whatever its type, must stay within the scope of its appearance. For example, while it is possible to pattern match on <code>Question</code> to get whatever <code>q</code> is packed inside it, this <code>q</code> cannot be returned. Writing</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">getQ (<span class="dt">Question</span> question _) <span class="fu">=</span> question</code></pre></div>
<p>yields the following, somewhat dreadful, compiler error:</p>
<pre><code>error:
    • Couldn&#39;t match expected type ‘t’ with actual type ‘q’
        because type variable ‘q’ would escape its scope
      This (rigid, skolem) type variable is bound by
        a pattern with constructor:
          Question :: forall q.
                      Questionable q =&gt;
                      q -&gt; Question,
        in an equation for ‘getQ’
        at /Users/arnaud/projects/xxi-typed/haskell/.stack-work/intero/intero2342CZJ.hs:11:7-18
    • In the expression: question
      In an equation for ‘getQ’: getQ (Question question) = question
    • Relevant bindings include
        question :: q
          (bound at /Users/arnaud/projects/xxi-typed/haskell/.stack-work/intero/intero2342CZJ.hs:11:16)
        getQ :: Question -&gt; t
          (bound at /Users/arnaud/projects/xxi-typed/haskell/.stack-work/intero/intero2342CZJ.hs:11:1)</code></pre>
<p>This is so because the type of the result <code>question</code> being <code>question :: q</code> implies that the type variable <code>q</code> becomes <em>free</em> in any context where <code>getQ</code> is used: It escapes the scope of the constructor.</p>
<p>Interestingly, the <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#lexically-scoped-type-variables">ScopedTypeVariables</a> GHC extension gives us the capability to use that <code>q</code>. We can write the following (somewhat contrived) function:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">slug (<span class="dt">Question</span> (<span class="ot">quest ::</span> q) _) <span class="fu">=</span> slugify quest
  <span class="kw">where</span>
<span class="ot">    slugify ::</span> q <span class="ot">-&gt;</span> <span class="dt">Text</span>
    slugify <span class="fu">=</span> T.take <span class="dv">3</span> <span class="fu">.</span> question</code></pre></div>
<p>In the type of <code>slugify</code> we are not forced to expose the constraint <code>Questionable q</code> because the type variable <code>q</code> at this point is the one brought in scope with the expression <code>q :: q</code>.</p>
<h1 id="understanding-existential-types">Understanding Existential Types</h1>
<p>What’s somewhat confusing for the average programmer who has not had a PhD in type theory is: Why are those types called <em>existential</em>? Especially given the fact they are introduced by <code>forall</code> keyword? <a href="http://stackoverflow.com/questions/10753073/whats-the-theoretical-basis-for-existential-types">This StackOverflow</a> does a great job at explaining how (intuitionistic) logic rules relate <span class="math inline">∀</span> and <span class="math inline">∃</span> quantifiers in the case of type constructors.</p>
<p>In short, it comes from the fact that <br /><span class="math display">∀<em>x</em>.<em>Q</em>(<em>x</em>)⟹<em>P</em> = (∃<em>x</em>.<em>Q</em>(<em>x</em>)) ⟹ <em>P</em>.</span><br /></p>
<h1 id="references">References</h1>
<p>There are already a number of resources on the topic:</p>
<ul>
<li>Roman Cheplyaka’s <a href="https://ocharles.org.uk/blog/guest-posts/2014-12-19-existential-quantification.html">24 Days of GHC Extensions</a> does a great job at explaining how existentials work in Haskell</li>
<li>Benjamin Pierce’s <a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> has chapter 24 dedicated to the subject of existential types, whose main application is the modelling of object-oriented programming</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#existentially-quantified-data-constructors">GHC manual</a> of course, gives the fine prints</li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 12</title>
    <link href="http://abailly.github.io/posts/weekly-review-12.html" />
    <id>http://abailly.github.io/posts/weekly-review-12.html</id>
    <published>2017-03-28T00:00:00Z</published>
    <updated>2017-03-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 12</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on March 28, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="http://www.grammaticalframework.org/">Grammatical Framework</a></dt>
<dd><p>A fascinating piece of work whose purpose is to provide a way to define unified grammars that can be “linearized” into different languages for the purpose of both parsing and text generation.</p>
</dd>
<dt><a href="https://korewanetadesu.com/emacs-on-os-x.html">Emacs Daemon on Mac OS X</a></dt>
<dd><p>Configuration for running Emacs in server mode which is useful for fast editing of files from the command-line: Run <code>emacsclient foo.txt&amp;</code> and the file’s content is displayed in a buffer in emacs.</p>
</dd>
<dt><a href="https://en.wikipedia.org/wiki/Axel_Honneth">La lutte pour la reconnaissance</a></dt>
<dd><p>Finished reading this book from Axel Honneth, a German philosopher heir to the Frankfurt School. Worthy of some extended blog post…</p>
</dd>
<dt><a href="https://addons.mozilla.org/fr/firefox/addon/org-mode-capture/">Capture org-mode links in Firefox</a></dt>
<dd><p>A nice utility to quickly capture links in Firefox and add them to Emacs’ org-mode</p>
</dd>
<dt><a href="https://github.com/cantino/huginn">Huggin</a></dt>
<dd><p>A tool in Rails to create and manage agents on a personal server, something I have been thinking to setup for a while.</p>
</dd>
<dt><a href="https://syncthing.net/">Syncthing</a></dt>
<dd><p>Open-source system to synchronize several devices</p>
</dd>
<dt><a href="https://vimeo.com/162036084">Types + Properties = Software - Mark Seemann on Vimeo</a></dt>
<dd><p>While working on my talk for <a href="https://www.meetup.com/fr-FR/Crafting-Software/events/238241119/">Crafting Software</a> meetup, I discovered previous work from Mark Seeman in the same vein. There is a whole blog post series on <a href="http://blog.ploeh.dk/2016/02/10/types-properties-software/">Types + Properties = Software</a> which is definitely interesting. Inspired <a href="http://mirrors.link/posts/the-polyglot-approach-to-modeling-state-and-property-tests-in-elm">The Polyglot Approach to Getting Better at Modeling the State and Writing Property Tests in Elm · Exceptional Mirrors</a> written in Elm.</p>
</dd>
<dt><a href="https://www.stackbuilders.com/news/reverse-reverse-theorem-proving-with-idris">Reverse, Reverse: Theorem Proving with Idris</a></dt>
<dd><p>A blog post on how theorem proving works in Elm, detailing the classical vector reversal function’s derivation.</p>
</dd>
<dt><a href="https://www.cs.ox.ac.uk/projects/utgp/school/idris-tutorial.pdf">idris-tutorial.pdf</a></dt>
<dd><p>A short tutorial on Idris by Edwin Brady. Not sure how relevant it is to the newest versions of the language, but provides a compact overview of Idris’ features.</p>
</dd>
<dt><a href="http://www.cse.chalmers.se/~ulfn/papers/afp08/tutorial.pdf">Agda Tutorial</a></dt>
<dd><p>Working on Idris led me to <a href="http://wiki.portal.chalmers.se/agda/pmwiki.php">Agda</a> which is a predecessor of Idris with an emphasis on theorem proving.</p>
</dd>
<dt><a href="http://stackoverflow.com/questions/42974540/how-can-i-express-range-validity-in-idris">How can I express range validity in Idris?</a></dt>
<dd><p>As I was struggling on writing some Idris code for my talk, I posted this question on SO which leads to a Ah!Ah! moment thanks to the answer it received: The slogan is <em>Add more information to your types</em>!</p>
</dd>
<dt><a href="https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ttfp.pdf">Type Theory and Functional Programming</a></dt>
<dd><p>An out-of-print book by Simon Thompson (author of one of the first Haskell books) that seems to provide a lot of insights on top of Pierce’s classical textbook.</p>
</dd>
<dt><a href="http://oxij.org/note/BrutalDepTypes/">Brutal {Meta}Introduction to Dependent Types in Agda</a></dt>
<dd><p>A page full of resources on dependent types, not only in Agda. Lead me to <a href="http://augustss.blogspot.fr/2007/10/simpler-easier-in-recent-paper-simply.html">this post</a> from Lennart Augustsson which gives an implementation of a depedently-typed lambda calculus in Haskell.</p>
</dd>
<dt><a href="https://medium.com/wardleymaps/finding-a-path-cdb1249078c0#.32oohi27s">Wardley Maps</a></dt>
<dd><p>I have started again to read Simon Wardley’s book-in-progress on how to draw maps for strategic thinking.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Les après-midi de Simone</title>
    <link href="http://abailly.github.io/posts/simone-responsabilite.html" />
    <id>http://abailly.github.io/posts/simone-responsabilite.html</id>
    <published>2017-03-27T00:00:00Z</published>
    <updated>2017-03-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Les après-midi de Simone</h1>

  <h2 class="subtitle">Celui qui appuie sur le bouton est-il le seul coupable ?</h2>

<div class="info">Posted on March 27, 2017</div>

<p>Cette question des après-midi de Simone fait partie du <em>fil vert</em> soit des séances permettant d’articuler des questions philosophiques avec le context professionnel des participants, majoritairement programmeur/euse/s. Elle conjoint deux problèmes philosophiques, celui de <strong>l’action</strong> et celui de la <strong>culpabilité</strong> ou <strong>responsabilité</strong>. La séance s’organise en:</p>
<ul>
<li>une introduction pour décortiquer la question, en extraire son suc et sa moelle ;</li>
<li>une première séquence consacrée au thème de l’action ;</li>
<li>une deuxième pour la culpabilité et la responsabilité ;</li>
<li>une troisième pour inviter à actualiser ces thèmes dans notre vie ;</li>
<li>enfin, bien sûr une clôture du cercle par l’écoute.</li>
</ul>
<p>Ce texte faiblement structuré est une reprise des notes prises au cours de cet après-midi.</p>
<h1 id="introduction">Introduction</h1>
<ul>
<li>La première partie de la question renvoit à la notion d’<em>agent</em> ou de <em>sujet</em>, à la condition de responsabilité d’un <em>geste</em> dont les effets sont <em>imputables</em></li>
<li>Elle suscite des images liées à la bombe nucléaire, à un acte technologiquement médiatisé qui est le dernier terme d’une chaîne causale <em>avant</em> que ne se produisent des effets</li>
<li>L’agent n’est-il qu’un <em>rouage</em> dans un ensemble dont le geste extrêmement simple produit de grands effets ?</li>
<li>Se pose la question de <em>l’intentionalité</em> de l’action : qu’est ce qu’une action intentionelle ?</li>
<li>“seul” pose la question de l’existence (ou non) d’une action collective, de la multiplicité des agents dans une action</li>
<li>“coupable” enfin: y-a-t’il une faute et est-elle attribuable au sujet ? De quoi est-il coupable ? Devant quel tribunal ? Et qui est coupable ?</li>
</ul>
<h1 id="laction">L’action</h1>
<h2 id="exercice">Exercice</h2>
<p>Essayer de s’approcher au plus près du sens d’un terme en:</p>
<ol style="list-style-type: decimal">
<li>énumérant des adjectifs et adverbes pouvant s’appliquer à ce terme</li>
<li>pour chaque item de l’énumération identifier son contraire</li>
<li>produire une définition à partir des items dont un seul pôle est applicable</li>
</ol>
<ul>
<li>collective <span class="math inline">≠</span> individuelle</li>
<li>concertée <span class="math inline">≠</span> spontanée</li>
<li>rapide, qui <span class="math inline">≠</span> dure lente</li>
<li>dangereuse <span class="math inline">≠</span> inoffensive</li>
<li>en mouvement <span class="math inline">≠</span> immobile</li>
<li>continue <span class="math inline">≠</span> discrète</li>
<li>sans conséquence <span class="math inline">≠</span> importante</li>
<li>consomme de l’énergie <span class="math inline">≠</span> inerte</li>
<li>délibérée <span class="math inline">≠</span> involontaire</li>
<li>matérielle <span class="math inline">≠</span> immatérielle, spirituelle</li>
<li>observable <span class="math inline">≠</span> invisible</li>
<li>qui a un début, initiée</li>
<li>qui laisse des traces <span class="math inline">≠</span> sans effet</li>
<li>irréversible <span class="math inline">≠</span> réversible</li>
<li>qui a un sujet <span class="math inline">≠</span> sans agent</li>
<li>raisonnable <span class="math inline">≠</span> déraisonnable</li>
<li>concrète <span class="math inline">≠</span> abstraite, virtuelle</li>
<li>directe <span class="math inline">≠</span> médiatisée</li>
<li>impure <span class="math inline">≠</span> pure</li>
<li>positive <span class="math inline">≠</span> négative</li>
<li>insaissable <span class="math inline">≠</span> saisissable</li>
<li>possible <span class="math inline">≠</span> impossible</li>
<li>subie <span class="math inline">≠</span> acceptée</li>
<li>orientée vers une fin <span class="math inline">≠</span> sans objectif, gratuite</li>
<li>revendiquée <span class="math inline">≠</span> déniée, cachée, anonyme</li>
</ul>
<blockquote>
<p>Une action est un mouvement initié par un sujet qui produit des traces dans le réel</p>
</blockquote>
<h2 id="textes">Textes</h2>
<h3 id="aristote">Aristote</h3>
<ul>
<li>Dans <a href="https://fr.wikipedia.org/wiki/%C3%89thique_%C3%A0_Nicomaque">L’éthique à Nicomaque</a>, Aristote distingue parmi l’ensemble des activités humaines la <em>poein</em> de la <em>praxein</em>. Ces activités s’opposent à la <em>contemplation</em>, à la <em>théorie</em></li>
<li><em>poein</em> regroupe les activités de production de l’homme dont notamment les arts et la technique, des activités qui ont une <em>fin en dehors d’elle même</em>. Je peins pour produire une oeuvre d’art, j’écris pour produire un livre ou un article, je coud pour réaliser une vêtement…</li>
<li>a contrario, <em>praxein</em> groupe les activités et actions humaines qui <em>sont à elles mêmes leurs propres fins</em><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, parmi lesquelles on distingue les actions
<ul>
<li>intentionnelles</li>
<li>non intentionnelles</li>
</ul></li>
<li>cette distinction permet à Aristote de définir le souverain Bien commme l’accomplissement par l’hômme <em>d’actions vertueuses</em><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a></li>
</ul>
<h3 id="wittgenstein">Wittgenstein</h3>
<ul>
<li><p>Dans les <a href="https://fr.wikipedia.org/wiki/Investigations_philosophiques">Recherches philosophiques</a>, §621, Wittgenstein dit:<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a></p>
<blockquote>
<p>N’oublions pas ceci: lorsque “je lève mon bras”, mon bras se lève. Et le problème surgit : que reste-t-il si je soustrais le fait que mon bras se lève du fait que je lève le bras ?</p>
</blockquote></li>
<li>Il critique l’idée que l’action est le produit d’une décision et pose donc la question “qu’est ce que l’intention ?” Y-a-t’il quelque chose comme un processus par lequel “je lève le bras” serait une décision qui se transforme en une action de “mon bras qui se lève” ?</li>
<li>Il n’y a pas d’intention extérieure à l’action ou en d’autres termes il n’y a pas <em>d’intériorité</em> ou <em>d’antériorité</em> de quelque chose qui serait la volonté : l’intention <strong>c’est</strong> l’action</li>
<li>C’est tout le propos de la philosophie analytique qui nait avec Wittgenstein<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a> que de chercher des critères qui soient uniquement linguistiques dans la compréhension du sens de nos énoncés</li>
<li>Elle s’appuie et réactualise Aristote qui distingue<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a> les actions volontaires des actions volontaires:
<ul>
<li>les premières, dites aussi intentionnelles, ont leur principe dans l’agent qui connait les circonstances de son action. Elles sont issues d’une délibération, d’une pensée mais ne postulent pas l’existence d’un centre de la volonté <em>dans</em> l’agent. La décision, c’est l’action</li>
<li>les secondes sont toutes les actions faites par <em>ignorance</em> (des circonstances…) ou par une contrainte extérieure</li>
<li>il y a une distinction entre appuyer sur le bouton avec mon doigt <em>intentionnellement</em> et appuyer sur le bouton parce que je suis désequilibré et tombe dessus</li>
</ul></li>
<li><p>Elle s’oppose à une tradition classique qui à partir de Saint Augustin (entre autres) pose le <em>libre arbitre</em> comme un concept central de l’esprit : une action volontaire est issue d’une libre décision de ma <strong>volonté</strong> qui a une existence propre, qui est interne : c’est le résultat extérieur d’une délibération intérieure. Spinoza, Hume, Hobbes et Nietszche sont les principaux champions de l’absence de libre arbitre</p></li>
</ul>
<h3 id="anscombe">Anscombe</h3>
<ul>
<li>Nous travaillons à partir d’une texte d’<a href="https://en.wikipedia.org/wiki/Elizabeth_Anscombe">Anscombe</a> qui propose plusieurs descriptions d’une même situation (et de ses conséquences) afin d’élucider la question de l’intentionnalité de l’action : un hômme pompe de l’eau contenant du poison pour alimenter une citerne qui dessert une maison dans laquelle sont réunis des dirigeants politiques tyranniques et dont l’élimination ménerait à une société meilleure.</li>
<li>Peut-on décrire son action comme “le geste d’un bras faisant levier”, “l’alimentation en eau”, “un empoisonnement par l’eau” ou “la lutte contre la tyrannie” ?</li>
<li>Anscombe propose ce critère pour caractériser l’intentionnalité d’une action:
<ol style="list-style-type: decimal">
<li>la description de l’action est conforme à la totalité des faits ;</li>
<li>l’agent peut répondre à la question “pourquoi ?” étant donnée cette description des faits.</li>
</ol></li>
<li>Dans le cas décrit, “un empoisonnement par l’eau” répond à ces deux critères mais pas “la lutte contre la tyrannie”<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a></li>
<li>S’inscrivant dans la tradition analytique, Anscombe propose un critère qui soit exclusivement linguistique pour caractériser l’intentionnalité et donc l’assignation en responsabilité pour des actions puisqu’on ne saurait dire qu’un agent est <em>coupable</em> pour une action non intentionnelle</li>
</ul>
<h1 id="la-culpabilité">La culpabilité</h1>
<h2 id="arendt">Arendt</h2>
<ul>
<li><a href="https://fr.wikipedia.org/wiki/Hannah_Arendt">Arendt</a> dans <em>La responsabilité collective</em> distingue très nettement la <em>culpabilité</em> de la <em>responsabilité</em></li>
<li>La culpabilité est nécessairement <em>individuelle</em> et identifie une action (ou un ensemble d’actions liéeS) qui est <em>jugée</em> comme <em>faute</em>. La culpabilité est de l’ordre du juridique, de la loi</li>
<li>La responsabilité peut être <em>collective</em> car elle est politique, de l’ordre de la morale (nous pouvons collectivement “répondre de”). Elle renvoit à l’identification que fait Kant de la morale et de la liberté : je suis moral parce libre, et libre parce que capable d’un jugement moral universel. Même des menaces de mort ne peuvent me libérer de mon devoir moral !</li>
<li>Dire que “nous sommes tous coupables” c’est donc confondre - volontairement ou non - ces deux notions et disculper les vrais coupables, ceux qui ont effectivement agis : diluer la faute juridique et la sanction dans le confort de la morale</li>
</ul>
<h2 id="lhomme-coupable">L’homme coupable</h2>
<ul>
<li><p>Nous distinguons quatre “courants” dans la notion de culpabilité:</p>
<dl>
<dt>Juridique (et morale ?)</dt>
<dd><p>l’on est coupable de ce que l’on <em>fait</em>, de ses <em>actes</em> en fonction d’un ensemble de règles en vigueur à une époque donnée<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a></p>
</dd>
<dt>Anthropologique</dt>
<dd><p>l’homme est ontologiquement coupable, parce qu’il est un homme. Cette définition est centrale dans la tradition chrétienne<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a> : l’homme a fait une faute et a été chassé du paradis, il est imparfait et pécheur par nature et seul Dieu qui lui est parfait, par sa grâce, peut le racheter. La volonté (le libre-arbitre) nous a été donnée par Dieu mais elle se heurte à la finitude des choses ce qui provoque le Mal, l’erreur et le péché.<a href="#fn9" class="footnoteRef" id="fnref9"><sup>9</sup></a> Pour <a href="https://plato.stanford.edu/entries/rousseau/">Rousseau</a>, il y a aussi péché originel mais il survient lorsque l’homme sort de l’état de Nature où aucune culpabilité n’a de sens pour entrer dans la société et la propriété</p>
</dd>
<dt>Sociale</dt>
<dd><p>Cette culpabilité Rousseauiste est reprise par <a href="https://plato.stanford.edu/entries/nietzsche/">Nietszche</a> (<em>Généalogie de la morale</em>) dans un sens plus social, lorsqu’il fait le lien entre la <em>dette</em> et le <em>devoir</em> qui mène à la faute et à la culpabilité. La culpabilité est ainsi une spiritualisation d’une situation de dépendance économique, la transformation d’une dépendance contingente résultant d’un rapport de force ou d’une condition sociale en une dépendance nécessaire envers un principe moral</p>
</dd>
<dt>Monstrueuse</dt>
<dd><p>Cette quatrième forme de culpabilité est définie par <a href="https://fr.wikipedia.org/wiki/G%C3%BCnther_Anders">Anders</a> et résulte de sa réflexion sur ce qu’on appelle désormais l’anthropocène et l’accélération vertigineuse des capacités techniques de l’homme.</p>
</dd>
</dl></li>
</ul>
<h2 id="anders">Anders</h2>
<ul>
<li>Pour Anders dans <a href="http://www.payot-rivages.net/livre_Nous-fils-d-Eichmann-Gunther-Anders_ean13_9782743611095.html">Nous, fils d’Eichmann</a>, la culpabilité moderne provient de:
<ol style="list-style-type: decimal">
<li>notre incapacité à nous représenter les effets de nos actions dans le monde : lorsque j’appuie sur le bouton qui largue Little Boy au dessus d’Hiroshima je ne suis pas capable de me représenter les effets dévastateurs d’une bombe nucléaire et ses centaines de milliers de victimes touchées sur des dizaines d’années</li>
<li>la médiatisation infinie née de la division du travail et de la complexité des processus de production et de décision</li>
</ol></li>
<li>Ces deux causes produisent du <em>monstrueux</em> : des hommes ayant perdu tout sentiment de responsabilité, incapable de se représenter les effets de leurs actions et totalement coupés d’iceux par la parcellisation des actes en viennent à faire des choses monstrueuses : faire rouler des trains remplis de juifs, construire des fours crématoires pour brûler leurs corps, construires des missiles balistiques intercontinentaux<a href="#fn10" class="footnoteRef" id="fnref10"><sup>10</sup></a>…</li>
<li>Certains hommes ayant participé à cette monstruosité perçoivent leur culpabilité profondément mais la société leur dénie tout jugement parce qu’elle ne peut l’accepter sans se remettre en cause : c’est le cas de Claude Eatherly qui pilotait l’avion au dessus d’Hiroshima et avec lequel Anders a correspondu. C’est une forme de culpabilité “saine”, une réaction normale à une situation anormale.</li>
<li>A contrario, la plupart des hommes fuient cette culpabilité dans le déni, l’ignorance volontaire, l’impuissance ou même la dépression existentielle</li>
<li><p>Anders propose une “procédure” simple et éclairante pour identifier des situations de type “eichmanniennes”:</p>
<blockquote>
<p>Je ne peux imaginer l’effet de cette action Donc, c’est un effet monstrueux Donc, je ne peux pas l’assumer Donc, je dois réexaminer l’action projetée, ou bien la refuser, ou bien la combattre</p>
</blockquote></li>
</ul>
<h1 id="cultiver-le-sentiment-de-responsabilité">Cultiver le sentiment de responsabilité</h1>
<ul>
<li>La dernière étape du voyage prend la forme d’un exercice nous permettant d’ancrer les réflexions de l’après-midi dans la pratique et le “quotidien” : proposer un critère de démarcation entre la <em>peur salutaire</em>, celle qui représente un atout essentiel à notre survie ; et la <em>peur aliénante</em>, celle qui est agitée par les démagogues, nous paralyse ou nous enclin à des actions monstrueuses.</li>
<li>Plusieurs critères sont proposés:
<ul>
<li>la peur de perdre quelque chose (aliénante) <span class="math inline">≠</span> la peur d’être jugé (libératrice)</li>
<li>la fréquence et/ou la proximité de la source de peurs</li>
<li>les peurs primaires, régressives (aliénantes) <span class="math inline">≠</span> les peurs causées par des valeurs morales</li>
<li>le degré de médiatisation entre nous et la source de notre peur (aliénant quand il augmente)</li>
<li>la connaissance et la compréhension de la cause de notre peur<a href="#fn11" class="footnoteRef" id="fnref11"><sup>11</sup></a></li>
</ul></li>
<li><p>Pour une fin elliptique, une citation de Wittgenstein:</p>
<blockquote>
<p>Je provoque la volonté de nager en me jettant à l’eau</p>
<p>Recherches Philosophiques, §613</p>
</blockquote></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<ul>
<li>L’après-midi se conclut par un tour de parole</li>
<li>J’ai pour ma part vécu une expérience très riche et en suis content. J’ai apprécié le rythme, soutenu, l’érudition de Peggy Avez, les exercices nous invitant à réfléchir et puiser dans notre pratique et notre propre réflexion, les perspectives ouvertes sur des auteurs connus mais mal compris (Wittgenstein, Anders), peu connus (Aristote, Arendt) ou nouveaux (Anscombe).</li>
<li>Sur le plan pratique, je retiens la “procédure d’Anders” comme une nouvelle heuristique puissante pour s’orienter dans un monde de plus en plus complexe</li>
</ul>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>J’ai plus de mal à produire des exemples qui soient à mes yeux convaincants, cette distinction me paraissant assez largement artificielle et dépassée<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Ceci semble entrer en contradiction avec d’autres parties de l’oeuvre du stagirite pour lesquelles le souverain bien est dans la contemplation, la théorie…<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>On notera le contraste entre la simplicité de l’énonciation et la complexité des questions qu’elle soulève<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Plus précisèment avec le <em>second</em> Wittgenstein, celui des <em>Recherches philosophiques</em> et pas celui du <em>Tractatus logico-philosophicus</em><a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>L’éthique à Nicomaque, livre 3<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>J’avoue ma perplexité en relisant ces notes…<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>Il me semble que l’on passe là un peu vite sur la distinction entre droit et morale : un planteur de Louisiane est-il coupable de tuer un esclave en 1840 ? Et un romain en -50 ? Que dire du frère d’une jeune fille qui la tue parce qu’elle a “fauté” avec un garçon ?<a href="#fnref7">↩</a></p></li>
<li id="fn8"><p>Plus largement, juive et musulmane aussi ?<a href="#fnref8">↩</a></p></li>
<li id="fn9"><p>Dans cette tradition, la culpabilité à pour vocation d’expliquer le Mal en disculpant Dieu<a href="#fnref9">↩</a></p></li>
<li id="fn10"><p>Des centrales nucléaires ?<a href="#fnref10">↩</a></p></li>
<li id="fn11"><p>voir ce que dit Spinoza des affects et en particulier du traitement de la <a href="http://spinoza.fr/lecture-des-propositions-xxxix-a-xliv-du-de-affectibus/">peur</a> comme commencement de la raison<a href="#fnref11">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
