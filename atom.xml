<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2017-09-25T00:00:00Z</updated>
    <entry>
    <title>Weekly Review - Week 39</title>
    <link href="http://abailly.github.io/posts/weekly-review-39.html" />
    <id>http://abailly.github.io/posts/weekly-review-39.html</id>
    <published>2017-09-25T00:00:00Z</published>
    <updated>2017-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 39</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 25, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Another great read from TMP, this time about the low-level <em>lingua franca</em> of browser-based computations. Lead me to also read <a href="http://languagengine.co/blog/differentiating-functional-programs/">languagengine - Blog - Differentiating Functional Programs</a> and the original specification: <a href="https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf">spec/pldi2017.pdf at master · WebAssembly/spec</a></p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/">To type or not to type: quantifying detectable bugs in JavaScript | the morning paper</a></dt>
<dd><p>Can static typing helps in getting rid of bugs? This paper provides a resounding <em>Yes!</em> answer.</p>
</dd>
<dt><a href="http://matt.might.net/papers/might2011derivatives.pdf">Parsing with Derivatives</a></dt>
<dd><p>One thing that always amazes me is how seemingly unrelated concepts of mathematics have deep and useful practical applications to computing. This paper shows how to apply the notion of <em>derivatives</em> of a function to generate parsers for context-free grammars, following a technique pioneered by Brzozowski in <a href="http://maveric.uwaterloo.ca/reports/1964_JACM_Brzozowski.pdf">Derivatives of Regular Expressions</a>.</p>
</dd>
<dt><a href="https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf">Totally Free</a></dt>
<dd><p>I am deeply indebted to my co-worker Alex Babkin for pointing me at this paper that links in very interesting ways to a lot of work I have been doing in the past with <em>Free monads</em> and <em>Effects</em>. I have translated the Agda code to Haskell and this helped me see the similarities between the <code>General</code> type McBride introduces and the various constructions for Free monads, notably exposed by Ed Kmett in a <a href="http://comonad.com/reader/2011/free-monads-for-less/">series of blog post</a>.</p>
</dd>
<dt><a href="https://www.linkedin.com/pulse/id-known-what-we-were-starting-ray-dillinger">If I’d Known What We Were Starting | Ray Dillinger | Pulse | LinkedIn</a></dt>
<dd><p>“ICOs are a scam” says one of the original inventor and developer of Bitcoin. Interesting insights into the chaotic history of the “blockchain”…</p>
</dd>
<dt><a href="http://www.cs.nott.ac.uk/~psztxa/publ/ydtm.pdf">Why Dependent Types Matter</a></dt>
<dd><p>An already old but nevertheless interesting paper advocating for the use of dependent types in mainstream programming languages. My first exposure to the <a href="https://github.com/mietek/epigram2">Epigram</a> programming language on which Edwin Brady worked before developing <a href="https://www.idris-lang.org/">Idris</a>.</p>
</dd>
<dt><a href="https://github.com/confluentinc/ducktape">confluentinc/ducktape: System integration and performance tests</a></dt>
<dd><p>A framework for testing microservices and distributed systems</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 38</title>
    <link href="http://abailly.github.io/posts/weekly-review-38.html" />
    <id>http://abailly.github.io/posts/weekly-review-38.html</id>
    <published>2017-09-18T00:00:00Z</published>
    <updated>2017-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 38</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 18, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://vadosware.io/post/static-binaries-for-haskell-a-convoluted-approach/">Static Binaries for Haskell: A Convoluted Approach</a></dt>
<dd><p>When trying to build minimal docker images, having a statically linked binary is a plus. This is actually quite hard to realize in practice with GHC as this post demonstrates (note that I tried the suggested approach and failed…)</p>
</dd>
<dt><a href="http://graydon2.dreamwidth.org/253769.html">graydon2 | “What next?”</a></dt>
<dd><p>Interesting and opinionated post on <em>what’s next</em> in Programming languages, e.g. which features from PLT will reach mainstream. First-class modules done right is definitely something we are direly in need for!</p>
</dd>
<dt><a href="http://slatestarcodex.com/2017/09/05/book-review-surfing-uncertainty/">Book Review: Surfing Uncertainty | Slate Star Codex</a></dt>
<dd><p>A long book review on cognition and how our brain copes with uncertain, partial or plain wrong data.</p>
</dd>
<dt><a href="https://github.com/adericbourg/coreprotocols-fr">Les Protocoles Fondamentaux</a></dt>
<dd><p>French translation of Michelle and Jim McCarthy’s <a href="">Core Protocols</a>, using <a href="https://github.com/rkasper/coreprotocols">The Core Protocols: A Guide to Greatness</a> dfrom Richard Kasperowski as main source.</p>
</dd>
<dt><a href="https://filecoin.io/filecoin.pdf">FileCoin</a></dt>
<dd><p>A <em>cryptocurrency</em> providing blockchain-based file-system</p>
</dd>
<dt><a href="http://hackage.haskell.org/package/testing-feat">testing-feat: Functional Enumeration of Algebraic Types</a></dt>
<dd><p>A Haskell package to enumerate inhabitants of any ADT, useful for systematic testing of data types.</p>
</dd>
<dt><a href="http://www.samcoope.com/posts/deep_code_generation">Sam Coope - Blog</a></dt>
<dd><p>Looks fun! Did not read the full thesis though…</p>
</dd>
<dt><a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">PragPub January 2012 | Unit Tests Are FIRST | The Pragmatic Bookshelf</a></dt>
<dd><p>A gentle reminder about the properties that a proper unit test should exhibit: Fast, Isolated, Repeatable, Self-Verifying, and Timely</p>
</dd>
<dt><a href="https://www.tezos.com/">Tezos Crowdfunding</a></dt>
<dd><p>Tezos is a smart contracts platform that aims at offering a self-governing network. I read the <a href="https://www.tezos.com/static/papers/white_paper.pdf">language white paper</a> which interestingly draws ideas from Forth: The Tezos language is a typed stack-based language. Although of note is the fact the reference implementation is in OCaml.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Speaking of languages, WebAssembly aims at providing a more solid foundation than Javascript as a the lingua franca for executing arbitrary code in browsers.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 36</title>
    <link href="http://abailly.github.io/posts/weekly-review-36.html" />
    <id>http://abailly.github.io/posts/weekly-review-36.html</id>
    <published>2017-09-04T00:00:00Z</published>
    <updated>2017-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 36</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September  4, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://github.com/solo-io/squash">solo-io/squash: The debugger for microservices</a></dt>
<dd><p>A tool to coordinate debugging of a bunch of processes running inside docker containers. Only for gdb and dlv based programs with VS Code editor</p>
</dd>
<dt><a href="https://github.com/jrclogic/smcdel">jrclogic/SMCDEL: A symbolic model checker for Dynamic Epistemic Logic.</a></dt>
<dd><p>I have been fascinated by model-checking and non standard logics since I discovered this in 2000. Too bad I never invested the time to genuinely master that field. Looks like past years have seen much advance in the field and this MC for epistemic logic interested me because it’s written in Haskell and implements BDD, something I might need for work I am currently doing on distributed systems testing.</p>
</dd>
<dt><a href="https://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html">apfelmus - Reasoning about space leaks with space invariants</a></dt>
<dd><p>Thanks to my coworker <a href="https://www.linkedin.com/in/alexbabkin/">Alex Babkin</a> for this post. It helped me get a deeper understanding of laziness and space-time tradeoffs in Haskell.</p>
</dd>
<dt><a href="https://ocharles.org.uk/blog/posts/2016-01-26-transformers-free-monads-mtl-laws.html">Monad transformers, free monads, mtl, laws and a new approach</a></dt>
<dd><p>An interesting approach to offer the best of both free monads/effects and monad transformers. Materialized in the <a href="https://ocharles.org.uk/blog/posts/2016-04-23-transformers-eff.html">transformers-eff</a> package</p>
</dd>
<dt><a href="http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf">Asymptotic Improvement Of Computations Over Free Monads</a></dt>
<dd><p>An important stop in my journey towards better understanding of free monads.</p>
</dd>
<dt><a href="http://homepages.inf.ed.ac.uk/slindley/papers/handlers.pdf">Handlers in action</a></dt>
<dd><p>An alternative approach to composable effects and transformers, based on a custom DSL for expressing effects. Uses TH’s quasi-quoters which I am not a big fan of…</p>
</dd>
<dt><a href="http://okmij.org/ftp/Haskell/extensible/param-eff.pdf">Parameterized Effects</a></dt>
<dd><p>Follow-up over <em>extensible effects</em> paper taking into account parametric monads. The goal is to be able to embed and check state transitions at the type level making it impossible to write things like reading a file before opening it</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/30/a-concurrent-perspective-on-smart-contracts/">A concurrent perspective on smart contracts | the morning paper</a></dt>
<dd><p>This week’s TMP was dedicated to a series of papers on Smart Contracts, a subject I have a keen interest in given that I am currently working for a company developing a platform for Smart Contracts! Also of interest is <a href="https://blog.acolyer.org/2017/08/31/adding-concurrency-to-smart-contracts/">Adding concurrency to smart contracts</a> and <a href="https://blog.acolyer.org/2017/09/01/step-by-step-towards-creating-a-safe-smart-contract-lessons-from-a-cryptocurrency-lab/">Step by step towards creating a safe smart contract: lessons from a cryptocurrency lab | the morning paper</a></p>
</dd>
<dt><a href="http://why3.lri.fr/">Why3</a></dt>
<dd><p>A platform for theorem-prover-based program verification providing a “front-end” on top of 2 dozens theorem proving tools, including Coq.</p>
</dd>
<dt><a href="https://www.tweag.io/posts/2017-08-24-linear-types-packed-data.html">Tweag I/O - Compact normal forms + linear types = efficient network communication</a></dt>
<dd><p>Nice insights on <em>linear types</em> from the people implementing them in GHC. Did I say how cool the people at http://tweag.io were?</p>
</dd>
<dt><a href="https://jship.github.io/posts/2017-08-27-monad-transformer-commutativity.html">jship - Monad Transformer Commutativity</a></dt>
<dd><p>Understanding how to stack your monad transformers</p>
</dd>
<dt><a href="http://idlewords.com/talks/web_design_first_100_years.htm">Web Design - The First 100 Years</a></dt>
<dd><p>Read this great talk thanks to my friend Bernard. Contains some important insights on how much we suck at predicting the future and an implicit call to arms to steer the future of the internet in the <em>right</em> direction</p>
</dd>
<dt><a href="https://github.com/barrucadu/dejafu">barrucadu/dejafu: Systematic concurrency testing meets Haskell.</a></dt>
<dd><p>Discovered this package thanks to Mathieu Boespflug from tweag.io! A great tool to systematically check concurrent programs.</p>
</dd>
<dt><a href="http://reasonablypolymorphic.com/blog/information-effects">Review: Information Effects :: Reasonably Polymorphic</a></dt>
<dd><p>Mind-boggling blog post on how to implement a language to define typed reversible computations in Haskell</p>
</dd>
<dt><a href="http://www.cs.utexas.edu/users/mckinley/papers/bpor-oopsla-2013.pdf">Partial Order Reduction</a></dt>
<dd><p>State explosion is the bane of model-checkers. This paper proposes algorithms (implemented in dejafu) to reduce the number of states to explore based on some notion of <em>equivalence relations</em> between states.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 35</title>
    <link href="http://abailly.github.io/posts/weekly-review-35.html" />
    <id>http://abailly.github.io/posts/weekly-review-35.html</id>
    <published>2017-08-28T00:00:00Z</published>
    <updated>2017-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 35</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on August 28, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://michael.steindorfer.name/publications/phd-thesis-efficient-immutable-collections.pdf">Efficient Immutable Collections</a></dt>
<dd><p>Immutables collections paves the way for efficient program transformations and parallelization, but they might lead to inefficiencies from garbage collection or repeated traversals. This thesis provides techniques to build efficient immutable collections on the JVM.</p>
</dd>
<dt><a href="https://github.com/ipfs/ipfs">GitHub - ipfs/ipfs: IPFS - The Permanent Web</a></dt>
<dd><p>Discovered this fascinating project which is the foundation of numerous other projects, like <a href="https://github.com/whyrusleeping/gx">gx</a> a package management tool.</p>
</dd>
<dt><a href="https://vadosware.io/post/end-to-end-testing-with-hspec-almost/">End To End Testing With Hspec (Almost)</a></dt>
<dd><p>How to (not) use Haskell and Hspec to write end-to-end testing using <a href="http://hackage.haskell.org/package/hspec">hspec</a> and <a href="https://hackage.haskell.org/package/webdriver">hs-webdriver</a>. Looks like recent changes in webdriver broke Haskell’s library…</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/16/interactions-of-individual-and-pair-programmers-with-an-intelligent-tutoring-system-for-computer-science/">Interactions of individual and pair programmers with an intelligent tutoring system for computer science | the morning paper</a></dt>
<dd><p><em>tl;dr</em>: We discovered that while both groups exhibited significant learning gains, pair programmers completed problems more quickly, relied less heavily on system-provided examples, coded more efficiently, and showed higher signs of engagement.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/17/on-the-design-of-distributed-programming-models/">On the design of distributed programming models | the morning paper</a></dt>
<dd><p>Another gem from Adrian Colyer’s treasure trove: What’s needed in languages to fully support distributed systems programming?</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/23/growing-a-protocol/">Growing a protocol | the morning paper</a></dt>
<dd><p>This paper triggered some research on distributed systems testing, along with:</p>
</dd>
</dl>
<ul>
<li><a href="https://blog.acolyer.org/2015/03/26/lineage-driven-fault-injection/">Lineage-driven Fault Injection | the morning paper</a>: Analysing programs execution to inject <em>interesting</em> errors, e.g. ones that have high probability of triggering bugs</li>
<li><a href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-leesatapornwongsa.pdf">SAMC</a>: A tool to drive testing through model-checking with specific techniques to reduce state explosion</li>
<li><a href="https://github.com/osrg/namazu">osrg/namazu: 鯰: Programmable fuzzy scheduler for testing distributed systems</a>: Fuzz testing of distributed systems</li>
<li><a href="http://www.pdl.cmu.edu/dbug/">Parallel Data Lab Project: dbug: Systematic and Scalable Testing of Concurrent Systems</a>: Another model-checking/testing tool interposing itself between processes and OS/libraries to catch system calls and inject errors</li>
<li><a href="http://www.pdl.cmu.edu/PDL-FTP/associated/CMU-PDL-12-101.pdf">Concurrent Systematic Testing at Scale</a>: Paper from the dbug project</li>
<li><a href="http://www.macesystems.org/mace/">The Mace Project | MaceSystems</a>: A language and toolset to design and implement distributed systems</li>
<li><a href="https://infoscience.epfl.ch/record/151495/files/EPFL_TH4858.pdf">LMC</a>: Solves the state explosion problem by analysing and tracking local state instead of the global state</li>
</ul>
<dl>
<dt><a href="https://www.zurich.ibm.com/~cca/papers/pax.pdf">Yet Another Visit to Paxos</a></dt>
<dd><p>One the numerous Paxos papers, this time introducing crash-tolerance and Byzantine failure tolerance. Lead to PBFT-Smart algorithm.</p>
</dd>
<dt><a href="http://www.countingcalculi.com/features/smart_hiring/">Hire Like the Israeli Military</a></dt>
<dd><p>Detailed article on practical application of Daniel Kahneman’s hiring techniques from <a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow">Thinking, Fast and Slow</a>. In the book, Kahneman advocates the use of a simple rating system based on questions to identify observable behaviours of hired persons and objectivize their past experience.</p>
</dd>
<dt><a href="https://stackoverflow.com/questions/10236953/the-pause-monad">haskell - The Pause monad - Stack Overflow</a></dt>
<dd><p>One article from a series I read this weekend trying to acquire a deeper understanding of Free monad construction and how to implement pause/resume on top of Free</p>
</dd>
</dl>
<ul>
<li><a href="https://www.reddit.com/r/haskelltil/comments/4ea7er/coyoneda_is_just_the_free_functor/">Coyoneda is just the Free Functor : haskelltil</a>: <a href="https://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Data-Functor-Coyoneda.html">Coyoneda</a> functor reifies functor application…</li>
<li><a href="http://alpmestan.com/posts/2017-08-17-coyoneda-fmap-fusion.html">From Hask Till Dawn: Coyoneda and fmap fusion</a>: … a technique that can be used to make traversal of functorial structures and repeated fmap applications more efficient</li>
<li><a href="https://elvishjerricco.github.io/2016/04/08/applicative-effects-in-free-monads.html">Applicative Effects in Free Monads</a></li>
<li><a href="http://elvishjerricco.github.io/2016/04/13/more-on-applicative-effects-in-free-monads.html">More on Applicative Effects in Free Monads</a></li>
</ul>
<dl>
<dt><a href="http://comonad.com/reader/2011/free-monads-for-less/">The Comonad.Reader » Free Monads for Less (Part 1 of 3): Codensity</a></dt>
<dd><p>A serie of article from Ed Kmett on the Free monad construction and how to make it more efficient, followed by:</p>
</dd>
</dl>
<ul>
<li><a href="http://comonad.com/reader/2011/free-monads-for-less-2/">The Comonad.Reader » Free Monads for Less (Part 2 of 3): Yoneda</a></li>
<li><a href="http://comonad.com/reader/2011/free-monads-for-less-3/">The Comonad.Reader » Free Monads for Less (Part 3 of 3): Yielding IO</a></li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Notes on Reliability &amp; Maintainability of Haskell Code</title>
    <link href="http://abailly.github.io/posts/haskell-reliability.html" />
    <id>http://abailly.github.io/posts/haskell-reliability.html</id>
    <published>2017-05-24T00:00:00Z</published>
    <updated>2017-05-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Notes on Reliability &amp; Maintainability of Haskell Code</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May 24, 2017</div>

<p>Those notes are my answer to a <a href="https://gist.github.com/heath/858a321b5fc96d3011d9b6ea4fca3cb9">question</a> asked on the <a href="https://elm-lang.slack.com/">Elm Slack</a></p>
<ol style="list-style-type: decimal">
<li>what are some methods you use to maintain a clean codebase?
<ol style="list-style-type: decimal">
<li>basic principles always apply: maintain low-coupling &amp; high-cohesion, separation of concerns</li>
</ol>
in the case of Haskell/FP, coupling across modules happen when one module depends on another module, possibly on details of data types (e.g. constructors) of this module. Even depending on exported types/functions introduces coupling. Modules should be as much self contained as possible
<ol start="2" style="list-style-type: decimal">
<li>clear separation between functional components of the system, each being vertically integrated instead of spread out over multiple technical layers</li>
</ol>
<p>By “vertically” I mean that a unit of deployment is a “function” of the system, something that’s meaningful from the point of view of the end-user/customer/business, e.g. a <em>bounded context</em> in the sense of Domain-Driven Design. This is opposed to a more technical view where units of deployment/organisation of the code are “horizontal” layers, e.g. Web service, applicative components, data access layer,…</p>
<ol start="3" style="list-style-type: decimal">
<li>minimal code sharing, limited to common types. Use common/standard libraries wherever possible, pack common dependencies as libraries</li>
</ol>
<p>Rather than depending on code at source level, depend on it at binary level, e.g. as a package.</p>
<ol start="4" style="list-style-type: decimal">
<li>standard module structure, repeated over all components of the system to ease navigation and understanding</li>
<li>test, test, test at all levels: unit tests (including QC tests), integration tests (e.g. at boundaries like REST APIs), system level tests</li>
<li>limit size of modules, components, functions (I always use a small 13’’ screen and everything should fit in it)</li>
</ol>
<p>Size matters when you need to refactor/edit/change any piece of code. GHC is smart enough to optimise code so there is usually nothing preventing dividing code in manageable chunks</p>
<ol start="7" style="list-style-type: decimal">
<li>no dependencies between components so that I can work on a single one at a time</li>
</ol>
<p><em>component</em> means <em>deployable unit of code</em>, e.g. might be a package or a service</p>
<ol start="8" style="list-style-type: decimal">
<li>type explicitly everything</li>
<li>abstract away actual IO as much as possible. Explicit IO type should appear as late as possible (e.g. in main function), favor specific monads with limited effects</li>
<li><p>use <em>actual types</em> wherever possible to represent domain concepts, avoid primitive types and above all <em>naked strings</em> (or <code>Text</code>) when they represent actual values</p>
<p>Types are the interface of functions/modules and they should be as explicit as possible. Compare:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">checkPassword ::</span> <span class="dt">UserName</span> <span class="ot">-&gt;</span> <span class="dt">Password</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
checkPassword u p <span class="fu">=</span> <span class="fu">...</span>

<span class="ot">checkPassword&#39; ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span><span class="ot">` </span>
<span class="ot">checkPassword&#39; userName password = ...</span></code></pre></div>
<p>Haskell provides <em>type synonyms</em> so it is tempting to have:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">UserName</span> <span class="fu">=</span> <span class="dt">Text</span>
<span class="kw">type</span> <span class="dt">Password</span> <span class="fu">=</span> <span class="dt">Text</span></code></pre></div>
<p>But aliases are syntactic and are replaced when typechecking code. Using aliases actually means depending on a concrete representation of the type. <code>newtype</code> are cheap in Haskell and it is easy to derive typeclasses to use constant strings or numbers when needed, but they are “actual types” and thus increases readibility and reliability of code.</p></li>
<li>limit exposition of constructors esp. for ADTs, prefer exposing functions and “smart constructors”</li>
</ol></li>
<li>how does haskell help you to maintain a clean, decoupled codebase?
<ol style="list-style-type: decimal">
<li>being expressive leads to more compact code which means more information fits in a single function which helps focusing</li>
<li>thanks to types, refactoring is very easy: change what’s needed to be changed and fix compiler errors</li>
<li>thanks to types, it is easy to generalise cross-cutting concepts that appear in different contexts</li>
<li>compositionality of functions helps defining and using small manageable chunks of logic</li>
<li>“higher” type concepts (typeclasses, GADTs, functors and friends, type families) increase expressivity and allows introducing domain-relevant or technical abstractions at all levels</li>
<li>types are very useful to model domain-related concepts and have some constraints checked by the compiler</li>
<li>being both compiled and interpreted decreases the feedback loop when developing/tuning code: I can use the REPL to play with the code</li>
</ol></li>
<li>what system design benefits do you receive from a statically typed, pure language such as haskell, that you wouldn’t receive in a dynamically typed, but immutable language?
<ol style="list-style-type: decimal">
<li>I can have a strong and statically enforced separation between a core domain model’s functions and types and connections to the outside world, along the line of hexagonal architecture. Thanks to separation of effectful and pure functions, it is easy to test/QC/reason about the core domain without having to deal with the impurity of realworld computations. For example, I can let concurrency out the picture and later on use STMs (or something else) to manage concurrent access, or I can model my system with concurrency in mind (e.g. CRDTs, event streams) and still not embed effects until actual deployment</li>
<li>I can leverage the power of the compiler to chose the level of correctness I want/need, from lousy to proof-like… I can actually code in Haskell like I would code in a dynamically typed language (e.g. use simple generic immutable structures like list, use primitives…) but I can also go for something close to proof-system.</li>
</ol></li>
</ol>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 20</title>
    <link href="http://abailly.github.io/posts/weekly-review-20.html" />
    <id>http://abailly.github.io/posts/weekly-review-20.html</id>
    <published>2017-05-22T00:00:00Z</published>
    <updated>2017-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 20</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May 22, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="tuesday">2017-05-09 Tuesday</h1>
<dl>
<dt><a href="https://www.youtube.com/watch?v%3DcaSOTjr1z18">A Functional Programmer’s Guide to Homotopy Type Theory - YouTube</a></dt>
<dd><p>Nice introduction to HoTT from a programmer’s perspective, with an example application from <em>patch theory</em></p>
</dd>
</dl>
<h1 id="wednesday">2017-05-10 Wednesday</h1>
<dl>
<dt><a href="http://civs.cs.cornell.edu/proportional.html">Condorcet Internet Voting Service</a></dt>
<dd><p>An online implementation of Condorcet’s voting system which uses voters’ ranking to select the result which is the most acceptable for all voters. Maybe the result of French Presidential elections would be best modelled with such a system…</p>
</dd>
<dt><a href="http://blog.sigfpe.com/2014/05/cofree-meets-free.html">A Neighborhood of Infinity: Cofree meets Free</a></dt>
<dd><p>Great blog post which triggered <a href="https://github.com/dalaing/cofun">David Laing’s</a> series of posts and talks and my own work on <a href="https://github.com/abailly/hdo">hdo</a> a library to interact with Digital Ocean’s API</p>
</dd>
<dt><a href="http://math.ucr.edu/home/baez/information_loss.pdf">information<sub>loss</sub>.pdf</a></dt>
<dd><p>Another theoretical look at Shannon’s entropy</p>
</dd>
</dl>
<h1 id="thursday">2017-05-11 Thursday</h1>
<dl>
<dt><a href="https://barryoreilly.com/2016/08/29/the-most-important-metric-youll-ever-need/">The most important metric you’ll ever need | Barry O’Reilly</a></dt>
<dd><p>Emphasizes the importance of <em>learning</em> in those day and age</p>
</dd>
<dt><a href="https://www.infoq.com/articles/scs-microservices-done-right">Self Contained Systems (SCS): Microservices Done Right</a></dt>
<dd><p>I am not a great fan of <em>XYZ done right</em> style of blog posts which have a natural tendency to decay over time. This one suggests a somewhat disciplined approach on microservices that is interesting.</p>
</dd>
</dl>
<h1 id="monday">2017-05-15 Monday</h1>
<dl>
<dt><a href="http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf">free.dvi - wadler.pdf</a></dt>
<dd><p>While preparing my talk, I thought this classical paper from Wadler could be a good example of <em>abstraction done right</em>!</p>
</dd>
<dt><a href="http://perevillega.com/understanding-free-monads">On Free Monads – Pere Villega</a></dt>
<dd><p>An explanation (in Scala) of Free monads and what they are useful for</p>
</dd>
<dt><a href="http://blog.gardeviance.org/2012/07/adoption-cycles.html">Bits or pieces?: Adoption cycles</a></dt>
<dd><p>Sarcastic post from Simon Wardley on how large organisations adopt emerging technologies</p>
</dd>
<dt><a href="https://medium.com/willbe-group/tous-artisans-au-21%25C3%25A8me-si%25C3%25A8cle-1f2addfb6862">Tous artisans au 21ème siècle ? – WillBe Group – Medium</a></dt>
<dd><p>Merci à Ronan pour le lien sur ce très bon article consacré au futur de l’artisanat. A mettre en regard de <a href="https://medium.com/willbe-group/travail-la-r%25C3%25A9volution-remote-5ea29f32ad1a">Travail : la révolution Remote – WillBe Group – Medium</a>. Il y a aussi un <a href="https://www.youtube.com/watch?v=OIL_2vknseM&amp;feature=youtu.be&amp;t=3m10s">talk</a></p>
</dd>
</dl>
<h1 id="wednesday-1">2017-05-17 Wednesday</h1>
<dl>
<dt><a href="http://dephasage.ocular-witness.com/pdf/SimondonGilbert.OnTheModeOfExistence.pdf">SimondonGilbert.OnTheModeOfExistence.pdf</a></dt>
<dd><p>An English and partial version of Simondon’s classical book</p>
</dd>
<dt><a href="http://www.moo.mud.org/">MOO home page</a></dt>
<dd><p>Thinking of usign a MOO as a communication channel to replace Slack for <em>Artisans du logiciel</em>…</p>
</dd>
</dl>
<h1 id="thursday-1">2017-05-18 Thursday</h1>
<dl>
<dt><a href="http://akkartik.name/post/literate-programming">Literate programming: Knuth is doing it wrong</a></dt>
<dd><p>I stumbled upon this blog post while attending <a href="http://ncrafts.io/speaker/matthiasnoback">Matthias Noback’s session on Living Documentation</a>. Literate programming would seem to make a lot of sense when one thinks about documenting software, yet it did not stick outside of academia. This post suggests improvements that could help literate programming go mainstream. This post lead me to <a href="https://awelonblue.wordpress.com/2014/09/29/introducing-wikilon/">Wikilon</a> which appears to be some attempt at building an interactive programming system along the line of Bret Victor’s <a href="http://worrydream.com/#!/LearnableProgramming">Learnable Programming</a></p>
</dd>
</dl>
<h1 id="saturday">2017-05-20 Saturday</h1>
<dl>
<dt><a href="http://tomasp.net/coeffects/">Coeffects: Context-aware programming languages</a></dt>
<dd><p>I had the pleasure to meet Tomas Petricek (apologies for missing diacritics…) at NewCrafts. This page is another attempt at providing living software instead of dead web pages to help people learn new concepts by playing with them.</p>
</dd>
<dt><a href="https://philipnilsson.github.io/Badness10k/posts/2017-05-07-escaping-hell-with-monads.html">Badness 10.000 - Escaping Hell with Monads</a></dt>
<dd><p>Another explanation of why monad is a good abstraction</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 18</title>
    <link href="http://abailly.github.io/posts/weekly-review-18.html" />
    <id>http://abailly.github.io/posts/weekly-review-18.html</id>
    <published>2017-05-08T00:00:00Z</published>
    <updated>2017-05-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 18</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May  8, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="monday">2017-05-01 Monday<a id="sec-1" name="sec-1"></a></h1>
<dl>
<dt><a href="https://github.com/abailly/xxi-century-typed/blob/master/idris/src/BottlesOfBeer.idr">99 Bottles of Beer</a></dt>
<dd><p>I managed to complete my Idris implementation of the 99 Bottles of Beer classical Kata. This attempt was triggered by a discussion on Slack over <a href="https://www.sandimetz.com/99bottles">Sandi Metz’s book</a> which a couple of friends have read and is apparently excellent.</p>
</dd>
</dl>
<h1 id="tuesday">2017-05-02 Tuesday<a id="sec-2" name="sec-2"></a></h1>
<dl>
<dt><a href="https://blog.acolyer.org/2017/05/02/corfu-a-distributed-shared-log/">Corfu: A distributed shared log | the morning paper</a><a id="sec-2-1" name="sec-2-1"></a></dt>
<dd><p>Very interesting paper about an implementation of a distributed strongly consistent persistent log, something handy when one wants to implement event sourcing. The code is open-sourced as <a href="https://github.com/CorfuDB/CorfuDB">CorfuDB/CorfuDB</a> and there is a recent follow-up I did not delve into yet.</p>
</dd>
<dt><a href="https://news.ycombinator.com/item?id%3D13576236">Ask HN: What is the biggest untapped opportunity for startups? | Hacker News</a></dt>
<dd><p>I found it funny the first answer to this question is exactly what I am trying to do with <a href="http://drcode.io">Dr.Code</a>: Short consulting sessions to help teams get over thorny issues or have access to affordable expert knowledge and skills.</p>
</dd>
<dt><a href="http://www.extremeprogramming.org/rules.html">Extreme Programming Rules</a><a id="sec-2-4" name="sec-2-4"></a></dt>
<dd><p>Back to basics… XP is still unsurpassed as a coherent set of guidelines and practices for software development.</p>
</dd>
</dl>
<h1 id="wednesday">2017-05-03 Wednesday<a id="sec-3" name="sec-3"></a></h1>
<dl>
<dt><a href="https://medium.com/travis-on-docker/multi-stage-docker-builds-for-creating-tiny-go-images-e0e1867efe5a">Multi-Stage Docker Builds for Creating Tiny Go Images</a><a id="sec-3-1" name="sec-3-1"></a></dt>
<dd><p>Something I have been doing by hand for couple of years now and which is now a supported feature of docker: Use several containers in your build to trim down images size.</p>
</dd>
<dt><a href="https://gordon.readthedocs.io/en/latest/lambdas.html">Lambdas — Gordon 0.6.0 documentation</a><a id="sec-3-2" name="sec-3-2"></a></dt>
<dd><p>I have been working last year on using Haskell to deploy <a href="https://github.com/abailly/aws-lambda-haskell">AWS Lambda</a> functions, a work that has been superseded by <a href="https://github.com/qmuli/qmuli/">qmuli</a> which aims at packaging properly Haskell executables and manage the workflow. Gordon does just that for officially supported runtimes.</p>
</dd>
</dl>
<h1 id="thursday">2017-05-04 Thursday<a id="sec-4" name="sec-4"></a></h1>
<dl>
<dt><a href="http://nullprogram.com/blog/2013/02/06/">How to Make an Emacs Minor Mode « null program</a><a id="sec-4-1" name="sec-4-1"></a></dt>
<dd><p>I am thinking of writing an proper indentation mode for a proprietary language I am working with and looked up what support Emacs provide for doing so. Still looks a bit daunting unfortunately.</p>
</dd>
</dl>
<h1 id="friday">2017-05-05 Friday<a id="sec-5" name="sec-5"></a></h1>
<dl>
<dt><a href="https://www.youtube.com/watch?v%3DpqFgYCdiYz4">(13) 2 10 Elaborator Reflection: Extending Idris in Idris - YouTube</a><a id="sec-5-1" name="sec-5-1"></a></dt>
<dd><p>Talk about using built-in elaborator engine in Idris to extend the language, similar to what one can achieve using Template Haskell.</p>
</dd>
<dt><a href="http://ericlefevre.net/wordpress/2009/03/06/is-fit-dead-a-debate-on-twitter/">Is Fit Dead? A debate on Twitter | Eric Lefevre-Ardant on Java &amp; Agile</a><a id="sec-5-2" name="sec-5-2"></a></dt>
<dd><p>It looks there is not much debate going on anymore on BDD/ATDD and I am not sure whether this is due to the fact it is now considered mainstream or has been dropped altogether. I have always been a big fan of FitNesse and <em>Executable Specifications</em> approach but this is something that requires a lot of energy to setup properly on a project. Not all teams and settings are ready to invest the time to build a common language across developers and business analysts.</p>
</dd>
</dl>
<h1 id="sunday">2017-05-07 Sunday<a id="sec-6" name="sec-6"></a></h1>
<dl>
<dt><a href="https://nstack.com/index.html">NStack - Composable Data Analytics</a><a id="sec-6-2" name="sec-6-2"></a></dt>
<dd><p>An interesting new proposal in the distributed computing space, implemented in Haskell. I am however not a big fan of having to use a custom language instead of an already existing scripting or programming language to describe workflows. Code is available on github: <a href="https://github.com/nstack/nstack">nstack/nstack: Type-safe, composable microservices for data analytics</a><a id="sec-6-1" name="sec-6-1"></a></p>
</dd>
<dt><a href="http://simoneetlesphilosophes.fr/imaginer-linversion/">Exercice n°1: renverser pour mieux voir - Simone et les philosophes</a><a id="sec-6-3" name="sec-6-3"></a></dt>
<dd><p>Exercer son esprit critique en commencant par le plus évident et le plus méconnu : les inégalités homme-femme.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 17</title>
    <link href="http://abailly.github.io/posts/weekly-review-17.html" />
    <id>http://abailly.github.io/posts/weekly-review-17.html</id>
    <published>2017-05-01T00:00:00Z</published>
    <updated>2017-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 17</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May  1, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="monday">2017-04-24 Monday</h1>
<dl>
<dt><a href="https://gianarb.it/blog/linuxkit-operating-system-build-for-containers">LinuxKit operating system built for container</a></dt>
<dd><p>A new and experimental tool from the Docker team to build OSes using containers (or container images ?) that you can deploy to different targets. Seems to be a contender in the <a href="https://www.packer.io/">Packer</a> or <a href="https://www.vagrantup.com">Vagrant</a> space…</p>
</dd>
<dt><a href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">Compiling to categories (extended version) - compiling-to-categories.pdf</a></dt>
<dd><p>A paper about using categorical language (or more precisely <a href="https://en.wikipedia.org/wiki/Cartesian_closed_category">Cartesian Closed Categories</a>) as a common <em>assembly</em> for expressions and programs that can be fed to specific interpreters. I did not read it in full but this reminds me of work from the 80s and 90s on Caml compiler and the <a href="https://en.wikipedia.org/wiki/Categorical_abstract_machine">Categorical Abstract Machine</a>. Looks definitely exciting!</p>
</dd>
<dt><a href="https://github.com/jwiegley/z3cat">jwiegley/z3cat: Use Conal Elliott’s concat library to compile regular Haskell functions into Z3 equations</a></dt>
<dd><p>Everything’s in the title, I guess.</p>
</dd>
<dt><a href="https://liveingreatness.com/summoning-genius/">Summoning Genius | Live In Greatness - core protocols for shared vision</a></dt>
<dd><p>Core protocols have always fascinated me since I have been introduced to them by Christophe Thibaut. This text is part of the same site and is an appeal to live up to one’s own dreams and “live in greatness”.</p>
</dd>
<dt><a href="https://appareil.revues.org/580#tocto1n4">Évolution technique et objectivité technique chez Leroi-Gourhan et Simondon</a></dt>
<dd><p>A philosophy article related to the topic of the talk I am preparing fro nCrafts</p>
</dd>
<dt><a href="https://geography.arizona.edu/sites/geography.arizona.edu/files/u122/One%2520Sinister%2520Hurricane.pdf">One Sinister Hurricane.pdf</a></dt>
<dd><p>An ANT-inspired analysis of work done to create visualisation tools for hurricanes’ effects. Provides evidence on the way technical tools shape thinking and interaction.</p>
</dd>
<dt><a href="http://intellectica.org/SiteArchives/archives/n26_27/26_09_Stiegler.pdf">Temps et individuations technique, psychique et collective dans l’œuvre de Simondon</a></dt>
<dd><p>Started to read that one because it mentions Simondon, but I must confess Stiegler’s prose is more often than not opaque to me.</p>
</dd>
<dt><a href="http://www.rem.ufpr.br/_REM/REMv4/vol4/arti-palombini.htm">Pierre Schaeffer and Pierre Henry</a></dt>
<dd><p>Not sure…</p>
</dd>
<dt><a href="http://en.bp.ntu.edu.tw/wp-content/uploads/2011/12/06-Alexander-A-city-is-not-a-tree.pdf">A CITY IS NOT A TREE</a></dt>
<dd><p>A well-known text from Christophe Alexander that rejects the use of the <em>tree</em> model for cities in favor of <em>graphs</em> (he does not use that word and speaks instead of <em>lattices</em>).</p>
</dd>
</dl>
<h1 id="tuesday">2017-04-25 Tuesday</h1>
<dl>
<dt><a href="https://zedshaw.com/2017/04/24/copying-repetition/">Copying &amp; Repetition – Zed A. Shaw</a></dt>
<dd><p>On the importance of repetition and <em>rote learning</em>.</p>
</dd>
<dt><a href="https://sites.google.com/site/praxisandtechne/Home/architecture/performativity/poiesis-and-praxis">What is it that we ‘do’, when we perform an action? - Praxis and Poiesis</a></dt>
<dd><p>On the difference between <em>poeisis</em> (action driven by some goal) and <em>praxis</em> (action which is its own goal)</p>
</dd>
<dt><a href="https://terenceblake.wordpress.com/2013/10/29/latours-jamesian-empiricism-2-the-case-of-prepositions/">LATOUR’S “JAMESIAN” EMPIRICISM (2): the case of prepositions</a></dt>
<dd><p>Interesting criticism on Latour’s (ab)use of William James’ empiricism.</p>
</dd>
</dl>
<h1 id="wednesday">2017-04-26 Wednesday</h1>
<dl>
<dt><a href="https://www.theatlantic.com/science/archive/2016/04/the-illusion-of-reality/479559/?utm_source%3Dtwb">The Case Against Reality - The Atlantic</a></dt>
<dd><p>A “scientific” argument that reality is not what we think it is. I put scientific in double-quotes because obviously, this theory hardly lends itself to falsifiability. Some more links on the same topic:</p>
<ul>
<li><a href="https://www.quantamagazine.org/20160421-the-evolutionary-argument-against-reality/">The Evolutionary Argument Against Reality | Quanta Magazine</a></li>
<li><a href="https://www.quora.com/Is-Donald-Hoffman%25E2%2580%2599s-interface-theory-of-perception-true">Is Donald Hoffman’s interface theory of perception true? - Quora</a></li>
<li><a href="http://www.michaelshermer.com/2015/11/perception-deception/#more-4721">Michael Shermer Perception Deception » Michael Shermer</a></li>
<li><a href="http://cogsci.uci.edu/~ddhoff/publications/">Donald D. Hoffman | University of California, Irvine</a>: Contains original scientific articles presenting Hoffman’s theory in greater details</li>
</ul>
</dd>
</dl>
<h1 id="friday">2017-04-28 Friday<a id="sec-5" name="sec-5"></a></h1>
<dl>
<dt><a href="https://ncatlab.org/nlab/show/relation%2Bbetween%2Btype%2Btheory%2Band%2Bcategory%2Btheory">relation between type theory and category theory in nLab</a></dt>
<dd><p>A site that looks ladden with complex stuff on cats and dependent types.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 16</title>
    <link href="http://abailly.github.io/posts/weekly-review-16.html" />
    <id>http://abailly.github.io/posts/weekly-review-16.html</id>
    <published>2017-04-24T00:00:00Z</published>
    <updated>2017-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 16</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April 24, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h2 id="monday">2017-04-17 Monday</h2>
<dl>
<dt><a href="http://svn.clifford.at/handicraft/2017/tttm/README">The Teeny Tiny Mansion</a></dt>
<dd><p>A formally proved adventure game: There is no dead end in the game, every states has a path that leads to a winning state.</p>
</dd>
<dt><a href="http://www.cprover.org/cbmc/">The CBMC Homepage</a></dt>
<dd><p>The model checker that is used by <code>tttm</code>. What’s interesting is that it works directly on C/C++ source files. Could probably be adapted to work on Java files, if this is not already done…</p>
</dd>
<dt><a href="https://groups.google.com/forum/#!topic/idris-lang/DHYUrWZEa8Q">Is there library support for FOL or propositional logic? - Google Groups</a></dt>
<dd><p>Some discussion on the <code>idris-lang</code> mailing about adding native First-Order Logic support in the language</p>
</dd>
</dl>
<h2 id="tuesday">2017-04-18 Tuesday</h2>
<dl>
<dt><a href="http://sociologie.revues.org/1573">Enquête sur les modes d’existence</a></dt>
<dd><p>(in French) Criticism of Latour’s book and more generally Latour’s philosophy. Interesting counterpoint while I am trying to use Latour’s concepts to better understand software and our relationship with it.</p>
</dd>
<dt><a href="http://zilsel.hypotheses.org/2103#comments">Le réalisme kitsch | Zilsel</a></dt>
<dd><p>(in French) Another criticism, this time of <a href="/posts/weekly-review-15.html">Object-Oriented Ontology</a> and Speculative Realism</p>
</dd>
<dt><a href="http://www.codecraftuk.org/events/2015/02/css-tdd-review">CSS TDD - Review</a></dt>
<dd><p>Is it possible, and useful, to write CSS in TDD mode, with automated tests? Not sure this post provides a positive answer…</p>
</dd>
</dl>
<h2 id="wednesday">2017-04-19 Wednesday</h2>
<dl>
<dt><a href="http://blog.ploeh.dk/2016/02/10/types-properties-software-designing-with-types/">Types + Properties = Software: designing with types</a></dt>
<dd><p>Relinking to a classical series of post on Type-Driven Development in F#.</p>
</dd>
<dt><a href="http://www.lean.enst.fr/wiki/pub/Lean/LesPublications/LeanDevBalleBalle.pdf">LeanDevBalleBalle.pdf</a></dt>
<dd><p>Short description of <em>Lean Development</em> as a complement to <em>Lean Manufacturing</em>, by one of the foremost French expert on Lean</p>
</dd>
<dt><a href="http://spacemacs.org/layers/%2Bemacs/org/README.html#tree">Org layer</a></dt>
<dd><p>How to use org-mode in Spacemacs. As I do a lot of pairing in Spacemacs those days, I need to beef up my skills with this environment and retarget my muscles memory to new keystrokes sequences…</p>
</dd>
<dt><a href="https://github.com/abailly/yak-o-matic">abailly/yak-o-matic: visualize your yaks</a></dt>
<dd><p>Thinking of reviving this old project, written with Willem van den Ende at Agile Open France 2013, whose purpose was visualising a dependency graph of tasks given an org-mode file.</p>
</dd>
</dl>
<h2 id="thursday">2017-04-20 Thursday</h2>
<dl>
<dt><a href="http://newartisans.com/2017/04/haskell-and-z3/">Lost in Technopolis</a></dt>
<dd><p>Some fascinating note on the use of <a href="https://github.com/conal/concat">category theory</a> as an abstract <em>assembly language</em> to generate equations that are fed to <a href="https://github.com/Z3Prover/z3">Z3</a> theorem prover.</p>
</dd>
<dt><a href="http://stackoverflow.com/questions/2979174/how-do-i-compute-the-approximate-entropy-of-a-bit-string">encryption - How do I compute the approximate entropy of a bit string? - Stack Overflow</a></dt>
<dd><p>I have been working at the end of the week on a small coding challenge: Write a script that emulates the behavior of <code>cat /dev/random</code>, e.g. that generates an infinite stream of as-random-an-possible bytes. My first thought was : How do I test the randomness of a stream of bytes, and this started some research on the web on how to compute entropy of a string</p>
</dd>
<dt><a href="https://en.wikipedia.org/wiki/Salsa20">Salsa20</a></dt>
<dd><p>I chose to use this <em>stream cipher</em> algorithm to generate my stream of random bytes, encryting a stream of bytes coming from a network card put in promiscuous mode. It is reasonably straightforward to understand and implement and generates good “randomness”</p>
</dd>
<dt><a href="https://people.csail.mit.edu/rivest/pubs/RS14.pdf">RS14.pdf</a></dt>
<dd><p>An article from Ron Rivest describing Spritz, an alternative to RC4.</p>
</dd>
</dl>
<h2 id="friday">2017-04-21 Friday</h2>
<dl>
<dt><a href="https://calomel.org/entropy_random_number_generators.html">Entropy and Random Number Generators @ Calomel.org</a></dt>
<dd><p>Helpful post on how to compute “entropy” for random generators. Link to the <a href="http://www.fourmilab.ch/random/random.zip">Ent</a> tool</p>
</dd>
<dt><a href="http://www.haskellforall.com/2015/01/use-haskell-for-shell-scripting.html">Haskell for all: Use Haskell for shell scripting</a></dt>
<dd><p>I of course chose to write my random generation script in Haskell, trying to use as few dependencies as possible: I managed to get it working using only what’s provided by GHC 8.0.2 distribution. Here is an alternative and more expressive way of writing scripts in Haskell.</p>
</dd>
</dl>
<h2 id="saturday">2017-04-22 Saturday</h2>
<dl>
<dt><a href="https://cr.yp.to/snuffle/salsa20/ref/salsa20.c">Salsa Reference Implemention</a></dt>
<dd><p>Reference implementation of Salsa algorithm in plain old C. <a href="https://cr.yp.to/snuffle/salsafamily-20071225.pdf">salsafamily-20071225.pdf</a> provides more details and rationale on this family of algorithms. This lead me to more stuff on PRNGs and how to gather entropy from the system:</p>
</dd>
</dl>
<ul>
<li><a href="http://www.pcg-random.org/">PCG, A Family of Better Random Number Generators | PCG, A Better Random Number Generator</a></li>
<li><a href="http://dtrace.org/blogs/brendan/2011/10/10/top-10-dtrace-scripts-for-mac-os-x/">Brendan’s blog » Top 10 DTrace scripts for Mac OS X</a></li>
<li><a href="https://www.cyberciti.biz/open-source/debian-ubuntu-centos-linux-setup-additional-entropy-for-server-using-aveged-rng-tools-utils/">How to speed up OpenSSL/GnuPG Entropy For Random Number Generation On Linux – nixCraft</a></li>
</ul>
<dl>
<dt><a href="https://aws.amazon.com/fr/blogs/aws/announcing-the-aws-chatbot-challenge-create-conversational-intelligent-chatbots-using-amazon-lex-and-aws-lambda/">Announcing the AWS Chatbot Challenge – Create Conversational, Intelligent Chatbots using Amazon Lex and AWS Lambda | AWS Blog</a></dt>
<dd><p>Something definitely fun I would love to work on!</p>
</dd>
</dl>
<h2 id="sunday">2017-04-23 Sunday</h2>
<dl>
<dt><a href="https://gist.github.com/abailly/9c2b23cca63e66a71093b05462a1e17d">A haskell implementation of a pseudo-random number generator using Salsa20 algorithm</a></dt>
<dd><p>Final implementation of my pseudo-random bytes generator in Haskell</p>
</dd>
<dt><a href="http://www.bearcave.com/misl/misl_tech/wavelets/compression/shannon.html">Shannon Entropy</a></dt>
<dd><p>I started to use compression ratio as a proxy for entropy of a finite stream of bytes but replaced it with direct measurement of Shannon’s entropy, using the standard formula to compute the number of bits needed to represent all elements of a finite stream <span class="math inline"><em>X</em></span> with probability of occurence for each letter of <span class="math inline"><em>p</em><sub><em>i</em></sub></span>.</p>
</dd>
<dt><a href="https://alastairreid.github.io/alastairreid.github.io/ARM-v8a-xml-release/">ARM Releases Machine Readable Architecture Specification – Alastair Reid – Researcher at ARM Ltd</a></dt>
<dd><p>Another fascinating post on the use of formal specifications, this time in the realm of hardware architecture.</p>
</dd>
<dt><a href="https://www.linkedin.com/pulse/forget-project-planning-just-doesnt-work-alex-katsanos?trk%3Dv-feed&amp;trk%3Dv-feed&amp;lipi%3Durn%253Ali%253Apage%253Ad_flagship3_feed%253Bh8fPT2gGIAweLWHuUJcjxQ%253D%253D">Forget about project planning; it just doesn’t work | Alex Katsanos | Pulse | LinkedIn</a></dt>
<dd><p>Looks like waterfall does not very well in “traditional” engineering either…</p>
</dd>
<dt><a href="https://scholar.princeton.edu/sites/default/files/mgilens/files/gilens_and_page_2014_-testing_theories_of_american_politics.doc.pdf">Testing Theories of American Politics</a></dt>
<dd><p>Can we empirically demonstrate how policies are formed and driven? This article shows the answer is yes by testing actual decisions against theories of whose interest these decisions serve. Would definitely be interested in a similar study for Europe…</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>A Dependently Typed Date</title>
    <link href="http://abailly.github.io/posts/dependently-typed-date.html" />
    <id>http://abailly.github.io/posts/dependently-typed-date.html</id>
    <published>2017-04-19T00:00:00Z</published>
    <updated>2017-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>A Dependently Typed Date</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on April 19, 2017</div>

<blockquote>
<p>This article is the <a href="/posts/dependent-types-ddd.html">second installment</a> of a planned series of articles exploring connection between <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://en.wikipedia.org/wiki/Dependent_type">Dependent types</a> as implemented in <a href="http://idris-lang.org">Idris</a>, revisiting examples and patterns from Eric Evan’s <a href="https://www.abebooks.com/products/isbn/9780321125217/22376984258">book</a>.</p>
</blockquote>
<p>I was planning to work on the <em>Specification</em> pattern from chapter 9, pp.224 seq. of the book which is something that fits nicely, along with other patterns from this chapter, in a strongly typed purely functional framework. But I was sent off-track and ended up shaving a yak, or more precisely defining a <code>Date</code> type along with an <code>addDays</code> function, because this is something that was needed to define a proper <em>DelinquentInvoice</em> specification. This was a challenging exercise for me to undertake and I learnt a things or two in the process that might be worthwhile to share.</p>
<h2 id="code">Code</h2>
<p>So let’s start defining our module. We will require all our functions to be <em>total</em> and export everything as public (probably something we want to restrict later on…).</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">module</span> <span class="dt">Date</span> 
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Decidable</span><span class="fu">.</span><span class="dt">Order</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> <span class="kw">%default</span> <span class="kw">total</span>
<span class="fu">&gt;</span> <span class="kw">%access</span> <span class="kw">public</span> export</code></pre></div>
<p>Our first important type will be the <code>Month</code> which is straightforwardly implemented as an enumeration of months’ names<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">Month</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   <span class="dt">January</span>    <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">February</span>   <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">March</span>      <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">April</span>      <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">May</span>        <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">June</span>       <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">July</span>       <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">August</span>     <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">September</span>  <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">October</span>    <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">November</span>   <span class="ot">:</span> <span class="dt">Month</span>
<span class="fu">&gt;</span>   <span class="dt">December</span>   <span class="ot">:</span> <span class="dt">Month</span></code></pre></div>
<p>There is an <code>Enum</code> typeclass/interface in Idris but it requires quite a lot of functions to be defined, so let’s do something simpler and define only a <code>toNat</code> function which will be handy to compare months:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> toNat <span class="ot">:</span> <span class="dt">Month</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>
<span class="fu">&gt;</span> toNat <span class="dt">January</span>    <span class="fu">=</span> <span class="dv">1</span>
<span class="fu">&gt;</span> toNat <span class="dt">February</span>   <span class="fu">=</span> <span class="dv">2</span>
<span class="fu">&gt;</span> toNat <span class="dt">March</span>      <span class="fu">=</span> <span class="dv">3</span>
<span class="fu">&gt;</span> toNat <span class="dt">April</span>      <span class="fu">=</span> <span class="dv">4</span>
<span class="fu">&gt;</span> toNat <span class="dt">May</span>        <span class="fu">=</span> <span class="dv">5</span>
<span class="fu">&gt;</span> toNat <span class="dt">June</span>       <span class="fu">=</span> <span class="dv">6</span>
<span class="fu">&gt;</span> toNat <span class="dt">July</span>       <span class="fu">=</span> <span class="dv">7</span>
<span class="fu">&gt;</span> toNat <span class="dt">August</span>     <span class="fu">=</span> <span class="dv">8</span>
<span class="fu">&gt;</span> toNat <span class="dt">September</span>  <span class="fu">=</span> <span class="dv">9</span>
<span class="fu">&gt;</span> toNat <span class="dt">October</span>    <span class="fu">=</span> <span class="dv">10</span>
<span class="fu">&gt;</span> toNat <span class="dt">November</span>   <span class="fu">=</span> <span class="dv">11</span>
<span class="fu">&gt;</span> toNat <span class="dt">December</span>   <span class="fu">=</span> <span class="dv">12</span></code></pre></div>
<p>It is then easy to compare months, providing implementations for <code>Eq</code> and <code>Ord</code> interfaces:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> implementation <span class="dt">Eq</span> <span class="dt">Month</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   m1 <span class="fu">==</span> m2 <span class="fu">=</span> toNat m1 <span class="fu">==</span> toNat m2
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> implementation <span class="dt">Ord</span> <span class="dt">Month</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   compare m1  m2 <span class="fu">=</span> compare (toNat m1) (toNat m2)</code></pre></div>
<p>Now, let’s tackle <code>Year</code>s. Easy enough, we will stick to simply representing years as a natural number, which of course will prevent us at this stage to represent dates <em>B.C.</em> <sub><sub><del>idris &gt; Year : Type &gt; Year = Nat</del></sub></sub></p>
<p>An important thing to know about a year is whether or not it is a <em>leap year</em>: This will be critical to know what’s the duration of the year and the number of days of <code>February</code>. There is a simple algorithm for that: A year which is dividible by 4 is a leap year, except when it is dividible by 100 and <em>not</em> dividible by 400 (1900 is not a leap year but 2000 is).</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> isLeapYear <span class="ot">:</span> <span class="dt">Year</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span class="fu">&gt;</span> isLeapYear y <span class="fu">=</span> check4 <span class="fu">&amp;&amp;</span> check100 <span class="fu">||</span> check400
<span class="fu">&gt;</span>   <span class="kw">where</span></code></pre></div>
<p>Because we are working with <code>Nat</code>s (underlying representation for years) we need to use some special functions to compute modulus, namely <code>modNatNZ</code> which requires us to provide a proof the divisor is not 0.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>     check4 <span class="ot">:</span> <span class="dt">Bool</span>
<span class="fu">&gt;</span>     check4 <span class="fu">=</span> modNatNZ y <span class="dv">4</span> <span class="dt">SIsNotZ</span> <span class="fu">==</span> <span class="dv">0</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span>     check100 <span class="ot">:</span> <span class="dt">Bool</span>
<span class="fu">&gt;</span>     check100 <span class="fu">=</span> modNatNZ y <span class="dv">100</span> <span class="dt">SIsNotZ</span> <span class="fu">/=</span> <span class="dv">0</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span>     check400 <span class="ot">:</span> <span class="dt">Bool</span>
<span class="fu">&gt;</span>     check400 <span class="fu">=</span> modNatNZ y <span class="dv">400</span> <span class="dt">SIsNotZ</span> <span class="fu">==</span> <span class="dv">0</span></code></pre></div>
<p>Equipped with this predicate we can compute the duration of a month:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> monthDuration <span class="ot">:</span> <span class="dt">Month</span> <span class="ot">-&gt;</span> <span class="dt">Year</span> <span class="ot">-&gt;</span> (days<span class="ot">:</span> <span class="dt">Nat</span> <span class="fu">**</span> <span class="dt">LTE</span> <span class="dv">1</span> days) </code></pre></div>
<p>Note the return type of <code>monthDuration</code> is a <em>dependent pair</em> associating the number of days of the month (a <code>Nat</code>) with a proof this number of days is always greater than 1. This will become important later on when we want to add days to dates…</p>
<p>Defining the function is a simple matter of case analysis over the constructors of <code>Month</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> monthDuration <span class="dt">January</span> <span class="fu">_</span>      <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">February</span> year  <span class="fu">=</span> <span class="kw">if</span> isLeapYear year 
<span class="fu">&gt;</span>                                <span class="kw">then</span> (<span class="dv">29</span>  <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span>                                <span class="kw">else</span> (<span class="dv">28</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">March</span> <span class="fu">_</span>        <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">April</span> <span class="fu">_</span>        <span class="fu">=</span> (<span class="dv">30</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">May</span> <span class="fu">_</span>          <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">June</span> <span class="fu">_</span>         <span class="fu">=</span> (<span class="dv">30</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">July</span> <span class="fu">_</span>         <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">August</span> <span class="fu">_</span>       <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">September</span> <span class="fu">_</span>    <span class="fu">=</span> (<span class="dv">30</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">October</span> <span class="fu">_</span>      <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">November</span> <span class="fu">_</span>     <span class="fu">=</span> (<span class="dv">30</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)
<span class="fu">&gt;</span> monthDuration <span class="dt">December</span> <span class="fu">_</span>     <span class="fu">=</span> (<span class="dv">31</span> <span class="fu">**</span> <span class="dt">LTESucc</span> <span class="dt">LTEZero</span>)</code></pre></div>
<p>Because having to pattern match on pair is not very handy, let’s provide some helpers functions to get only the relevant part of the pair:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> daysInMonth <span class="ot">:</span> <span class="dt">Month</span> <span class="ot">-&gt;</span> <span class="dt">Year</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span>
<span class="fu">&gt;</span> daysInMonth month year <span class="kw">with</span> (monthDuration month year) 
<span class="fu">&gt;</span>   <span class="fu">|</span> (days <span class="fu">**</span> <span class="fu">_</span>) <span class="fu">=</span> days
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> aMonthHasOneDay <span class="ot">:</span> (month <span class="ot">:</span> <span class="dt">Month</span>) <span class="ot">-&gt;</span> (year <span class="ot">:</span> <span class="dt">Year</span>) <span class="ot">-&gt;</span> <span class="dt">LTE</span> <span class="dv">1</span> (daysInMonth month year)
<span class="fu">&gt;</span> aMonthHasOneDay month year <span class="kw">with</span> (monthDuration month year) 
<span class="fu">&gt;</span>   <span class="fu">|</span> (<span class="fu">_</span> <span class="fu">**</span> prf) <span class="fu">=</span> prf</code></pre></div>
<p>Had we defined a proper <code>Enum</code> implementation, we would be able to use <code>pred</code> and <code>succ</code> to navigate between months… But we only need at the moment to compute <code>nextMonth</code> which is definitely simple:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> nextMonth <span class="ot">:</span> <span class="dt">Month</span> <span class="ot">-&gt;</span> <span class="dt">Month</span>
<span class="fu">&gt;</span> nextMonth <span class="dt">January</span>   <span class="fu">=</span> <span class="dt">February</span>
<span class="fu">&gt;</span> nextMonth <span class="dt">February</span>  <span class="fu">=</span> <span class="dt">March</span>    
<span class="fu">&gt;</span> nextMonth <span class="dt">March</span>     <span class="fu">=</span> <span class="dt">April</span>    
<span class="fu">&gt;</span> nextMonth <span class="dt">April</span>     <span class="fu">=</span> <span class="dt">May</span>      
<span class="fu">&gt;</span> nextMonth <span class="dt">May</span>       <span class="fu">=</span> <span class="dt">June</span>     
<span class="fu">&gt;</span> nextMonth <span class="dt">June</span>      <span class="fu">=</span> <span class="dt">July</span>     
<span class="fu">&gt;</span> nextMonth <span class="dt">July</span>      <span class="fu">=</span> <span class="dt">August</span>   
<span class="fu">&gt;</span> nextMonth <span class="dt">August</span>    <span class="fu">=</span> <span class="dt">September</span>
<span class="fu">&gt;</span> nextMonth <span class="dt">September</span> <span class="fu">=</span> <span class="dt">October</span>  
<span class="fu">&gt;</span> nextMonth <span class="dt">October</span>   <span class="fu">=</span> <span class="dt">November</span> 
<span class="fu">&gt;</span> nextMonth <span class="dt">November</span>  <span class="fu">=</span> <span class="dt">December</span> 
<span class="fu">&gt;</span> nextMonth <span class="dt">December</span>  <span class="fu">=</span> <span class="dt">January</span></code></pre></div>
<p>We are at last equipped to define a <code>Date</code> type that will prevent us to define invalid dates:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">Date</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
<span class="fu">&gt;</span>   <span class="dt">MkDate</span> <span class="ot">:</span> (year  <span class="ot">:</span> <span class="dt">Year</span>) <span class="ot">-&gt;</span> (month <span class="ot">:</span> <span class="dt">Month</span> ) <span class="ot">-&gt;</span> (day <span class="ot">:</span> <span class="dt">Nat</span>) </code></pre></div>
<p>So a <code>Date</code> is built from a <code>Year</code>, a <code>Month</code> and <code>Nat</code> for the <code>day</code>, with the additional constraints that <code>day</code> should be between 1 and the length of the <code>month</code>, a property which is easily defined as implicit dependent types:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>          <span class="ot">-&gt;</span> { <span class="kw">auto</span> dayFitInMonth <span class="ot">:</span> <span class="dt">LTE</span> day (daysInMonth month year) } 
<span class="fu">&gt;</span>          <span class="ot">-&gt;</span> { <span class="kw">auto</span> dayGreaterThanOne <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> day } </code></pre></div>
<p>To build a <code>Date</code>, one will then need to provide <em>proofs</em> the <code>day</code> respects the given constraints.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>          <span class="ot">-&gt;</span> <span class="dt">Date</span></code></pre></div>
<p>Here are some examples of buildiing valid and invalid dates at the REPL:</p>
<p>Let’s try to build a date with 0 as day number:</p>
<pre><code>λΠ&gt; :let d = MkDate 2017 February 0
(input):1:17:When checking argument gtOne to constructor Date.MkDate:
        Can&#39;t find a value of type 
                LTE 1 0</code></pre>
<p>And what about the 29th of February, 2017 ?</p>
<pre><code>λΠ&gt; :let d = MkDate 2017 February 29
(input):1:17:When checking argument dayFitInMonth to constructor Date.MkDate:
        Can&#39;t find a value of type 
                LTE 29 28</code></pre>
<p>However, 29th of February, 2016 is fine:</p>
<pre><code>λΠ&gt; :let d = MkDate 2016 February 29
defined
λΠ&gt; d
MkDate 2016 February 29 : Date</code></pre>
<p>We can now tackle the problem which triggered that development: Adding some days to a <code>Date</code> to compute a new <code>Date</code>… The general definition follows the classical inductive principle over the number of days in order to guarantee totality of the function.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span> mutual   
<span class="fu">&gt;</span>   addDays <span class="ot">:</span> <span class="dt">Date</span> <span class="ot">-&gt;</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Date</span>
<span class="fu">&gt;</span>   addDays d <span class="dt">Z</span>     <span class="fu">=</span> d
<span class="fu">&gt;</span>   addDays d (<span class="dt">S</span> k) <span class="fu">=</span> addDays (addOneDay d) k</code></pre></div>
<p>The grunt of the job is delegated to the <code>addOneDay</code> function which is the most interesting one:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>   addOneDay <span class="ot">:</span> <span class="dt">Date</span> <span class="ot">-&gt;</span> <span class="dt">Date</span>
<span class="fu">&gt;</span>   addOneDay (<span class="dt">MkDate</span> year month day) <span class="fu">=</span> </code></pre></div>
<p>We do a case analysis to using the <code>order</code> function from the <code>Ordered</code> interface that, given a <em>total relation</em> (<code>LTE</code> in our case) and two elements states which one is greater than other, providing a proof packed in an <code>Either</code> union:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>     <span class="kw">case</span> order {to<span class="fu">=</span><span class="dt">LTE</span>} (<span class="dt">S</span> day) (daysInMonth month year) <span class="kw">of</span></code></pre></div>
<p>The <code>Left</code> case is easy. Simply increment the number of days by one while keeping everything the same. The <code>dayFitInMonth</code> property is satisfied by the (anonymous) value provided in the <code>Either</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>       <span class="dt">Left</span> <span class="fu">_</span>  <span class="ot">=&gt;</span> 
<span class="fu">&gt;</span>         <span class="dt">MkDate</span> year month (<span class="dt">S</span> day)</code></pre></div>
<p>The <code>Right</code> case (meaning the <code>day</code> is the last day of the month) requires another case analysis on the <code>month</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>       <span class="dt">Right</span> <span class="fu">_</span> <span class="ot">=&gt;</span> 
<span class="fu">&gt;</span>             <span class="kw">case</span> month <span class="kw">of</span> </code></pre></div>
<p>If we are at the end of the year, increment <code>year</code> and set the day to 1st of January:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>                     <span class="dt">December</span> <span class="ot">=&gt;</span> <span class="dt">MkDate</span> (year <span class="fu">+</span> <span class="dv">1</span>) <span class="dt">January</span> <span class="dv">1</span></code></pre></div>
<p>Otherwise, move to first day of next <code>month</code>. The <code>firstDayOfMonth</code> variables provides the necessary proof that 1 is indeed within the limits of the allowed number of days for next month. This proof is provided by the <code>monthDuration</code> function and allows us to build the required <code>Date</code> in a typesafe way.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">&gt;</span>                     <span class="fu">_</span>        <span class="ot">=&gt;</span> <span class="kw">let</span> firstDayOfMonth <span class="fu">=</span> aMonthHasOneDay (nextMonth month) year
<span class="fu">&gt;</span>                                 <span class="kw">in</span> <span class="dt">MkDate</span> year (nextMonth month) <span class="dv">1</span></code></pre></div>
<h2 id="discussion">Discussion</h2>
<p>It took me a while and help from <a href="http://stackoverflow.com/questions/43352519/how-to-properly-handle-fin-n-and-integer-when-computing-dates">Stack Overflow</a> and the <code>#idris</code> channel at <code>irc.freenode.net</code> to figure out how to implement <code>addDays</code>. One dead end was trying to use a <code>Fin n</code> as a representation for days, believing it would already provide some guarantees that would simplify definition of other types and functions. It proved a mistake for at least 2 reasons:</p>
<ul>
<li>The <code>Data.Fin</code> module provides a much poorer set of functions and properties than what <code>Nat</code> natively provides. In particular, it is not possible to do arithmetics with <code>Fin n</code> numbers nor compare them directly. This lead my code to be much more convoluted than what it is now, with a lot of to and fro conversions between <code>Nat</code>, <code>Integers</code> and <code>Fin n</code>,</li>
<li>The representation is actually not congruent with the <em>domain</em> (days within a month): A <code>Fin n</code> is a natural number strictly lower than <span class="math inline"><em>n</em></span> which means it has all numbers from 0 to <span class="math inline"><em>n</em> − 1</span>, so the type of <code>March</code> would be <code>Fin 31</code> and April <code>Fin 30</code> but the days would be numbered from 0 to 30 or 29, which is incorrect.</li>
</ul>
<p>Moving to representing days as a <code>Nat</code> with explicit constraints in the constructor’s type for <code>Date</code> made everything simpler.</p>
<p>I also struggled a lot with making <code>addDays</code> total:</p>
<ul>
<li>Initially, I had only one function and did not use induction over number of days. This prevents the compiler from proving termination hence totality of the function as it is not able to infer that recursive calls to the function are made with a value which is <em>smaller</em> than initial call, something which is obvious with explicit pattern matching on the various constructors of the data type,</li>
<li>I initially wrote the first test comparing the number of days to length of the month first as a simple if/then/else, then using a decidable property returning a <code>Dec (LTE a b)</code> which proved fruitless because we need 2 different proofs (and not a negation) for the 2 different cases, something which is provided by the (totally) <code>Ordered</code> interface. Once I had those 2 paths covered, moving forward was easier.</li>
</ul>
<p>The last difficult piece, and something that remains a little bit puzzling to me, was the need for a proof that <code>LTE 1 (monthDuration $ nextMonth month)</code> that arose from the last branch of the cases. Apparently, an explicit proof is needed because Idris does not reduce the expression appearing in types <em>unless</em> the expression is used in a <code>with xxx | lhs = rhs</code> view or is part of the definition of some value<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. This bit me also when defining <code>daysInMonth</code> and <code>aMonthHasOneDay</code>.</p>
<p>Something that I tried to do but could not manage to complete quickly is defining the <code>LeapYear year</code> type to expose the leapyearness as a proposition that could then be carried around in types and would remove the need for explicit if/then/else. As a general rule of thumb and a piece of advice that was given to me on SO, it is a good idea to use functions and types that provide richer information than <code>Bool</code> or <code>Maybe a</code>: You usually want and need a proof that some property holds or does not hold to build richer and more accurate types.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Note we are defining a simple version of dates within the Gregorian calendar. For a lot of ugly and painful details on how to properly handle dates, one can have a look at this <a href="https://forge.ocamlcore.org/scm/viewvc.php/trunk/calendarFAQ-2.6.txt?view%3Dmarkup&amp;root%3Dcalendar">Ocaml library FAQ</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Idris is strict by default: Arguments to functions are evaluated before the right-hand side and I assume this also applies to <code>let x = y in z</code> blocks which are traditionally translated to <code>(\ x -&gt; z) y</code>.<a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
