<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2021-06-16T00:00:00Z</updated>
    <entry>
    <title>On &quot;On the Origin of Species&quot;</title>
    <link href="http://abailly.github.io/posts/origin-of-species.html" />
    <id>http://abailly.github.io/posts/origin-of-species.html</id>
    <published>2021-06-16T00:00:00Z</published>
    <updated>2021-06-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>On &quot;On the Origin of Species&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on June 16, 2021</div>

<p>I am indebted to Adèle van Reeth’s <a href="https://www.franceculture.fr/emissions/les-chemins-de-la-philosophie/les-chemins-de-la-philosophie-emission-du-lundi-08-fevrier-2021">Les chemins de la philotophie</a> for enthusing me in reading Darwin’s masterpiece and still controversial <a href="https://global.oup.com/academic/product/on-the-origin-of-species-9780199219223">On the Origin of Species</a>. We live in a time when creationism under the guise of so-called <em>Intelligent design</em> is again on the rise, when more and more people from developed countries, including highly-educated people, when <em>post-truth</em> is a thing, and people can attract and retain the attention of millions with any kind of <a href="http://journal.sjdm.org/15/15923a/jdm15923a.html">bullshit</a>. Darwin published his book in the middle of the XIXth century, at a time when creationism was still dominant, and the religious dogma considered relevant on the matter of truth of natural sciences’ theories, especially ones dependent on pre-historical and geological times facts. So it seemed important to me to understand <em>how</em> Darwin exposed his theory, how he actually practiced science and conveyed scientific truth.</p>
<h2 id="book-structure">Book Structure</h2>
<p>The book is structured in three unequal parts. The first part introduces the concept of <em>variations</em> in the morphology, habits, behaviours, and structure of living beings, and explains how even seasoned naturalists have a hard time defining precisely the boundary of species or varieties. It exposes the central problem Darwin is trying to solve, namely why those variations happen and how species and varieties are shaped.</p>
<p>The second part defines Darwin’s <em>Natural selection</em> theory, its various constitutive principles -<em>Survival of the fittest</em>, random variations, sexual selection - and how this theory explains the formation and <em>evolution</em> of all living beings.</p>
<p>The third and longest part is a careful and systematic analysis of facts that potentially contradict the <em>Natural selection</em> principle, from the question of how instinctual behavior of neutered individuals could possibly be inherited, to the question of geographical distribution of related speciies, through difficulties stemming from findings in fossils and geological records. The conclusion summarises Darwin’s findings, theory and arguments that support it.</p>
<h2 id="natural-selection">Natural Selection</h2>
<p>Darwin’s theory, namely <em>Natural selection</em>, is thus named by analogy with how humans select domestic animals and plants for their greater benefits. Its principles can be summarised by the following “laws”:</p>
<ul>
<li>Living organisms, through reproduction, tend to <em>proliferate</em> and grow in numbers which, when left unopposed, leads to population explosion,</li>
<li>This tendency is counterbalanced by <em>high mortality rate</em> stemming from intense competition for resources within an ecosystem, both within species and among species, with an infinite variation of complex relationships from the simple prey/predator to symbiosis, parasitism or even relations involving several species,</li>
<li>This intense competition leads to <em>survival of the fittest</em>, whereby individuals use the slightest advantage they have “acquired” that can provide them an edge and higher survival rate,</li>
<li>Such <em>variations</em> appear constantly within species (we would call them <em>mutations</em>), sometimes minute, sometimes spectacular, in a random and unpredictable way,</li>
<li>Variations appear more often in less specialised or useful features or organs, or highly “exotic” ones like the peacock’s tail, the rooster crest or other “ornaments”,</li>
<li>Furthermore, if a feature has varied, it is more likely to vary,</li>
<li>Survival of the fittest principle will thus preserve variations which provide an edge in the competition, and reproduction will normally allow passing those variations to descendants of survivors,</li>
<li><em>Sexual selection</em> is a secondary principle that ensures individuals carrying beneficial variations will have a higher reproduction rate, increasing the likelihood of preserving an advantage over the next generations.</li>
</ul>
<p><em>Natural selection</em> is a term that summarizes those complex interactions occuring within a specific biotope between all the living beings, leading to <em>evolution</em> of species towards better <em>adaptation</em> to the milieu and to other species, which species in return affect the milieu through their constant evolution (think for example of the how plants evolve in reaction to changes in the diet of animals and the increase in herbivorous population).</p>
<p>The key aspect of <em>Darwinism</em> and the one that sparked and still sparks most controversy is the fundamentally random nature of the <em>variations</em>. We now know those variations mostly result from genes mutations but those mutations are still mostly random, or at least unpredictable, and <em>Nature</em> acts much like a farmer does by selecting the best variations, the ones providing a competitive advantages, over the others. The appearance of “intelligent design” or “masterplan” comes from our very narrow view and the difficulties we are having intellecting the unfathomable spans of time which <em>Nature</em> has at its disposal to act: When we contemplate the beauty of the interaction of bees and flowers, the intricacies of ants’ social life, or the perfection of the jaguar, we forget they are the result of tens or hundreds of millions of years of constant minute variations and selection, accumulated over millions of generations.</p>
<h2 id="why-we-must-read-darwin">Why we must read Darwin</h2>
<p>This book is a great read for a lot of reasons which can be condensed by saying it’s the epithom of scientific writing. For the details inclined among us, here is what I put behind those vague words:</p>
<ul>
<li>It’s written without much jargon, or at least a jargon that has become mainstream over the past 150 years. Darwin does not make use of footnotes, or any kind of notes for that matter, even though he provides a bibliography at the end of the book albeit structured somewhat informally and without exact references, which from the point of view of the reader avoids the constant back and forth between body and appendices one is forced to go through when reading modern scholarly texts,</li>
<li>It’s filled with abundance of concrete examples illustrating various points of the theory or thorny problems it is facing, from the innumerable variations of the pidgeons to the sophisticated behaviour of ants, through the problems posed by the dissemination of terrestrial species, both plants and animals across large bodies of water,</li>
<li>A lot of examples come from personal observations and concrete experiences run by Darwin himself over the 20 or 25 years preceding the publication of his book, as well as from the wealth of publications and personal communications from other scholars all around the world, which demonstrates Darwin was not only a brilliant mind but first and foremost an empiricist who spent his life collecting facts and observations, and a scientist embedded in a complex web of relations, discussions, controversy with his peers,</li>
<li>Darwin always adopt a humble stance when presenting his ideas and the facts supporting it. He never says “This is the truth and you must believe” but instead repeats “those facts appear to me to support my theory” or “No other theory (fixism) cannot explain all the facts consistently”,</li>
</ul>
<p>Most importantly, he spends about two-third of his book exposing, analysing every possible problem arising from facts and theories of the sciences of his time, geology, anatomy, botanics, zoology, geography, putting in practice what would be theorised seventy years later by <a href="https://en.wikipedia.org/wiki/Karl_Popper">Karl Popper</a> as <em>empirical falsification</em>: What makes a theory <em>scientific</em> is that it can potentially disproved by facts, through empirical research and experiments. Hence the emphasis Darwin puts on examining facts that could contradict his theory.</p>
<p>A common rebutal of evolutionism is the fact we have very few evidence or sequence of variations of a species from fossils, something which has been used by creationist as a “proof” species were actually created once and for all. But Darwin demonstrates that when it comes to geological evidences, we are like the drunkard who looks for his keys under the gaslight: We infer theories from a very narrow view of the world, not taking into account the thousands or millions of years that can separate fossiliferous layers, the very peculiar conditions that are needed for fossils to accumulate (sedimentation of material, shallow and slowly receding bodies of water, climatic conditions in arctic lands…), in other words how spotty and sketchy our evidences are. But from those few and far between evidences, we can still detect the effect of natural selection and continuous variations which supports the “most simple” explanation.</p>
<p>At least, next time Jehovah’s Witnesses ring at my door and want to discuss why Darwinism is wrong, and how God created the Earth and all the living beings populating it around 6000 BC, I will feel armed and prepared to counter every argument, given those are basically unchanged since Darwin’s time, more than 150 years ago.</p>
<p><strong>NOTE</strong>: Being a developer, I have tried to encode Darwin’s theory into a simple <a href="https://gitlab.com/abailly/origin-of-species">command-line application</a> showing the evolution of species on a “planet” with varying biotopes.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Une histoire des inégalités&quot;</title>
    <link href="http://abailly.github.io/posts/histoire-des-inegalites.html" />
    <id>http://abailly.github.io/posts/histoire-des-inegalites.html</id>
    <published>2021-06-08T00:00:00Z</published>
    <updated>2021-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Une histoire des inégalités&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on June  8, 2021</div>

<p>Le succès du <a href="https://www.seuil.com/ouvrage/le-capital-au-xxie-siecle-thomas-piketty/9782021082289">Capital au XXIème siècle</a> de Thomas Piketty a remis à l’ordre du jour la question des inégalités économiques, de leur justification, de leur évolution, et de la manière de lutter contre leur extension voire de les réduire. <a href="https://www.seuil.com/ouvrage/capital-et-ideologie-thomas-piketty/9782021338041">Capital et idéologie</a> du même auteur, s’intéresse d’ailleurs plus précisèment à la manière dont différentes sociétés justifient, ou pas, les inégalités et leurs trajectoires dans différents pays au cours du siècle précédent.</p>
<p>Au delà du débat entre intellectuel·le·s, la question des inégalités provoque secousses politiques, tensions sociales et violences dans de nombreux pays, parfois de manière apparemment paradoxale. Tandis qu’en France, société relativement égalitaire comme la plupart des pays d’Europe continentale, les <em>Gilets Jaunes</em> ont porté pendant de longs mois la revendication d’une société plus égalitaire et plus juste ; aux USA, pays développé le plus inégalitaire, l’épisode <em>trumpiste</em> s’est achevé (temporairement ?) par la prise d’assaut du Capitole. Il peut paraître étrange de rapprocher ces deux mouvements, mais il me semble qu’ils sont les archétypes de deux réactions possibles du corps social face à des inégalités de capital et de revenu croissantes considérées comme illégitimes, comme issues de <em>captation de la rente</em> par des élites dont plus rien ne justifie la domination.</p>
<p>Le livre de Walter Scheidel, <a href="https://www.actes-sud.fr/catalogue/une-histoire-des-inegalites">Une histoire des inégalités</a>, sous-titré <em>de l’âge de pierre au XXIème siècle</em>, semble tomber à point pour essayer de comprendre d’où viennent ces inégalités et comment, historiquement, elles ont évolué. Plus précisèment, W.Scheidel étudie les différentes causes de réduction des inégalités observées au cours de l’histoire sur le <em>temps long</em>, comme le sous-titre l’indique. Disons le d’emblée : ce n’est guère réjouissant ! La thèse principale du livre, étayée par des années de recherche et une bibliographie de <em>67</em> pages, est que les inégalités économiques n’ont pu être sensiblement et durablement réduites que par l’effet d’un ou plusieurs des <em>quatre cavaliers</em> comme les nomme Scheidel : la guerre de masse, les révolutions transformatrices, l’effondrement des états et les pandémies. Les périodes de paix et de stabilité institutionnelles prolongées ont toutes eu pour effet d’accroître les inégalités, parfois jusqu’à des niveaux stratosphériques.</p>
<h2 id="le-livre">Le livre</h2>
<p>Le livre est divisé en sept parties : une histoire des inégalités, puis quatre parties consacrées chacune à l’un des “cavaliers”, la guerre, la révolution, l’effondrement et la pandémie, une sixième partie consacrée aux “autres solutions” pour réduire les inégalités, enfin une dernière partie pour l’état des lieux actuels et un exercice de prospective. Un appendice est dévolu à une analyse théorique des limites de l’inégalité et, partant, des possibilités de comparaisons entre époques.</p>
<p>Le contenu est typique des livres grands publics issus de travaux universitaires : bien écrits, denses, parfois un peu répétitifs dans l’égrénage des statistiques et des différents cas étudiés, et bourrés de notes de bas de pages renvoyant à la copieuse bibliographie, le tout sur un peu plus de 750 pages. Les chapitres sont découpés en sections dont les titres sont systématiquement des citations d’origines, comme celle-ci</p>
<blockquote>
<p>Ainsi furent-ils tous détruits</p>
</blockquote>
<p>qui est tirée de la <a href="https://gallica.bnf.fr/ark:/12148/bpt6k1121746.texteImage">Chronique des quatre premiers Valois</a> et parle de la jacquerie de 1358.</p>
<h3 id="la-guerre">La guerre</h3>
<p>La partie sur la guerre est la plus longue, sans doute parce que les événements relatés sont proches de nous et nous en ressentons encore les effets, et aussi parce que l’impact des deux guerres mondiales sur les inégalités a certainement été l’un des plus massifs qui se soit jamais observé dans toute l’histoire humaine, au point que la période 1914-1950 soit nommée <em>La grande compression</em>.</p>
<p>Seules les guerres totales du XXème siècle ont réduit les inégalités de manière significative. À elle seule, la guerre n’est pas un vecteur d’égalisation et aurait même tendance à renforcer les inégalités comme le montrent les conséquences des innombrables guerres de conquêtes de l’histoire. Ceci vaut y compris pour des guerres civiles, même de grande ampleur comme le fût la guerre de Sécession américaine : la libération des esclaves sans indemnités a certes constitué une forme de “destruction de capital” importante mais n’a pas vraiment eu d’impact à long terme sur les inégalités, les esclaves libérés se transformant en ouvriers agricoles mal payés.</p>
<p>Si les guerres du XXème sont parvenues à un tel résultat, ce n’est pas uniquement du fait des destructions massives de capital et des immenses pertes humaines qu’elles ont causées. La guerre de masse implique une mobilisation de masse qui n’est possible et acceptable, en particulier dans les régimes démocratiques, que si les gouvernements et les dominants sont prêts à faire des concessions aux dominés. Par ailleurs, les immenses besoin en main d’oeuvre et capital impliquent un contrôle étroit de l’État, une mobilisation des capitaux et de toutes les ressources qui nécessairement impactent beaucoup plus les riches que les pauvres.</p>
<p>L’effet égalisateur de la mobilisation en masse et de la conscription universelle ne se retrouve, en dehors du XXème siècle, que dans une société connue : la Grèce classique dex Vème-IVème siècles avant l’ère chrétienne. Bien sûr, l’égalité ne concernait que les citoyens et donc pas les esclaves ni les femmes, mais dans cette catégorie l’égalité était réelle et a perduré à Athènes sur deux siècles environ, quand elle a périclité assez vite à Sparte.</p>
<p>J’ajouterai, bien que l’auteur n’en parle pas, qu’Israël au moins à ses débuts pourrait constituer un autre exemple d’une société dont l’égalitarisme est le produit de la guerre, conçu comme un état permanent et impliquant l’ensemble des citoyens.</p>
<p>Les effets égalisateurs de la guerre de masse ont été observés y compris dans des pays qui n’étaient pas belligérants comme la Suède, la Suisse ou la péninsule espagnole. Il n’y a que dans des pays éloignés du conflit, en Amérique du Sud, que la déségalisation s’est poursuivie .</p>
<p>Le cas du Japon est étudié en détail par Scheidel, et permet d’apprendre que l’égalisation déjà à l’oeuvre du fait de l’effort de guerre a été amplifiée par les politiques redistributives - distribution des terres, sécurité sociale, compression des salaires, impôt extrêmement progressif - mises en oeuvre sous l’impulsion des vainqueurs, autrement dit les américains qui eux-mêmes à l’époque ont mis en place de telles mesures.</p>
<h3 id="la-révolution">La révolution</h3>
<p>Les révolutions communistes du XXème siècle, russes, chinoises, vietnamiennes et autres, ont été elles aussi très efficaces pour égaliser revenus et patrimoines : en URSS et dans la Chine communiste quelques années après la prise de pouvoir, le <a href="https://en.wikipedia.org/wiki/Gini_coefficient">coefficient de Gini</a> des revenus utilisé par l’auteur comme principal outil de mesure des inégalités, était tombé autour de 20% soit parmi les taux les plus bas jamais observés.</p>
<p>Il est certain que la <em>Grande compression</em> d’après-guerre dans les pays occidentaux et la mise en place de mesures sociales sans précédent est aussi le résultat de la <em>Guerre froide</em>, un moyen de lutter contre la contagion révolutionnaire.</p>
<p>Comme pour a guerre, en dehors du XXème siècle, les révoltes et révolutions n’ont jamais produit d’effet significative et durable sur les inégalités. Curieusement, ce constat est vrai même pour la <em>Révolution française</em> qui a été “timorée” et n’a jamais remis en cause la propriété privée comme l’ont fait les révolutions communistes, ce qui a eu pour conséquence de ne modifier les inégalités qu’à la marge.</p>
<p>Et comme le souligne la citation ci-dessus, toutes les autres révoltes, jacqueries, guerre des pauvres, émeutes connues ont échouées à changer quoi que ce soit ayant été la plupart du temps écrasées dans le sang, y compris en Asie où la <a href="https://fr.wikipedia.org/wiki/R%C3%A9volte_des_Taiping">révolte des Taiping</a>, qui a pourtant causé la mort de 30 à 50 millions de personnes.</p>
<h3 id="leffondrement">L’effondrement</h3>
<p>De nombreux effondrements d’États ont eu lieu au cours de l’histoire dont on sait qu’ils ont produit une diminution des inégalités: Cités-États et royaumes mésopotamiens (Ur, Akkad, Sumer), royaumes mycéniens et crétois, empires mayas, empire romain sont quelques exemples détaillés par Scheidel. Mais les exemples modernes et contemporains sont beaucoup plus rares, voire presqu’absents. Seules la Somalie après la chute du dictateur Siyad Barre semble présenter les caractéristiques d’un effondrement total ayant engendré une diminution des inégalités du fait de l’éviction d’une élite prédatrice.</p>
<p>Ce lien entre inégalité et État, ou entre égalité et absence de pouvoir central, a aussi été mis en avant par les travaux de James C. Scott notamment dans <a href="https://yalebooks.yale.edu/book/9780300182910/against-grain">Against the Grain</a> qui montre l’extraordinaire faiblesse des premiers états agricoles du Croissant fertile. Les élites militaires de ces États ne disposaient pas des moyens dont disposeraient leurs descendants pour imposer sur le long terme leur pouvoir à des populations toujours enclines à fuir le pouvoir central, l’exploitation, sujettes à des épidémies meurtrières et à des guerres de conquêtes destructrices.</p>
<h3 id="lépidémie">L’épidémie</h3>
<p>L’humanité et les civilisations ont été confrontées très tôt aux épidémies, en fait dès les débuts de l’agriculture et de la domestication d’animaux. Dans <a href="https://en.wikipedia.org/wiki/Guns,_Germs,_and_Steel">Guns, Germs and Steel</a> J.Diamond émet l’hypothèse que l’exposition à des maladies plus sérieuses, plus vite, à plus grande échelle a été l’une des raisons principale de l’émergence précoce d’États plus structurés, plus puissants, bref de la civilisation sur le continent euriasiatique.</p>
<p>La plupart des épidémies ayant eu un impact significatif sur les inégalités ont eu lieu dans la haute antiquité, mais il en est néanmoins quelques unes plus récentes auxquelles W.Scheidel a pu attribuer un impact considérable, essentiellement des épidémies de <em>peste</em> : la peste antonienne au IIème siècle, la peste justinienne au VIème qui a causé la division par 2 ou 3 de la population de Byzance, et surtout la <a href="https://fr.wikipedia.org/wiki/Peste_noire">Peste Noire</a> qui a démarré au XIVème siècle et a connu des répliques de moindre ampleur jusqu’au XVIIème.</p>
<p>Cette pandémie qui a aussi sévi dans une moindre mesure en Asie a causé la mort de 30 à 50% selon les pays de la population européenne et méditerranéenne. Ses effets sur les inégalités sont assez bien documentés notamment en Angleterre, ont été massifs mais n’ont duré qu’environ 1 siècle : du fait de la disparition de la main d’oeuvre dans une société essentiellement agricole les salaires ont augmenté, parfois considérablement, au point que certains gouvernements ont voulu légiférer et limiter les salaires des journaliers et artisans ; des produits qui étaient auparavant réservés à une élite (viande, fourrures, animaux) se sont diffusés dans une plus large fraction de la population ; le commerce international s’est effondré ce qui a particulièrement touché les fractions les plus riches de la population.</p>
<h3 id="mesurer-les-inégalités">Mesurer les inégalités</h3>
<p>Dans ses livres, aussi bien <a href="">Le capital au XXIème siècle</a> qu’<a href="">Idéologie et capital</a> T.Piketty critique l’usage trop exclusif du coefficient de Gini comme mesure des inégalités et lui préfère un instrument plus précis : la distribution des richesses, revenus ou patrimoine, par décile ou par centile. Un même coefficient de Gini peut en effet être produit par des distributions différentes des inégalités relatives.</p>
<p>C’est pourtant cette mesure que W.Scheidel retient, essentiellement parce qu’il est très difficile de reconstruire pour des sociétés anciennes, et même pour certaines sociétés modernes, ces distributions de revenus.</p>
<p>Mais il introduit aussi une autre mesure, très intéressante, qu’il appele le <em>taux d’extraction</em> soit le pourcentage du maximum d’inégalité possible dans un contexte économique donné. Ce taux est <em>relatif</em> à un niveau de revenu par habitant donné : intuitivement, plus une économie est riche, plus le potentiel d’inégalité est élevé, les dominants ayant la possibilité de capter de plus grandes richesses à leur profit. La limite basse est constituée par le seuil de subsistance : même dans les société les plus inégalitaires, les pauvres doivent survivre pour continuer d’être exploités par les riches.</p>
<p>La relation entre maximum d’inégalité et revenu par habitant définit une frontière des inégalités : une société sera d’autant plus inégalitaire qu’elle sera proche de cette frontière. Toutes les sociétés modernes issues de la <em>Grande compression</em> sont loin de cette frontière.</p>
<p>Les choses deviennent moins nettes lorsqu’on prend comme base non plus le revenu de subsistance absolu, soit 300$ de 1990, mais un niveau relatif par exemple le seuil de pauvreté. Mécaniquement, le taux d’inégalité maximal diminue et le <em>Taux d’extraction</em> augmente rapprochant les économies modernes les plus égalitaires comme les USA ou le Royaume-uni de sociétés anciennes très inégalitaires comme l’angleterre victorienne, la Florence du quattrocento ou même l’empire romain.</p>
<h3 id="les-égalisateurs-pacifiques">Les égalisateurs “pacifiques”</h3>
<p>La dernière partie du livre consacrée à l’analyse des moyens “non-violents” de réduire les inégalités dont on a pu mesurer les effets est assez déprimante et se résume aisément : il n’y a aucun exemple d’une société ayant réussi à réduire significativement et durablement les inégalités par des réformes pacifiques. Tous les cas cités par l’auteur, notamment ceux de réformes agraires dans des sociétés post-coloniales, sont toujours sous-tendus par la <em>menace de la violence</em> interne ou externe.</p>
<p>Malicieusement, W.Scheidel ne manque de faire remarquer que les innombrables propositions de sommités intellectuelles mondiales, y compris T.Piketty, pour réduire massivement les inégalités sont pour la plupart d’entre elles concrètement inapplicables.</p>
<p>Ce qui pose bien sûr la question de l’avenir des inégalités que nous connaissons actuellement et dont on sait qu’elles ont cru depuis 30 ou 40 ans. Et poser la question c’est déjà d’une certaine manière y répondre…</p>
<h2 id="conclusion">Conclusion</h2>
<p>Ce type de livre est toujours impressionant et passionnant par sa capacité à brasser les millénaires, les chiffres, les études savantes, les civilisations les plus diverses et à les intégrer dans un grand récit au service d’une thèse. N’ayant ni la capacité ni les moyens de critiquer les données sur lesquelles il s’appuie, et encore moins de reproduire l’analyse comme devrait le faire tout scientifique, je ne peux qu’essayer de comprendre et analyser l’argumentation produite qui, il faut le bien le dire est assez convaincante.</p>
<p>Le grand mérite de ce livre est qu’il pose directement ou indirectement plein de questions, telles que :</p>
<ul>
<li>la croissances des inégalités dans des sociétés stables et en paix est elle consubstantielle à la condition humaine ?</li>
<li>quel prix sommes nous prêts à payer pour réduire durablement et significativement les inégalités ?</li>
<li>accepter sereinement que des centaines de millions de personnes meurent pour réduire les inégalités de revenus ne relève-t’il pas de la sociopathie ?</li>
<li>si l’État centralisé est de toute évidence la source de laquelle naissent les inégalités, pourquoi parvient il toujours à renaître de ses cendres ?</li>
<li>la capitalisme n’a ni inventé, ni modifié significativement la structure globale des inégalités : les USA de 2020 ne sont pas loin d’être aussi inégalitaires que, disons, l’Angleterre médiévale, la Chine des Tang ou l’empire romain. Vaut il mieux accepter une société (très) inégalitaire, mais riche, ou une société plus égalitaire, mais pauvre ?</li>
</ul>
<p>Si le retour de l’un des “quatre cavaliers” paraît peu probable à court terme, il est un <em>cinquième cavalier</em> qui parait tout aussi redoutable aujourd’hui, c’est le risque d’effondrement induit par la destruction de la biosphère. Scheidel identifie des épisodes climatiques exceptionnels comme cause d’effondrement de certaines sociétés (la sécheresse pour les mayas), mais n’évoque pas le <em>changement climatique</em> proprement dit.</p>
<p>Immédiatement après l’avoir fini, j’ai commencé de lire <a href="https://www.raisonsdagir-editions.org/catalogue/sengager-dans-la-guerre-des-classes/">S’engager dans la lutte des classes</a> de L.Denave, un récit de l’intérieur autant qu’un essai sur le mouvement des Gilets Jaunes. L’auteur évoque notamment le refus viscérale de la plupart des GJ de “s’organiser”, de “structurer” le mouvement, d’avoir des représentants ou une hiérarchie. À la lumière d’<em>Une histoire des inégalités</em> je ne peux m’empêcher de penser que tout mouvement prétendant lutter sérieusement contre les inégalités n’a que deux options à sa disposition : fuir pour vider le pouvoir de sa substance, ou prendre le pouvoir par la force ; et doit accepter d’en payer le prix : <em>There Will be Blood</em>.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Haskell + Emacs + Nix</title>
    <link href="http://abailly.github.io/posts/haskell-emacs-nix.html" />
    <id>http://abailly.github.io/posts/haskell-emacs-nix.html</id>
    <published>2021-02-02T00:00:00Z</published>
    <updated>2021-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Haskell + Emacs + Nix</h1>

  <h2 class="subtitle">Making of sense of Nix for Haskell development</h2>

<div class="info">Posted on February  2, 2021</div>

<p>In a <a href="a-modern-haskell-env.html">previous post</a> I detailed how to set up a LSP server for Haskell using Emacs as client. Now, despite my good friend Sam Halliday’s <a href="https://levelup.gitconnected.com/delivering-with-haskell-a347d8359597">advice</a>, I wanted to add Nix in the mix. Both <a href="common-dev-environment.html">standardized and shared development environment</a> and reproducibility of such environments are relevant and important. But I could argue that the wealth of virtualization tools available nowadays, from the humble <code>chroot</code> to full-blown virtual machines through containers of all kind, makes it much easier to produce and reproduce identical environments than when nix was started 15 years ago.</p>
<p>There are <a href="https://www.tweag.io/blog/2020-08-20-how-nix-grew-a-marketing-team/">teams</a> and people in the Haskell community that support and use nix, and I wanted to get my feet wet and taste the water, to see how it feels to develop using nix. This short essay reports on my experience so far trying to:</p>
<ul>
<li>Set up a development environment for Haskell code based on Nix, Emacs and LSP,</li>
<li>Nixify a cabal-based Haskell project.</li>
</ul>
<p>I wouldn’t have succeeded in this endeavor but for the support of fine people from the <a href="https://fpchat-invite.herokuapp.com/">Functional Programming Slack</a> community, the <a href="https://funprog.srid.ca/">FP Zulip</a> community, and online documentation:</p>
<ul>
<li>IOHK’s <a href="https://input-output-hk.github.io/haskell.nix">Haskell &amp; Nix Tutorial</a> which covers the <a href="https://github.com/input-output-hk/haskell.nix/">haskell.nix</a> infrastructure,</li>
<li>nixpkgs <a href="https://haskell4nix.readthedocs.io/">Haskell infrastructure</a> guides, although they are somewhat conflicting with the former,</li>
<li><a href="https://nixos.org/guides/nix-pills">Nix Pills</a> which are invaluable to better understand how nix is working.</li>
</ul>
<p>Please note the source code for provisioning a virtual machine with such an environment is available on <a href="https://github.com/abailly/nix-haskell-dev-vm">GitHub</a>.</p>
<h1 id="configure-emacs-and-lsp">Configure Emacs and LSP</h1>
<p>The tricky bits for me was to configure Emacs in such a way that when it opens a <code>*.hs</code> file it automatically fires up <code>lsp-mode</code> and connects to the <em>right version</em> of the <a href="https://github.com/haskell/haskell-language-server">Haskell Language Server</a>. As explained on HLS’s GitHub page, the LSP client must connect to a LSP server that’s compiled with the correct GHC version and uses the correct dependencies. In Emacs’ <code>lsp-mode</code> this is normally done through the use of the binary program <code>haskell-language-server-wrapper</code> which will itself spawn the correct version of <code>haskell-language-server</code> binary depending on the project’s configuration which can be given by a <code>stack.yaml</code> file or a <code>xxx.cabal</code> file.</p>
<p>The Nix way of providing such a configuration is to set the dependencies in a context-specific way, using a <code>default.nix</code> which will be picked up by all nix tools when we don’t provide them a specific file containing a nix expression to evaluate. Then a <code>shell.nix</code> file references the <code>default.nix</code> as its sources for packages and gives the user a customized shell updated with whatever packages it exposes. Note that in this case, there is no need to provide a wrapper over <code>haskell-language-server</code> because, by virtue of Nix providing a customised environment through a fixed set of packages, the “correct” HLS version will be installed, as explained in this <a href="https://github.com/input-output-hk/haskell.nix/pull/1015#issuecomment-768160999">PR Comment</a>. There is a section on <a href="https://input-output-hk.github.io/haskell.nix/tutorials/development/#emacs-ide-support">configuring Emacs</a> in haskell.nix doc but it applies to Dante and not LSP.</p>
<p>So we need to configure Emacs to:</p>
<ol style="list-style-type: decimal">
<li>Use <code>haskell-language-server</code> as the name of the executable for Haskell LSP server,</li>
<li>And more importantly, use the environment provided by <code>nix-shell</code>.</li>
</ol>
<p>The latter could be achieved by wrapping the HLS invocation in <code>nix-shell</code> but <a href="https://direnv.net/">direnv</a> seems to be the way to go as it provides a declarative way of setting up Nix on a per-directory basis. In my case, it amounts to:</p>
<ul>
<li>Write a <code>.envrc</code> file containing a single line, <code>use nix</code>, at the top level of the project’s directory,</li>
<li>Configure Emacs to use <code>direnv-mode</code>: <code>(use-package direnv :ensure t :config (direnv-mode))</code></li>
</ul>
<p>When emacs now visits a file located in the project’s directory or one of its sub-directories, <code>direnv-mode</code> will kick in and set the current environment, and most notably the <code>exec-path</code> according to the instructions given in <code>.envrc</code> which here means executing <code>nix-shell</code>. However, this did not work out-of-the-box and took me some time to understand why. The LSP client that <code>lsp-mode</code> runs kept saying it could not find an LSP server implementation for my language, even though I could assert that:</p>
<ol style="list-style-type: decimal">
<li><code>direnv</code> was working and ran nix-shell to setup the environment,</li>
<li><code>haskell-language-server</code> was installed in the shell and available from the ambient <code>PATH</code>.</li>
</ol>
<p>It turned out the problem seemed to be caused by a <em>race condition</em> between the LSP client and the <code>direnv</code> setup: The LSP client tries to connect to the server before the environment is properly setup which happens because entering <code>nix-shell</code> takes a few seconds. <em>Deferring</em> the connection attempt until the point where the file is properly loaded fixed this issue, leading to this LSP configuration:</p>
<pre><code>(use-package lsp-mode
  :ensure t
  :hook ((haskell-mode . lsp-deferred))
  :commands (lsp lsp-deferred))

(use-package lsp-haskell
  :ensure t)</code></pre>
<h1 id="speed-up-nix">Speed-up Nix</h1>
<p>So I have a nice and working Nix/Haskell/Emacs/LSP configuration setup for my project, but there’s a major issue: <code>haskell.nix</code> does not provide a cache of the packages it exposes derivation for, which means everything must be rebuilt from scratch every time I destroy and recreate the VM. And as the <code>default.nix</code> configuration retrieves its packages from the <code>master</code>, every time we enter <code>nix-shell</code> we run the risk of having to update some depedencies which might take ages.</p>
<p><a href="https://input-output-hk.github.io/haskell.nix/tutorials/getting-started/#pinning-the-haskellnix-version">Pinning down</a> the version of the packages used remediates the second problem, so we are left with the question of caching the binaries built by Nix in such a way as to be able to share them across different VMs. Enters <a href="https://cachix.org/">cachix</a> which is a hosted service with a free 10GB (!) tier specifically built to cache Nix derivations’ output. After having created an account and a cache instance called <code>hydra-sim</code>, I installed and configured <code>cachix</code> on the development environment, and then could push/pull binaries produced.</p>
<p>Local configuration requires the following steps:</p>
<p>Install cachix which is most easily done through nix:</p>
<pre><code>nix-env -iA cachix -f https://cachix.org/api/v1/install</code></pre>
<p>Assuming nix is installed globally and runs as a daemon, the user running <code>cachix</code> must be authorized to create and manipulate caches. This is defined in <code>/etc/nix/nix/.conf</code> which looks like:</p>
<pre><code>max-jobs = 6
cores = 0
trusted-users = root curry
substituters = https://cache.nixos.org https://hydra.iohk.io https://iohk.cachix.org
trusted-public-keys = iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=</code></pre>
<p>Retrieve an authentication token for the <code>hydra-sim</code> cache from cachix and configure local environment to use it:</p>
<pre><code>cachix authtoken &lt;the token&gt;</code></pre>
<p>Finally, use the cache</p>
<pre><code>cachix use hydra-sim</code></pre>
<p>Pushing to the cache can be done from the output of the project’s build</p>
<pre><code>$ nix-build -A hydra-sim | cachix push hydra-sim</code></pre>
<p>and using the <a href="https://fzakaria.com/2020/08/11/caching-your-nix-shell.html">nix-shell configuration</a>. This is important as it means the tools, and most notably <code>haskell-language-server</code>, will be part of the cache:</p>
<pre><code>nix-store --query --references $(nix-instantiate shell.nix) | \
     xargs nix-store --realise | \
     xargs nix-store --query --requisites | \
     cachix push hydra-sim</code></pre>
<h1 id="conclusion">Conclusion</h1>
<p>This is the beginning of my journey in Nix-land and it’s a bit early to say whether I like the tool or not. Right now, it seems like a bit of time-waste as I have spent several hours scattered over a week to get my environment “right” using Nix on a dedicated VM, where doing this using the standard tools provided by Haskell to install packages and utilities, namely <a href="https://www.haskell.org/ghcup/">ghcup</a> and <a href="https://cabal.readthedocs.io/en/3.4/index.html">cabal</a>, took me approximately twenty minutes.</p>
<p>As is often the case with non-mainstream open source tools, there is a lot of information “out there” written by enthusiastic people like tutorials, guides, and blog entries. This information is often fragmentary, dependent on a specific environment, operating system, component of the stack, or specific flavor of the tools. Hence one has to invest time to recombine those fragments in a way that suits his or her needs and taste. This implies investing time in understanding <em>how</em> those tools work in order to be able to tweak configuration and parameters, which might gives one that <a href="https://www.urbandictionary.com/define.php?term=yak%20shaving">yak shaving</a> feeling.</p>
<p>Yet when I compare that experience with my past year working mostly with proprietary or semi-proprietary language and tools (C#, Windows, Visual Studio, Citrix, <a href="https://www.appeon.com/products/powerbuilder">Powerbuilder</a>), I wouldn’t want to go back at any price. When something is wrong in proprietary land, you don’t even get a chance to understand <em>what</em> is wrong, you are dependent on the whims of a software publisher. The time that’s gained in shrinkwrapped tooling and environments, pre-packaged components, guided processes, is valuable only in the short-term at the onset of a project. As soon as <em>essential complexity</em> of the business domain creeps in, the abstraction barriers the proprietary tooling carefully built to hide implementation details breaks, leaving the hapless developer struggling with patches, workarounds, opaque procedures to get things done.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Team Practices: Shared Development Environment</title>
    <link href="http://abailly.github.io/posts/common-dev-environment.html" />
    <id>http://abailly.github.io/posts/common-dev-environment.html</id>
    <published>2021-02-01T00:00:00Z</published>
    <updated>2021-02-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Team Practices: Shared Development Environment</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on February  1, 2021</div>

<p>This is another post in a series I plan to write on interesting team-wide practices I have found and still find to be effective to further and support eXtreme Programming. In this post, I present how to promote <em>Collective Code Ownership</em> and <em>Coding Standards</em> to a new level through the use of a <em>Shared Development Environment</em>. The goal is to ensure as much as possible standardization in the process and tools from design to deployment, in order to avoid the all too common “Works on my machine” syndrome that plagues software development teams.</p>
<h1 id="standardizing-development-environment">Standardizing Development Environment</h1>
<p>The <em>intention</em> behind <em>Collective code ownership</em> and <em>Coding standards</em> practices is to increase the <em>Standardization</em> of the development process within a specific team (or group of teams working closely enough together), but <em>why</em> should we want to standardize the development process, practices and tools in the first place?</p>
<p>After all, each developer has his or her own unique set of skills, backgrounds, habits, and idiosyncrasies that make him or her productive ; and each of us has honed his or her coding katas, carefully crafted keyboard shortcuts, personal information and note taking system, favorite editor, specialised configuration, preferred packages, OSes, laptop brands, keyboard layout, color themes and whatnot, not speaking of languages, idioms, patterns, or architecture preferences.</p>
<p>This is all fine and good in a context where the goal is to maximise each developer’s productivity, and each developer’s work has little to no impact on others’. This is most common in organisations where each developer is responsible for a <em>component</em>, whatever that actually means, and works mostly in isolation on his or her part of the system, where the system’s functionalities are designed and planned in advance, then broken down in various development tasks pertaining to various components, which are picked up by each responsible developer, then assembled, QCed, and released by other teams.</p>
<p>But this ideal situation never actually happens except in the extreme case of a <em>single developer software development</em>. Even the most siloed organisations feel the need to standardize <em>some part</em> of the development process, a need that leads to increased formalism, bureaucracy, and organisational bloat in order to provide a sense of control on what’s going on, which is what gives standardization, understood as top-down imposed norms and rules, a bad reputation among developers and, in return, leads to even more individualism and customization in order to alleviate the feeling one is but a cog in a gigantic machine.</p>
<p>XP proposes another route: Instead of stratifying the development process by tying together highly productive but siloed individualistic development practices with “scientific management”, it aims to maximise productivity of the <em>whole process</em> which means maximising productivity at the <em>team level</em>. Moreover, XP seeks to maintain or even increase that productivity as time passes and the software grows and evolves, the team changes, new versions of the technology or even new technologies emerge, new or changing requirements put pressure on the software.</p>
<p>Maximizing team productivity as a whole means, among many other things:</p>
<ul>
<li>Ensuring smooth and fast training and onboarding for newcomers, and transitions from senior to junior developers or from leaving to incoming team members,</li>
<li>Maintaining an adequate level of understandability of the overall system, ie. not only the code itself but also all the supporting components that are needed to make the code releasable,</li>
<li>Fostering <a href="https://hbr.org/2017/08/high-performing-teams-need-psychological-safety-heres-how-to-create-it">Psychological safety</a> within team by making sure everyone can work with everyone else comfortably and fearlessly,</li>
<li>Increasing the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> to reduce the risks a project grinds to halt because a single member suddenly is missing,</li>
<li>…</li>
</ul>
<p>What Kent Beck promoted more than 20 years is now backed by a lot of scientific studies, including the famous one Google conducted to determine <a href="https://rework.withgoogle.com/guides/understanding-team-effectiveness/steps/introduction/">what makes a team effective</a>.</p>
<p>In a sense <em>Standardization</em> is just what happens when people actually collaborate effectively together on a continuous basis: They settle on common practices, idioms, languages, tools that they feel provide the more benefits to the team as <em>whole</em>. And conversely, standards that emerge from negotiations <em>within</em> the team pave the route towards effectively collaborating together as a <em>whole</em>.</p>
<p><a href="http://wiki.c2.com/?CodingStandard">Coding Standards</a> and <a href="http://wiki.c2.com/?CollectiveCodeOwnership">Collective code ownership</a> are XP’s ways of promoting standardization of the development process across the team.</p>
<h2 id="coding-standards">Coding Standards</h2>
<p>According to <a href="https://wiki.haskell.org/Wadler&#39;s_Law">Wadler’s Law</a>, the hottest discussions among developers happen on the smallest and least significance matters of syntax. It is therefore “natural” to address the issue of <em>code formatting</em> first. But of course, coding standards do not stop at syntax and the team should, step by step, increase the coverage of its standards to include more and more semantics.</p>
<h3 id="formatting-code">Formatting Code</h3>
<p>The code’s formatting rules is one particular area where standardization, across a team or even a whole programming environment, can and <em>should</em> be automatically enforced: . There have been, and will be, endless discussions among developers on such critically important topics as where to put curly braces, whether or not to use tabulations or spaces for indentation, how much space to put in various places of the code, etc. These discussions are a source of considerable bikeshedding, waste of time, and contribute exactly zero value to the end product; automating application of standard code format <a href="https://prettier.io/docs/en/precommit.html">before commit</a> or, even better, before <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html">saving files</a>.</p>
<p>However, this is dependent on the particular setup of each development environment and various problems might arise:</p>
<ul>
<li>The rules might be encoded in different tools to support different IDEs, which necessarily will lead to differences cropping up,</li>
<li>There might not be an overall agreed upon set of rules for the language which makes it hard for the team to settle the question,</li>
<li>The language itself might be hardly amenable to <a href="http://modernperlbooks.com/mt/2009/08/on-parsing-perl-5.html">parsing</a> and pretty-printing,</li>
<li>…</li>
</ul>
<p>I thus view it as a great step forward that some formatting tools decide to provide no configuration options, like the <a href="https://github.com/google/google-java-format">google-java-format</a> for Java, <a href="https://hackage.haskell.org/package/ormolu">Ormolu</a>, <a href="https://github.com/avh4/elm-format">elm-format</a> for Elm, or <a href="https://golang.org/cmd/gofmt/">gofmt</a> for Go. The next logical step would be for the compiler itself to enforce the formatting rules1 and only accept programs in <em>Normal Form</em><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>: This would guarantee a uniform layout across all code bases using this language and would have the added advantage of greatly simplifying parsing and more generally development of tools to manipulate the language.</p>
<h3 id="beyond-code-formatting">Beyond Code Formatting</h3>
<p>In the past, these took the form of extensive <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">Coding style guides</a> but as our tools mature, more and more standards can and are implemented as automated checks that are run as part of the software deployment pipeline. <a href="https://www.sonarqube.org/">SonarQube</a> is one of the many tools that automates coding standards, best practices, and rules. One thing to note is that coding standards encompass a wide range of different activities and code artefacts, from lexical and syntactic rules to design principles, through naming conventions and prescriptions. There are probably things which are not amenable to automation but there’s nevertheless a relentless effort from practitioners and researchers alike to Automate All The Things, and verify things like <a href="https://innig.net/macker/guide/">software architecture</a> or <a href="https://lgtm.com/">security</a>.</p>
<h2 id="collective-code-ownership">Collective Code Ownership</h2>
<p>Collective Code Ownership is that XP practice which strives to make all parts of the code collectively owned, meaning that every team member has the right and the duty to work on the whole software stack. There is no “preserve” that would be exclusive to some team members for reasons of skills, purpose, sensitivity, or seniority. A corollary to this strong statement is that every team member should feel at ease in every part of the code, and be able to understand what’s going on and make relevant changes and improvements in a way that any other team member can vouch for it.</p>
<p>Pair Programming or Mob Programming are XP practices which are conducive to building such a collectively shared understanding of the code, much more so than Pull Requests or Code Reviews<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. But they are only effective if all the people coding together can actually do so effectively and efficiently: If I pair program with an expert Vim golfer and I drive, then chances are I will be very slow and clumsy, at least initially; it will take time for me to get accustomed to my mate’s development environment, to use his or her keyboard shortcuts, commands, links, productively. And this is not specific to Vim of course, cognitive dissonance can come from every part of the environment: The keyboard (Dvorak/Colemak/Qwerty/Azerty/Bépo), the OS (Mac/Windows/flavors of Linux), the language settings, the window manager (tiling/non-tiling), the shell (Bash/fish/zsh), the IDE (VS/VS Code/IDEA/Eclipse), the color settings (dark vs. light colors, small vs. large screens) are all potential sources of pain for the newcomer.</p>
<p>Collective Code Ownership should be understood not only as an imperative to share understanding of the code but also to share understanding, knowledge, and skills of the tools to produce and work on that code. Everyone has his or her own idiosyncrasies, preferences, disgusts, personal history that accumulate over time and crystallize in specific tools and environments we feel comfortable with. This is of course totally fine. But this should not come in the way of building an inter-subjective experience of the code: if we all insist on viewing and manipulating the code through our own private lenses, chances are we will fail in developing any form of shared understanding, vision, or comprehensive knowledge of the code<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>.</p>
<h1 id="building-a-shared-environment">Building a Shared Environment</h1>
<p>Working remotely is actually a great opportunity to overcome particularism and standardize the team’s practices through a <em>Shared Development Environment</em>, that is some virtual machines (or containers) whose configuration is versioned alongside the code the team is working on. The idea hinges on <a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code</a> principles: Manage the infrastructure supporting the process using the same tools and principles with which we manage the product, but one step beyond. Do not only manage the production infrastructure, but also the development infrastructure, so that the whole stack of tools used to produce the code is shared by everyone, versioned in the source code, deployable at will.</p>
<p>Here is a description of the environment we have built in my previous teams on a Linux system.</p>
<h2 id="defining-the-image">Defining the image</h2>
<p>The first step is to define the virtual machine image. This we do using Hashicorp’s <a href="https://packer.io">Packer</a> which provides a way to build VM images deployable to most major clouds (at least GCP and AWS). Packer is configured with a JSON file that looks the following (I have shown only the configuration for building a GCP image):</p>
<pre><code>{
    &quot;builders&quot;: [
        {
            &quot;type&quot;: &quot;googlecompute&quot;,
            &quot;account_file&quot;: &quot;google-keys.json&quot;,
            &quot;project_id&quot;: &quot;my-project&quot;,
            &quot;source_image&quot;: &quot;ubuntu-1804-bionic-v20190212a&quot;,
            &quot;ssh_username&quot;: &quot;curry&quot;,
            &quot;image_family&quot;: &quot;build&quot;,
            &quot;image_name&quot;: &quot;build-{{timestamp}}&quot;,
            &quot;zone&quot;: &quot;eu-west1-b&quot;
        }
    ],
    &quot;provisioners&quot;: [{
    &quot;type&quot;: &quot;shell&quot;,
        &quot;inline&quot;: [
            &quot;sleep 30&quot;
        ]
    },{
        &quot;type&quot;: &quot;shell&quot;,
        &quot;script&quot;: &quot;build-env.sh&quot;
    }]
}</code></pre>
<p>There are much more sophisticated options to configure the image than using a plain shell script but this is sufficient for our needs. I won’t go into the details of the script here but it is pretty straightforward: it installs all the tools we need for development, which in this case includes docker, gcloud tools, and a whole bunch of utilities like curl, git, tmux, graphviz, wget, jq, python3, bzip2, neovim, ag… We settled on using Emacs as our code editor so it was also part of the installed packages.</p>
<p>Running <code>packer build build.json</code> will build a new image with the given name ready to be deployed over the configured infrastructure providers.</p>
<h2 id="defining-infrastructure">Defining Infrastructure</h2>
<p>The most interesting part is the definition of the infrastructure itself, which uses Terraform. The set of .tf files is interpreted by the terraform tool, it checks the consistency of the defined infrastructure, and compares it with the latest known persistent state drawn from cloud storage, to decide what to do: create, delete or modify various components of the infrastructure.</p>
<p>There is a module defining the standard configuration of a development VM:</p>
<pre><code>variable &quot;name&quot; {
  description = &quot;The name of the machine.&quot;
}

variable &quot;ssh_keys&quot; {
  description = &quot;The file containing ssh_keys.&quot;
}</code></pre>
<p>The variable ssh_keys contains the name of a file which lists the public keys of people who can access the machine. This makes it possible to control who can access the development environment through a file committed to the version control repository.</p>
<pre><code>output &quot;address&quot; {
  value = &quot;${google_compute_address.dev-address.address}&quot;
}

resource &quot;google_compute_address&quot; &quot;dev-address&quot; {
  name = &quot;${var.name}-address&quot;
}</code></pre>
<p>This output variable will show the IP address of the VM once it’s deployed, so we need to allocate a public IP address for this machine.</p>
<pre><code>resource &quot;google_compute_instance&quot; &quot;dev&quot; {
  name                      = &quot;${var.name}&quot;
  machine_type              = &quot;n2-standard-8&quot;
  zone                      = &quot;eu-west1-c&quot;
  allow_stopping_for_update = true

  tags = [ &quot;dev&quot;]

  boot_disk {
    auto_delete = true

    initialize_params {
      size  = 200
      image = &quot;build/build-1546597455&quot;
    }
  }

  network_interface {
    network = &quot;default&quot;

    access_config {
      nat_ip = &quot;${google_compute_address.dev-address.address}&quot;
    }
  }

  metadata {
    sshKeys = &quot;${file(var.ssh_keys)}&quot;
  }

  service_account {
    email  = &quot;build@my-project.iam.gserviceaccount.com&quot;
    scopes = [&quot;compute-rw&quot;, &quot;storage-rw&quot;, &quot;https://www.googleapis.com/auth/cloudkms&quot;]
  }</code></pre>
<p>This sets the core features of our VM: Machine type, location, boot disk size… The sshKeys metadata reads its content from the file we defined earlier, and the service_account definition requests the creation of a new service account with the given authorizations.</p>
<pre><code>provisioner &quot;file&quot; {
    source      = &quot;dev/bash_aliases&quot;
    destination = &quot;/home/curry/.bash_aliases&quot;

    connection {
      type = &quot;ssh&quot;
      user = &quot;curry&quot;
    }
  }
# ...
# more filea uploaded
# ...
  provisioner &quot;file&quot; {
    source      = &quot;dev/configure.sh&quot;
    destination = &quot;/home/curry/configure.sh&quot;

    connection {
      type = &quot;ssh&quot;
      user = &quot;curry&quot;
    }
  }</code></pre>
<p>We then upload configuration files (aka. dotfiles) which are also versioned and stored in the source tree, including configuration for the shell, the tmux, emacs, and a configuration script.</p>
<pre><code> provisioner &quot;remote-exec&quot; {
    inline = [
      &quot;chmod +x /home/curry/configure.sh&quot;,
      &quot;/home/curry/configure.sh&quot;,
    ]

    connection {
      type = &quot;ssh&quot;
      user = &quot;curry&quot;
    }
  }
}</code></pre>
<p>And finally we execute the configuration script that’s responsible for retrieving the source code, possibly cached build artifacts, and last minute configuration steps. There are a lot of possible variations on this baseline but the end goal is to ensure the team has at its disposal development environments which everyone can use and which are guaranteed to be consistently configured, thus making pair and mob programming sessions simple and easy to set up.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this post I have motivated why a shared development environment is desirable and useful, and demonstrated how easily it can be set up using basic IAAC tools. This practice can also be very useful in more complicated settings. I am working in a team which has to maintain a legacy piece of software built using a 4GL IDE called PowerBuilder, which is only available on Windows. One of the first things I did when joining the team was to create a couple of VMs on Azure cloud with several tools installed, including the PowerBuilder IDE, SQL Management Studio, Git, in order to make it straightforward to work collaboratively on the code. The experience is not quite as smooth as sharing a terminal through tmux or tmate, but it still only takes a few seconds to switch driver/navigator roles: Simply log into the VM and share screen. Not being an expert in Windows automation I have not yet gone beyond documenting the manual steps needed to configure the machine but this is only a matter of investing some time or finding the right person to help me.</p>
<p>Sharing the development environment is something that requires negotiation within the team, and that takes time to grow. Team members need to overcome their personal preferences and accept the discomfort of coding in an environment to which they might not be, at least initial, a hundred percent atuned to. The goal is not to impose The One True Way but on the contrary to share the knowledge and take the best that each setup has to offer. A versioned and pre-configured VM can perfectly host both Emacs and Vim, or can expose a VNC server that makes it easier to share graphical tools, or basically offer any kind of environment.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I thought this was the case for Elm and Go but it seems they do not still fail to compile ill-formatted source code.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>As my friend Christophe Thibaut used to say: “Code reviews is Pair programming for people who don’t fully trust each other”<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>What is developer productivity is still something that needs to be defined. Does writing more lines of code than other developers make you more productive?<a href="#fnref3">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Énigmes et complots&quot; de Luc Boltanski</title>
    <link href="http://abailly.github.io/posts/enigmes-et-complots.html" />
    <id>http://abailly.github.io/posts/enigmes-et-complots.html</id>
    <published>2021-01-31T00:00:00Z</published>
    <updated>2021-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Énigmes et complots&quot; de Luc Boltanski</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January 31, 2021</div>

<p>Luc Boltanski est un sociologue dont j’ai beaucoup apprécié <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/Tel/Le-nouvel-esprit-du-capitalisme">Le nouvel esprit du capitalisme</a> - co-écrit avec Eve Chiapello - et <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/NRF-Essais/Enrichissement">Enrichissement</a> - co-écrit avec Arnaud Esquerre. Le complotisme est un sujet d’actualité et ils ne sont pas nombreux les livres qui cherchent à comprendre ce que recouvre cette croyance, quelle est son histoire et sa signification contemporaine. Cet article synthètise quelques unes des réflexions qu’il m’a inspiré, en espérant qu’il donne envie de lire l’original bien sûr.</p>
<h1 id="résumé">Résumé</h1>
<p>Dans son livre, Boltanski part du constat que la même période historique qui va, en gros, du second Empire à la première guerre mondiale, voit :</p>
<ul>
<li>l’invention et le succès populaire croissant du roman policier, suivi de peu par le roman d’espionnage, succès qui ne se démentira plus ;</li>
<li>la “découverte” et la caractérisation par la psychiatrie de la <em>paranoïa</em> ;</li>
<li>la constitution de la sociologie comme une science humaine <em>enquêtant</em> sur la réalité sociale vécue par tout un chacun ;</li>
<li>la diffusion et l’utilisation politique du thème du complot dont <a href="https://fr.wikipedia.org/wiki/Les_Protocoles_des_Sages_de_Sion">Les protocoles des sages de Sion</a> est l’exemple canonique ;</li>
<li>le développement d’un <em>paradigme indiciaire</em><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> en histoire et en histoire de l’art sous l’impulsion de <a href="https://fr.wikipedia.org/wiki/Giovanni_Morelli">Giovanni Morelli</a> ;</li>
<li>enfin, le parachèvement, en Occident toujours, de la transformation du monde d’Ancien Régime et une société démocratique et industrialisée de plus en plus complexe.</li>
</ul>
<p>Le premier chapitre intitulé “RÉALITÉ / contre / <em>réalité</em>” lie ensemble ces phénomènes autour de la question de la définition de la <em>Réalité</em> : à l’effondrement des religions et des traditions comme source ultime d’explication de la réalité répond l’extension de l’État moderne qui, en contrôlant de plus en plus de pans de l’existence des individus - droit, travail, éducation, armée, police… - cherche à combler ce vide et reprendre le monopole de la définition de ce qui est “réel” ou non, ou à tout le moins du discours légitime sur cette réalité, à être le dépositaire du sens de l’existence de la Nation à laquelle il s’identifie. Cette construction de l’État-Nation moderne ne va pas sans provoquer des tensions dans la société et les individus, tensions que les différents phénomènes manifestent chacun à leur manière, soit qu’ils visent à les résorber, soit qu’ils les exacerbent en une critique de la réalité.</p>
<p>Chacun des chapitres suivants enquête donc sur ces phénomènes :</p>
<ul>
<li><em>Les enquêtes du détective londonien</em>, analyse les enquêtes de Sherlock Holmes et l’oeuvre de Conan Doyle comme le pur produit de la société victorienne, sûre de sa légitimité et de sa puissance, le détective solitaire et génial “réparant les accrocs” à la réalité que sont les crimes ;</li>
<li>le chapitre <em>Les enquêtes du policier parisien</em> s’attache au cas de Maigret et à l’oeuvre de Simenon ; il montre la spécificité française du genre policier comme vecteur de critique sociale et les différences entre les conceptions françaises de l’État comme machine administrative indépendante du politique, et anglaises comme garant du Droit ;</li>
<li><em>L’identification des agents secrets</em> traite de l’émergence du roman d’espionnage à la veille de la Première Guerre Mondiale et de son développement futur, et du thème du complot, que ce soit en tant que subversion de l’état et de l’ordre existant, ou comme partie intégrante de l’État lui-même et outil de contrôle de la société par les “dominants” ou les “puissants” ; et donc de l’extension du domaine de la lutte pour la définition de la réalité ;</li>
<li><em>L’interminable enquête des paranoïaques</em> élargit encore le sujet et s’intéresse à l’émergence de la théorie du complot d’abord vue comme maladie mentale, puis comme “maladie” du corps social, à mesure que se parachève la construction de la société libérale et capitaliste du XXème siècle ;</li>
<li><em>La police de l’enquête sociologique</em> enfin, traite de la sociologie et des tentatives de disqualification qu’elle a subi et subit encore de la part de nombres d’intellectuel·le·s.</li>
</ul>
<h1 id="idées-analyse">Idées &amp; Analyse</h1>
<h2 id="sherlock-holmes-gardien-de-lordre-bourgeois">Sherlock Holmes, gardien de l’ordre bourgeois</h2>
<p>Le détective privé, parce qu’il n’est pas assujeti aux règles du fonctionnaire et parce qu’il est, au fond, du même monde que l’élite bourgeoise et aristocratique qui l’emploie, peut se permettre d’appliquer des règles morales “supérieures” difficiles à transcrire dans la loi car applicables uniquement aux “être supérieurs” ayant reçu l’éducation nécessaire : honneur, dignité, “noblesse oblige”, rectitude. Ce faisant il rétablit <em>l’ordre</em> menacé par le <em>crime</em> qui, d’une manière ou d’une autre, vise toujours à transgresser cet ordre, voire à le subvertir. Implicitement, le criminel est un anarchiste en puissance dont les activités ne peuvent mener qu’à la <em>révolution</em>.</p>
<p>Il permet de résoudre la tension entre un État égalitaire et libéral, et une société stratifiée, profondément inégalitaire et marquée par l’autoritarisme. L’État lié par des lois et règles démocratiques, ne peut restaurer l’ordre quand celui-ci est menacé par des individus faisant partie de cette élite destinée par sa naissance et son appartenance à la classe dirigeante, à être les garants et <em>tuteurs</em> de cet ordre.</p>
<h2 id="maigret-fonctionnaire-prolétaire">Maigret, fonctionnaire prolétaire</h2>
<p>La fonction publique, les organes de l’État, cherchent à s’émanciper dans leurs règles de fonctionnement, promotions, recrutements, de la tutelle politique, de sorte qu’elle (ou il) constitue un <em>champ</em> comme le montre P.Bourdieu dans <a href="https://www.seuil.com/ouvrage/sur-l-etat-pierre-bourdieu/9782020662246">Sur l’État</a>. Ce faisant, elle induit chez ses membres un <em>dédoublement</em> nécessaire entre la personne publique dépositaire de l’autorité de l’État et la personne privée avec ses affects propres. L’administration est sa propre finalité ce qui peut tendre à produire une <em>perte de sens</em> du travail bureaucratique.</p>
<p>Parce qu’il est <em>à la fois</em> un prolétaire, c’est-à-dire un travailleur qui n’a aucun contrôle sur les conditions matérielles de son existence, intégralement assujeties aux règles de l’administration, et un serviteur de l’État investi d’une fraction de son autorité ; donc parce qu’il est un homme ou une femme ordinaire chargée d’interpréter des situations complexes au moyen de règles nécessairement contradictoires et incomplètes, le fonctionnaire fait souvent preuve de “sadisme” : il ou elle jouit de son pouvoir sur autrui et simultanément de la compassion qu’il éprouve envers ses “administrés”. C’est ainsi que Maigret peut, en tant que policier, envoyer des criminels à l’échafaud, tout en faisant preuve de compassions pour leurs proches.</p>
<h2 id="libéralisme-aristocratique-contre-conservatisme-populaire">Libéralisme aristocratique contre conservatisme populaire</h2>
<blockquote>
<p>“… la tonalité de gauche de Maigret renvoit à une expression particulière de la gauche antilibérale. Celle qu’elle a pris dans le vichisme, attachée à forger un compromis entre étatisme autoritaire, omniprésence de l’administration, idéologie patriarcale, traditionnalisme, célébration du bon sens populaire, xénophobie et nationalisme exacerbé” p. 174</p>
</blockquote>
<p>Sherlock et le roman anglais renvoient l’image d’un État de droit, libéral, dominé par une classe ou caste de privilégiés donc d’ordre <em>aristocratique</em> ; quand Simenon et Maigret renvoient celle d’un État bureaucratique et d’une société fragmentée en “milieux” plutôt que stratifiée en classes sociales.</p>
<h2 id="lessence-de-létat-cest-la-guerre">L’essence de l’État, c’est la guerre</h2>
<p>Ce que montre le roman d’espionnage c’est d’abord que même dans les apparences de la paix, l’État est toujours en guerre et donc que l’esence de l’état ou sa <em>raison d’être</em>, son <em>effort pour persister dans son être</em> comme le dirait Spinoza, c’est la <em>guerre</em> puisque par nature il rivalise, voire lutte pour son existence, contre d’autres états. On peut se demander si ce n’est pas une vision historiquement datée, produit des états-nations européens impérialistes et colonialistes.</p>
<h2 id="peuple-de-droite-et-peuple-de-gauche">Peuple de droite et peuple de gauche</h2>
<p>Dans la critique “révolutionnaire” de droite, nationaliste, des premiers romans d’espionnage comme <a href="https://fr.wikipedia.org/wiki/Les_39_Marches_(roman)">Les 39 marches</a> le peuple désigne la <em>nation</em>, c’est-à-dire les “natifs”, par opposition aux élites capitalistes corrompues et aux révolutionnaires, tous deux “internationalistes” ou “cosmopolites” alors que dans la critique de gauche, le peuple désigne les prolétaires, les dominés. On assiste dans les années 2000 à une convergence de ces “deux peuples” dans la populisme souverainiste, à la fois social et nationaliste, ou souverainiste.</p>
<h2 id="limmédiat-de-lexpérience-comme-antidote-au-complot">L’immédiat de l’expérience comme antidote au complot</h2>
<p>Le complotisme nait de la médiation de nos pensées et de nos sentiments, du fait que nous nous sentons <em>agis</em>, que nous n’avons pas accès au monde mais à sa représentation dont les multiples possibilités, l’infinie régression des interprétations, des commentaires, des gloses et des opinions nous font vivre dans un labyrinthe de miroirs se réfléchissant à l’infini. Seule la croyance <em>absolue</em> en tel ou tel principe est alors à même de nous empêcher de sombrer, croyance que rien ne pourra ébranler car nous l’avons nous même placée au fondement de notre existence.</p>
<p>Seule la suspension de toute médiation, donc l’expérience directement vécue, l’évidence de la vie réellement vécue<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> et non <em>représentée</em>, peut nous faire sortir du labyrinthe en supprimant toute possibilité de délégation ou de réinterprétation. Ce que je ressens, c’est moi qui le ressent.</p>
<h2 id="la-paranoïa-comme-arme-sociale">La paranoïa comme arme sociale</h2>
<p>La définition clinique de <em>paranoïa</em> émerge au tournant du XXème siècle des travaux de psychiatres et médecins pour caractériser une forme de comportement, considéré comme pathologique, de remise en question radicale de la réalité. Plus tard, le concept de <em>paranoïa</em>, étendu de la psychologie à la sociologie devient <em>théorie du complot</em> ou <em>complotisme</em>, la croyance en une réalité cachée.</p>
<p>Cette caractérisation en termes psychiatriques n’est que la version moderne d’une critique sociale <em>conservatrice</em> récurrente depuis le XVIIème siècle disqualifiant les “demi-savants”<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, les “intellectuels sans emploi”, toutes ces personnes dont le niveau d’éducation et les connaissances ne s’accompagnent pas d’une position sociale digne d’elles et chez qui le ressentiment se transforme en critique radicale de la société, dont Rousseau est le saint patron.</p>
<p>Autrement dit, l’accusation de <em>complotisme</em> est aussi, ou peut-être surtout, un moyen de disaqualifier du jeu politique et social tous ceux qui n’en acceptent pas les règles.</p>
<blockquote>
<p>“Il est donc possible que l’essor des théories de la conspiration, témoignant d’une épidémie de paranoïa mondiale, au rang de problème majeur soit surtout le résultat d’un effet de représentation”</p>
</blockquote>
<h2 id="sociologie-critique-et-théorie-du-complot">Sociologie critique et théorie du complot</h2>
<p>Quel est l’objet de la sociologie ? Si ce sont des groupes pré-existants ou pré-identifiés, ou constitués par l’enquête sociologique, ne court on pas le risque de prêter des intentions à ces entités sociales construites et donc de verser dans le complotisme puisque ces groupes étant constitués d’individus, leur “intention” ne peut provenir que de leur collusion ? C’est l’argument développé par <a href="https://fr.wikipedia.org/wiki/Nathalie_Heinich">Nathalie Heinich</a> dans sa critique de la “sociologie du soupçon”, c’est surtout l’argument développé dès les années 40 par <a href="https://www.persee.fr/doc/phlou_0035-3841_1960_num_58_60_5062_t1_0632_0000_1">Karl Popper</a>, entre autres, pour attaquer notamment le marxisme, l’hégelianisme et in fine le communisme.</p>
<p>À cette “sociologie collective” s’oppose une “sociologie individualiste” qui pour rendre compte des interactions entre individus et des phénomènes sociaux s’appuie essentiellement sur le concept de <em>marché</em> versant rapidement vers une vision libérale - ou néo-libérale, voire darwiniste - des rapports sociaux.</p>
<h2 id="dépasser-la-malédiction-de-popper">Dépasser la “Malédiction de Popper”</h2>
<p>Comment la sociologie peut-elle échapper à cette critique, produire un travail scientifique c’est-à-dire une certain objectivation des phénomènes ? Une première solution est proposée par l’école bourdieusienne, c’est le concept d’<em>habitus</em> soit “la capacité des agents à s’orienter dans le monde social et à adopter des conduites adaptées aux conditions objectives sans obéir à une règle”<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, habitus qui est le produit des conditions de vie concrètes des individus et donc dépendant d’un <em>milieu</em>, des groupes dont l’individu fait partie, et aussi celui des actions et discours des individus. L’habitus permet de dépasser la dichotomie rigide entre déterminisme et individualisme, il laisse de la place à l’initiative individuelle, à l’improvisation, à l’adaptation et à l’innovation, tout en prenant en compte le poids de l’environnement.</p>
<p>Une seconde solution, développée notamment par Bruno Latour mais déjà présente dans les travaux de Gabriel Tarde dans <a href="http://classiques.uqac.ca/classiques/tarde_gabriel/lois_imitation/tarde_lois_imitation.pdf">Les lois de l’imitation</a>, est de considérer l’individu comme inséré dans un <em>réseau</em> social dont les multiples interactions et relations produisent des entités collectives, à la manière dont un comportement émerge d’interactions simples dans un système complexe.</p>
<h2 id="privé-et-public">Privé et public</h2>
<p>La distinction entre le <em>privé</em> et le <em>public</em> est au coeur du libéralisme : c’est en séparant la figure publique, les charges et offices exercées sous le régime de la transparence ; de la figure privée protégée par le droit à la <em>vie privée</em> et les libertés fondamentales, que se crée le <em>citoyen</em>, l’État moderne, les institutions de <em>l’état de droit</em>. Jusqu’au XVIIIème siècle en Europe, il n’y a pas de séparation entre sphères publiques et privées, les individus, des roturiers aux nobles et aux princes sont liés les uns aux autres par des droits et obligations les engageant entièrement, sous le regard de Dieu.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Comme je le disais en introduction, je retire de ce livre une position plus nuancée qu’auparavant sur le <em>complotisme</em>, et surtout sur l’usage qui est fait de ce terme pour disqualifier toute position critique vis-à-vis d’une certaine vision de la <em>réalité</em>, qu’elle soit d’ailleurs majoritaire ou minoritaire, dominante ou dominée.</p>
<p>La question à laquelle il ne répond pas, ou très indirectement, est de savoir comment faire ou refaire société dans un monde où s’affrontent non plus des idées ou des conceptions politiques, mais des <em>réalités</em> et des systèmes de croyances complets ? Comment débattre, discuter, convaincre - ou se laisser convaincre - quand “la réalité est ailleurs”, quand c’est toute le processus de réflexion lui-même qui est remis en cause par des anathèmes croisés ?</p>
<div class="figure">
<img src="/images/2021-01-libe-chronique.jpg" alt="Article paru dans Libération du 23 janvier 2021" style="width:100.0%" />
<p class="caption">Article paru dans <em>Libération</em> du 23 janvier 2021</p>
</div>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Ce terme est emprunté à <a href="https://fr.wikipedia.org/wiki/Carlo_Ginzburg">Carlo Ginzburg</a> dans l’article <a href="https://f.hypotheses.org/wp-content/blogs.dir/2002/files/2016/09/Ginzburg-Signes-traces-pistes.pdf">Signes, traces, pistes</a> repris dans le livre <a href="https://editions-verdier.fr/livre/mythes-emblemes-traces/">Mythes emblèmes traces</a>. Cet article et ce livre mériteraient eux aussi un article en bonne et dûe forme, d’autant plus qu’il est abondamment cité par Boltanski, mais les journées ne font que 24 heures.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Les situationnistes qui “ne cessent de dévoiler le peu de réalité de la réalité” comme le dit Boltanski porteront à l’incandescence au XXème siècle cette critique de la représentation, cette <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/Blanche/La-Societe-du-Spectacle">Société du spectacle</a>.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Il est savoureux que ce même terme soit utilisé par Pierre Bourdieu à de nombreuses reprises pour disqualifier ces mêmes critiques “conservateurs” proliférant notamment dans les médias.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="https://www.cnrseditions.fr/catalogue/philosophie-et-histoire-des-idees/dictionnaire-international-bourdieu/">Dictionnaire international Bourdieu</a>, p.397, Gisèle Sapiro (dir.), Paris, CNRS, 2020.<a href="#fnref4">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Modern Emacs for Haskell</title>
    <link href="http://abailly.github.io/posts/a-modern-haskell-env.html" />
    <id>http://abailly.github.io/posts/a-modern-haskell-env.html</id>
    <published>2020-10-12T00:00:00Z</published>
    <updated>2020-10-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Modern Emacs for Haskell</h1>

  <h2 class="subtitle">Setting up a more modern development environment with LSP</h2>

<div class="info">Posted on October 12, 2020</div>

<p>For a couple of years now there has been an upsurge of activity on the front of Haskell Tooling and IDE support. As explained in <a href="https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html">this blog post</a> from Neil Mitchell, there is a need, and now a will, to equip Haskell with a more modern development environment based on the now standard <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> introduced by Visual Studio Code. This initiative gave rise to the <a href="https://github.com/haskell/haskell-language-server">Haskell Language Server</a> which aims at fully supporting LSP for the Haskell eco-system and becoming the standard “IDE”.</p>
<p>I have used various solutions for hacking Haskell in Emacs which all are now either extinct or on the path towards extinction:</p>
<ul>
<li><a href="http://haskell.github.io/haskell-mode/">haskell-mode</a> is the oldest one and the one I of course started with,</li>
<li>At some point I switched to <a href="https://github.com/DanielG/ghc-mod">ghc-mod</a> which at the time, ca. 2013-2014 was offering the best experience. It was the first tool to provide basic things like autocompletion, jump to definition and other niceties we’ve come to appreciate from our IDEs,</li>
<li>Then <a href="https://chrisdone.github.io/intero/">intero</a> came out as <a href="https://docs.haskellstack.org/en/stable/README/">stack</a> usage grew and I have used happily for a few years. It was a breeze to install in Emacs and integrated nicely with stack, reusing its configuration files to automatically provide all needed dependencies and enabling fast turnaround from a properly configured REPL. Sadly intero development stopped a couple years ago,</li>
<li>I have also used <a href="https://github.com/ndmitchell/ghcid">ghcid</a> which is pretty much editor or IDE-agnostic, it was (is?) great for providing ultra fast edit-compile-test cycle and it was the only tool that enable me to do <a href="https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864">Test-Commit-Revert</a> in Haskell,</li>
<li>I am not doing anymore Haskell development in my day job so I have switched back to using haskell-mode which at least worked and provided basic support. I never spent the time however to delve into its configuration details hence my environment was pretty simple and I mostly used syntax highlighting and REPL interaction.</li>
</ul>
<p>This week-end, following the announcement in the Haskell Weekly News that HLS supported case-splitting and hole resolution, I decided to bite the bullet and reconfigure my Emacs to use it. Here are the steps I went through in the hope it will be useful for someone else.</p>
<p>First, I spent a lot of time fiddling with my <code>.emacs</code> and packages: I somehow lost a bunch of packages when I tried to install the relevant packages needed for LSP, possibly as a consequence of running <code>package-autoremove</code> without really understand what I was doing, so I add to fix my configuration one <code>require</code> at a time to ensure packages would be resolved if non existent.</p>
<p>I ended with the following configuration with is mostly copied verbatim from <a href="https://github.com/haskell/ghcide/#using-with-emacs">ghcide</a>’s configuration, except for the variables related to process execution in the <code>lsp-haskell</code> package</p>
<pre><code>(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
(use-package yasnippet
  :ensure t)
(use-package lsp-mode
  :ensure t
  :hook (haskell-mode . lsp)
  :commands lsp)
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(use-package lsp-haskell
  :ensure t
  :config
 (setq lsp-haskell-server-path &quot;haskell-language-server-wrapper&quot;)
 (setq lsp-haskell-server-args ())
   ;; Comment/uncomment this line to see interactions between lsp client/server.
  (setq lsp-log-io t))</code></pre>
<p>I then proceeded to install <a href="https://github.com/haskell/ghcide">ghcide</a> but it turned out to not be a good idea.</p>
<p>Then I installed <a href="https://github.com/haskell/haskell-language-server">haskell-language-server</a>. I opted for the “install from source” option as it seemed the simplest and safest to me. Cloning, building and isntalling it was pretty straightforward:</p>
<pre><code>&gt; git clone https://github.com/haskell/haskell-language-server
&gt; cd haskell-language-server
&gt; stack install.hs hls-8.8.4</code></pre>
<p>As this is done through <code>stack</code>, it will install the relevant GHC version automatically in its own directory, and the binary for the server will be installed in <code>~/.local/bin</code> by default.</p>
<pre><code>&gt; ls -l ~/.local/bin/haskell-*
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-8.8
-rwxr-xr-x  3 arnaud  staff  124958940 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-8.8.4
-rwxr-xr-x  1 arnaud  staff    3168996 Oct 11 11:20 /Users/arnaud/.local/bin/haskell-language-server-wrapper</code></pre>
<p>As I understand it, the executable that needs to be pointed to is the <code>xxx-wrapper</code> which is responsible for starting the server and delegates the actual parsing and compiling to the correct backend:</p>
<div class="figure">
<img src="/images/emacs-lsp-process-tree.png" />

</div>
<p>Emacs needs to be able to find the executable. In my case, I have added the directory top the <code>exec-path</code> variable of Emacs and to the <code>PATH</code> environment variable:</p>
<pre><code>(setenv &quot;PATH&quot; (concat (getenv &quot;HOME&quot;) &quot;/.local/bin:&quot; &quot;/usr/local/bin:&quot; (getenv &quot;PATH&quot;)))

(setq exec-path
      (reverse
       (append
        (reverse exec-path)
        (list (concat (getenv &quot;HOME&quot;) &quot;/.local/bin&quot;)  &quot;/usr/local/bin&quot; ))))</code></pre>
<p>It did not worked the first time I tried to open an Haskell source file and it was useful to be able to got to <code>*lsp-log*</code> and other log buffers generated by the various processes to try to understand why the LSP server was crashing at start. After some tests and poking around on the web, I realised I was missing <strong>the critically important part</strong>: Correct configuration for <a href="https://github.com/mpickering/hie-bios">hie-bios</a> which is a low-level library that’s responsible for providing the correct GHC configuration for a given project or set of files.</p>
<p><a href="https://github.com/mpickering/hie-bios">hie-bios</a> is configured through a <code>hie.yaml</code> file which it locates somewhere up the path from where it’s started. If it does not find one, it uses a default configuration which is most probably incorrect for the project, unless it’s something very simple like a single file. So I ended up writing a <code>hie.yaml</code> at the <strong>root</strong> of the project which is considered to be where the <code>.git</code> directory lives. I am using stack and have no plans to switch, but this implies GHC might be installed by stack and not in the PATH, so we need to tell the server to use a stack-based configuration</p>
<pre><code>cradle:
  stack:</code></pre>
<p>This is however not enough if you have more than one component and the <code>stack.yaml</code> file is not located in the current directory, so I needed to add relevant configuration to ensure it finds all the dependencies, both for the library <em>and</em> for the tests. So here is how a configuration for a library with tests look like:</p>
<pre><code>cradle:
  stack:
  - path: &quot;./src&quot;
    component: &quot;hstore:lib&quot;
  - path: &quot;./test&quot;
    component: &quot;hstore:test:hstore-test&quot;</code></pre>
<p>It’s a little bit annoying one has to maintain this file by hand as it could easily be generated from the <code>package.yaml</code> or <code>.cabal</code> files. An <a href="https://github.com/mpickering/hie-bios/issues/122">issue</a> is open in hie-bios and shall be resolved for <a href="https://github.com/haskell/cabal/pull/6241">cabal</a> soon.</p>
<p>So after a couple hours, I was finally able to open a Haskell file and enjoy the pleasure of being able to case-split, introduce lambdas and resolve holes automatically from within Emacs, thanks to the universal <code>s-l a a</code> keys (where <code>s-l</code> stand for <code>Super + l</code>, with <code>Super</code> being <code>Command</code> on a Mac).</p>
<p>This can give surprising results when, for example, give the following code:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Bar</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Baz</span> <span class="dt">String</span>

<span class="ot">frobnicate ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
frobnicate <span class="fu">=</span> _</code></pre></div>
<p>one uses <code>Attempt to fill hole</code> command:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Bar</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Baz</span> <span class="dt">String</span>

<span class="ot">frobnicate ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
frobnicate <span class="fu">=</span> (\ f
   <span class="ot">-&gt;</span> <span class="kw">case</span> f <span class="kw">of</span>
        (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> []
        (<span class="dt">Baz</span> l_c)
          <span class="ot">-&gt;</span> <span class="kw">case</span> l_c <span class="kw">of</span>
               [] <span class="ot">-&gt;</span> l_c
               ((<span class="fu">:</span>) c l_c3)
                 <span class="ot">-&gt;</span> (<span class="fu">:</span>)
                      (<span class="kw">case</span> l_c3 <span class="kw">of</span>
                         [] <span class="ot">-&gt;</span> c
                         ((<span class="fu">:</span>) c4 l_c5) <span class="ot">-&gt;</span> c4)
                      (<span class="kw">case</span> l_c3 <span class="kw">of</span>
                         [] <span class="ot">-&gt;</span> l_c3
                         ((<span class="fu">:</span>) c4 l_c5) <span class="ot">-&gt;</span> l_c5))</code></pre></div>
<p>More interestingly, case-split is particularly useful to cover all constructors of a datatype. Given:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> _</code></pre></div>
<p>Typing <code>s-l a a</code> then selecting <code>Case...</code> when the cursor is on the hole yields:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> (<span class="kw">case</span> x <span class="kw">of</span>
   (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> _
   (<span class="dt">Baz</span> l_c) <span class="ot">-&gt;</span> _)</code></pre></div>
<p>Then I can <code>Replace with []</code> on the first hole and <code>Homomorphic case-split...</code> on the second hole, yielding:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fun ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
fun x <span class="fu">=</span> (<span class="kw">case</span> x <span class="kw">of</span>
   (<span class="dt">Bar</span> i) <span class="ot">-&gt;</span> []
   (<span class="dt">Baz</span> l_c) <span class="ot">-&gt;</span> (<span class="kw">case</span> l_c <span class="kw">of</span>
      [] <span class="ot">-&gt;</span> []
      ((<span class="fu">:</span>) c l_c3) <span class="ot">-&gt;</span> (<span class="fu">:</span>) _ _))</code></pre></div>
<p>I have yet to test this new setup on a significant project but I am already quite pleased by the speed of the provided feedback which matches ghcid and the integration in Emacs.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Team Practices: Daily Log</title>
    <link href="http://abailly.github.io/posts/team-log.html" />
    <id>http://abailly.github.io/posts/team-log.html</id>
    <published>2020-10-08T00:00:00Z</published>
    <updated>2020-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Team Practices: Daily Log</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on October  8, 2020</div>

<p>Writing a personal diary is pretty commonplace and there exists quite a few tools out there to do that. I personally favor Emacs for casual personal journalling and have been using <a href="">org-mode</a> since at least 2014, and some other tools prior to that like <a href="">remember.el</a>. For a few years now, I have been trying to extend that practice from the individual to the collective by writing a <strong>Team’s Log</strong>. I stole the idea from a talk Dan North gave where he mentioned the <em>Captain’s Log</em> as one of the “advanced agile” or “post-agile” practices he thought effective to improve a team’s efficiency and effectiveness.</p>
<h1 id="why-do-it">Why do it?</h1>
<p>I usually work in teams on software products that are created, evolved and maintained over the course of months, years or even a lifetime. I often feel the need to informations from the past, for various reasons:</p>
<ul>
<li>to understand the context in which some decision was made,</li>
<li>to check if an issue I am working on is really the same issue I worked on a while ago,</li>
<li>to find some details of a discussion that did not translate to a commit message or a specific wiki page,</li>
<li>to quickly catch-up with the team when I have been off for a few days or even weeks,</li>
<li>…</li>
</ul>
<p>More generally, I like the idea of keeping in a written form something that I call a <em>Collective Stream of Consciousness</em>, a collection of more or less detailed contextual notes that detail what we think of a problem at some point in time, how we resolved some issue, even which sequence of commands or actions we had to run in order to reach some conclusion or extract some data.</p>
<p>Writing things is essential to structure, learn and share. In his series of book on groupthink and decision making, <a href="decisions-absurdes.html">Christian Morel</a> motivates the importance of writing things down for organisations in order to breed a culture of safety and continuous learning. By insisting that knowledge be written, structured, and continuously read and reviewed, organisations build an operational <em>Body of Knowledge</em> that helps turn unexpected or novel events into routine, spreads knowledge among the organisation’s members, speeds up newcomers onboarding.</p>
<p>In the first volume series of book on Quality Software Management, <a href="https://geraldmweinberg.com/Site/QSM_vol_1.html">System Thinking</a>, Jerry Weinberg proposes a hierarchy of <em>patterns</em> for organisations that ranges from the <em>Oblivious</em> to the <em>Congruent</em>. A key factor in taming chaos is collecting information, data, and making that information and data <em>open</em> for everyone to see. At first, we might fail to collect the right data or measure the right thing, and we might fail to collect it in the right way, confusing precision, accuracy and relevance. But this is the first step towards improving the level of understanding and control we have on the <em>process</em> and the <em>Culture</em> of the organization.</p>
<p>I view building this <em>Collective Stream of Consciousness</em> as a way to gather raw material for further analysis and synthesis: By writing things down, I am more prone to memorize events and notice patterns that can later be refined into more specific documents.</p>
<h1 id="how-to-do-it">How to do it?</h1>
<h2 id="practice">Practice</h2>
<p>My current practice is actually pretty simple: In the team’s wiki, there is one page for each (working) day, which is used by all team members as a shared notebook to log what they do, problems they have, solutions they find… When a month is over, we move relevant pages</p>
<p>Here is a screen capture from our team’s wiki (in this case Azure DevOps) showing a random page’s content:</p>
<div class="figure">
<img src="/images/sample-team-log.png" style="width:100.0%" />

</div>
<p>In this case, I was trying to understand why tests were slow and I graphed the distrbution of execution times for “writes” using some <a href="http://www.gnuplot.info/">GNUPlot</a> script. This picture also shows the tree of daily log entries, with daily pages “archived” under each month.</p>
<p>Other category of fragments I<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> write in the log are:</p>
<ul>
<li>Action plan for the day, often listing actions people talked about in the daily meeting,</li>
<li>Comments and “narratives” while working on some issue, along with a link to the issue tracker,</li>
<li>Details about operations, like configuring a service or troubleshooting a malfunction in Azure, complete with detailed commands run, output, problems and solutions I faced….</li>
<li>Meeting minutes, which I sometimes move to their own page under the <code>Meetings</code> section when they are recurring meetings (retrospectives, sprint planning),</li>
<li>Random thoughts on some topic which does not warrant having its own page yet.</li>
</ul>
<p>Pair Programming lends itself nicely to journaling: The navigator can write down decisions, problems, actions, or questions while the driver writes code. When switching role, the new navigator can quickly go through the log and catch up with previous navigator’s thought process.</p>
<p>I try to use as much hyperlinks to other parts of our “information system” (issue tracker, code repository, CI, tests reports) as I can in order to enrich the context and allow readers, whether other team members or my future self, to be able to gather as much details as they need to make this information useful.</p>
<h2 id="tools">Tools</h2>
<p>As mentioned previously, in my current team we are using the standard <a href="https://docs.microsoft.com/en-us/azure/devops/project/wiki/about-readme-wiki">DevOps Wiki</a> as our infrastructure is 100% Azure-based. Over the past few years, I have tried various options:</p>
<ul>
<li>As an avid Emacs and casual <a href="https://orgmode.org/">org-mode</a> user, I initially tried to maintain an org-mode journal in the source tree, committing it like any other piece of documentation. While this works fine when working alone, it does not scale to multiple users and team use due to merge conflicts: Everyone is editing the same file over and over, usually in close places,</li>
<li>An online wiki is easier to use but most wikis out there do not support concurrent editing of same page by different users, thus leading to the same merge conflict issues. Moreover, wikis are usually edited directly in the browser which means I need to switch tools when programming,</li>
<li><a href="https://docs.google.com">Google docs</a><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> provides good support for collaborative online editing. This is my go-to option when there’s no in-house Wiki solution as wiki are more hyperlinks-friendly esp. when integrated in a development environment,</li>
<li>Out of online tools I have used, <a href="https://www.notion.so/">Notions</a> offers the best experience when working in a larger team with 2 or 3 groups of people simultaneously editing the same daily log page.</li>
</ul>
<p>I have yet to discover the perfect tool to support that practice. Such a tool would at least:</p>
<ul>
<li>Support collaborative concurrent editing of the same “note” with automatic conflicts resolution,</li>
<li>Provide seamless integration into common tools used in software development in order to easily capture contextual information when creating notes,</li>
<li>Enable easy linking to other notes through completion and navigation,</li>
<li>Efficiently index notes and provide powerful search capabilities.</li>
</ul>
<p><a href="https://www.orgroam.com/">org-roam</a> is a recent evolution of org-mode inspired by the Zettelkasten method that provides some of these capabilities, but it does not provide collective editing support nor online storage and retrieval of notes.</p>
<h1 id="assessment">Assessment</h1>
<p>I have found the practice of writing a Team’s log very helpful in various circumstances, whether it be to lookup some command I have used before, to investigate recurring bugs and issues, or more generally to dump random ideas and thoughts that sometimes happen to be useful to me or teammates. Writing things down helps structure one’s thought process bringing order and persistance to the somewhat confusing, idiosyncratic and transient stream of consciousness. This is not only valuable at a personal level but also at a the team’s level as it fosters key eXtreme Programming practices like <a href="">Collective Code Ownership</a> and <a href="">Coding Standards</a>.</p>
<p>Turning implicit assumptions, conclusions, perceptions, and ideas into an explicit <em>Stream of consciousness</em> takes the collective to another level whereby it’s not only the <em>Code</em> that’s collectively owned but the <em>process</em> that produces the code, which unlocks the potential for the organisation, at the team level or higher, to apply pattern 3, 4 or even 5 organisations.</p>
<p>Of course, this only works if all the team’s members are willing to engage with that practice, writing and <em>reading</em> the log and actively curating its content.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Yes, this should be <em>we</em> but it’s very often <em>I</em>. More on this later,<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Or any other kind of collaborative editing tool like <a href="https://framapad.org/en/">Framapad</a><a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Le maniement des hommes&quot;</title>
    <link href="http://abailly.github.io/posts/maniement-des-hommes.html" />
    <id>http://abailly.github.io/posts/maniement-des-hommes.html</id>
    <published>2020-03-21T00:00:00Z</published>
    <updated>2020-03-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Le maniement des hommes&quot;</h1>

  <h2 class="subtitle">Éssai sur la rationalité managériale</h2>

<div class="info">Posted on March 21, 2020</div>

<p><a href="https://www.editionsladecouverte.fr/catalogue/index-Le_maniement_des_hommes-9782707190260.html"><em>Le maniement des hommes</em></a> est un essai de Thibault Le Texier qui est paru en 2016 aux éditions <em>La découverte</em>, et comme le sont très souvent les livres de cet éditeur, c’est un ouvrage intelligent et passionnant. Son propos est d’exposer comment le <em>management</em> à partir des écrits fondateurs de Frederick Taylor constitue une <em>rationalité</em> propre, avec son langage, ses modes de pensées, ses buts. Le <em>management scientifique</em> n’a de fait rien de scientifique, c’est-à-dire qu’il n’est pas une science, qu’il ne fait pas partie du domaine de rationalité spécifique de la science expérimentale<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, ni d’ailleurs de celui des sciences humaines qui s’élabore à peu près à la même période, au tournant du XXème siècle.</p>
<p>Mais le management ne se réduit pas non plus à un genre particulier de <em>rationalité marchande</em> : il n’a pas pour but de maximiser les profits ni pour objet principal le marché. C’est ce que démontre le fait que le management, parti de la petite industrie, a conquis l’ensemble des formes d’organisations sociales : gouvernements, services publics, associations, organisations non gouvernementales, il n’est pas jusqu’à l’armée, la justice ou même la famille qui ne soient désormais soumis aux règles du management et à son impératif d’<em>efficacité</em>.</p>
<h1 id="génèse-du-management">Génèse du management</h1>
<p>Le terme de <em>management</em> apparait semble-t’il au XVIIIème siècle et sa proximité morphologique avec le <em>ménage</em> ou la <em>ménagère</em> n’est pas fortuite : le management est d’abord l’art et la manière de prendre soin des enfants et de toutes les personnes dépendantes de la maisonnée. Par extension, il désigne l’organisation de la ferme et plus généralement de l’économie domestique.</p>
<p>La première vague de littérature de management, aux XVIIIème et XIXème siècles, a pour objectif de <em>prendre soin</em> de l’objet du management que ce soit un animal, une culture, un enfant ou un malade. Il y a toujours une dimension d’attachement personnel entre le <em>manager</em> et le <em>managé</em> et le but visé, quand il s’agit d’êtres humains, est l’autonomie de la personne : l’encadrement vise à faire <em>grandir</em> les individus, à les éduquer et les former, pas à les <em>contrôler</em>. Cette attitude est parfaitement adaptée à la société patriarcale et hiérarchisée de la première révolution industrielle, et s’incarne dans la figure du <em>patron paternaliste</em>. Le tissu social y est encore imprégné de solidarités et de dépendances inter-personnelles, de valeurs et de morale, quand bien même les patrons n’hésitent pas à exploiter brutalement la masse des ouvriers chassés de leur campagne.</p>
<p>Dans les sociétés traditionnelles que sont encore les sociétés du XVIIIème et de la première moitié du XIXème siècles, le travail est un impératif moral, une fin en soi. Le terme d’<em>industrie</em> renvoie d’abord à la morale : être <em>industrieux</em> est une qualité essentielle promue par la bourgeoisie qui accède au pouvoir au moment de la première révolution industrielle, mais il importe peu d’être efficace ou performant. Les gestes, les “travaux et les jours”, sont encore très souvent ritualisés, codifiés par la tradition ; les activités sont liées à un statut et une position spécifiques dans l’espace social ; le <em>travail</em> est ce qui produit l’harmonie domestique et sociale.</p>
<p>Le management pré-scientifique est ainsi fondamentalement patriarcal et paternaliste, l’entreprise n’est qu’une extension plus ou moins large de la famille et l’armée est la <em>seule</em> organisation de grande taille connue de tous : l’organisation de type militaire, hiérarchique et autoritaire, sert donc de référence tout au long du XIXème siècle aux dirigeants et aux ingénieurs chargés d’encadrer les ouvriers. C’est ce type d’organisation qui est mis en place dans les grandes compagnies ferroviaires, les premìères grandes entreprises privées aux USA à la fin du XIXème siècle.</p>
<h1 id="émergence-du-management-scientifique">Émergence du management scientifique</h1>
<div class="figure">
<img src="/images/early-forms.png" alt="Une base de données en 1916" />
<p class="caption">Une base de données en 1916</p>
</div>
<p>Le management ne prend son sens actuel qu’au tournant du XXème siècle, aux États-Unis, avec les publications de Frederick Taylor, au moment même où le <em>positivisme</em> et le progressisme se diffusent dans toutes les strates de la société ; où le culte de la performance et de l’efficacité s’imposent comme des évidences, portées par le progrès technologique et scientifique qui, avant les destructions des guerres mondiales, paraissent sans fin ; où la massification des modes de production et l’accroissement spectaculaire de la population urbaine distendent le tissu des relations interpersonnelles.</p>
<p>L’émergence et l’évolution du management accompagnent et s’appuient sur la mutation de ces formes de pouvoirs, passant de formes essentiellement interpersonnelles telles que la féodalité ou le premier capitalisme ; puis vers des formes <em>centralisées</em>, autoritaires, dont les parangons sont l’État-Nation et l’usine de masse qui culminent dans les dictatures fascistes ; enfin dans un pouvoir distribué et <em>systémique</em> ou pour le dire avec les motes de Foucault un <em>bio-pouvoir</em>, une autorité que <em>chacun</em> s’impose sans qu’il soit nécessaire de l’imposer de l’extérieur.</p>
<p>L’arrangement des espaces et du temps - comment organiser des cultures, une cuisine, un atelier, à quel moment faire telle ou telle chose - glisse des choses et des objets - champs, ateliers, maisons - aux êtres et aux pensées : le management scientifique est explicitement conçu comme contrôle des corps et des pensées, comme un dressage et un endoctrinement des individus au service de l’efficacité de l’organisation. Le <em>management</em> de la “nature” évolue progressivement en management des rapports sociaux par le contrôle des actions, déplacements, emplois du temps ; puis en production de normes sociales, de valeurs, de schémas de pensées, bref d’un ordre symbolique spécifique. Comme le souligne aussi <a href="libres-d-obeir.html">Johann Chapoutot</a>, la porosité est totale entre les pensées totalitaires du XXème siècle - nazisme, stalinisme, maoïsme - et la rationalité managériale que promeut le management scientifique.</p>
<p>Le management scientifique s’inscrit ainsi dans le cadre conceptuel cartésien de <a href="https://fr.wikipedia.org/wiki/Mathesis_universalis">Mathesis universalis</a>, il est un prolongement du rationalisme et plus particulièrement de la raison instrumentale considérant l’intégralité du monde comme sujet à la <em>mesure</em> mathématique. Les auteurs des premiers écrits du <em>management scientifique</em> cherchent déjà à tout mesurer, tout mettre en nombres, en équations, en formules, en “processus”…</p>
<p>Le management n’est pas une technique parmi d’autres mais l’extension de la rationalité instrumentale et mécaniste, cartésienne, aux être humains eux-mêmes. Ce n’est pas un outil au service de diverses formes de dominations, mais <em>une</em> forme de domination autonome, une vision du monde <em>totalisante</em> centrée sur l’efficacité.</p>
<blockquote>
<p>La morale et l’efficacité obéissent à des logiques très distinctes, et la première doit servir la seconde.</p>
<p>p. 200</p>
</blockquote>
<p>Pour les raisons grecque et classique, est rationnel l’être qui se conforme à sa nature et qui progresse dans ce chemin sans but ultime : <em>Γνῶθι σεαυτόν</em><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> nous propose Socrate ! Le management est la pointe extrême de la <em>rationalisation du monde</em><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>, de la <em>rationalité instrumentale</em> comme puissance d’agir et de transformation du monde par l’homme<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>, l’exaltation de la production et de la productivité conçus comme buts en soi. L’homme “maître et possesseur de la nature” <em>objective</em> le monde et ce faisant s’en sépare ontologiquement, il devient un <em>sujet</em> contemplant et manipulant le monde comme un <em>objet</em>.</p>
<h1 id="formes-du-management">Formes du management</h1>
<p>Malgré les apparences et les querelles de chapelles, il n’y a pas de contradictions profondes entre les différents “courants” du management. Du taylorisme pur et dur au management participatif et agile, en passant par le fordisme, le “druckerisme”, le TQM, le Lean, le “mouvement des Ressources Humaines”, toutes ces théories et pratiques, quand bien même elles se seraient construites en opposition à des théories précédentes, ont les mêmes fondements intellectuels : la rationalité managériale est multiforme mais vise toujours à la maîtrise et la mesure de domaines toujours plus étendus du travail. Ces conflits internes sont inévitables et même nécessaires pour que perdure et prospère le management comme champ autonome.</p>
<p>Pas plus qu’il n’est une science, le management n’est une <em>idéologie</em> car il ne promeut pas de projet ou de vision politique propres, mais est porté par les mutations sociales du milieu dans lequel il se développe. Le management prospère autant dans les démocraties libérales que populaires, dans le capitalisme que dans le socialisme réel. Il n’est pas non plus une science, ses lois sont au mieux des principes, ses expérimentations des heuristiques. Les simplifications parfois outrancières et la pauvreté conceptuelle dominent la littérature du management dont les auteur·e·s parviennent sans peine à remplir des centaines de pages avec des platitudes et des évidences assénées d’un ton docte et pénétré.</p>
<p>Le management est un point aveugle de la plupart des penseurs des sciences sociales qui le subsument sous les caractères de la rationalité marchande. Les économistes “classiques” ne pensent pas le management en tant que tel et ne voient que pertes et profits, microéconomie des marchés, efficience et efficacité vues sous l’angle de la concurrence pure et parfaite ; les marxistes et Marx le premier ne voient dans les managers qu’un avatar de la domination de la bourgeoisie sur le prolétariat, des social-traîtres pétris de fausse conscience et manipulés plus ou moins volontairement pour maintenir la super-structure qui les asservit. Seul Weber analysant la <em>bureaucratie</em> comme produit et moteur de l’émergence des États-Nations et de l’extension du capitalisme entrevoit les spécificités de ce groupe social.</p>
<p>Le <em>contrôle</em> n’est pas l’<em>autorité</em>, pas plus que la <em>discipline</em>. Il consiste en un <em>codage</em> généralisé des flux - d’information, de travail, d’apprentissage, de pouvoir - circulant dans l’organisation, codage qui constitue un des thèmes essentiels analysés par G.Deleuze et F.Guattari dans <a href="http://www.leseditionsdeminuit.fr/livre-Capitalisme_et_schizophr%C3%A9nie_2___Mille_plateaux-2015-1-1-0-1.html">Mille plateaux</a>, mais qu’ils renvoient à la logique propre du capitalisme sans distinguer au sein de celui-ci la logique managériale de la logique marchande.</p>
<h1 id="extension-du-domaine-du-management">Extension du domaine du management</h1>
<p>Entre les deux guerres, le management étend son emprise de la production à la consommation et voit croître et prospérer le marketing et la publicité. Il s’agit désormais d’étendre au <em>consommateur</em> lui-même les techniques du management des ouvriers, c’est-à-dire modeler les esprits et les corps, les habitudes, les désirs, envies, pensées propices à la consommation de tel ou tel produit.</p>
<p>Dans les années 60-70, le mouvement du <em>New Public Management</em> fait tomber les dernières barrières séparant le management scientifique des entreprises du gouvernement et de l’administration publiques. L’impératif d’efficacité et la rationalité managériale soumettent désormais l’action publique aux mêmes schèmes de mesure systématique et d’évaluation chiffrée que l’activité marchande et productive des entreprises. Les managers impersonnels - technocrates - se substituent aux politiques “inefficaces”, l’État n’est plus un gouvernement régalien essentiellement investit de la mission d’élaborer et d’appliquer la Loi issue de la puissance souveraine mais un ensemble de <em>services</em>. La <em>gouvernance</em> se substitue au <em>gouvernement</em>, la technique “objective” aux choix politiques “subjectifs”.</p>
<blockquote>
<p>L’entreprise est l’institution référentielle de ce peuple nouveau et le management son sens commun</p>
<p>p.110</p>
</blockquote>
<p>Le “management de soi”, l’obsession de l’objectivité et de l’efficacité pensés comme des idéaux indépassables, colonisent jusqu’à la vie intime des individus et, couplés aux fantastiques moyens techniques de l’informatique débouchent sur le <em>Quantified Self</em> et l’obsession de la mise en chiffres - et donc en données exploitables - de <em>tous</em> les aspects de notre vie. La littérature de “développement personnel” d’inspiration managériale nous enjoint à être de pures volontés objectivant nos corps, nos relations, nos pensées, nos actions et nos désirs dans le but de maximiser notre “bonheur”, notre “bien-être” ou tout simplement notre capital. Ce faisant, nous échangeons des appartenances - parfois lourdes à porter - à des groupes - famille, amis, nation, tribu, clan… - contre l’apparente liberté d’un infini de potentiels à actualiser et optimiser. L’autorité verticale, surplombante et transcendante s’efface remplacée par l’immanence de <em>scripts</em> que nous suivons “pour notre bien”, mais aussi pour le plus grand bénéfice de ceux qui émettent, relaient, exploitent ces multiples injonctions.</p>
<h1 id="conclusion">Conclusion</h1>
<p>De même que l’État se constitue en <em>appareil</em> autour d’une classe spécifique de clercs et laïcs éduqués précoccupés de légitimer un pouvoir abstrait en réaction au pouvoir de l’aristocratie et plus tard au pouvoir personnel du roi, le management scientifique se développe en même temps que croît une classe spécialisé - managers et ingénieurs - et en réaction au pouvoir personnel des entrepreneurs et “patrons”. Cette “homologie” structurale permet d’identifier le management aussi comme un champ au sens de <a href="http://www.seuil.com/ouvrage/sur-l-etat-pierre-bourdieu/9782020662246">P.Bourdieu</a> ; mais alors que pour P.Bourdieu c’est l’État qui constitue le champ ultime, le méta-champ englobant tous les champs, pour T.Le Texier c’est au contraire le management qui possède désormais cette propriété.</p>
<p>Guy Debord est l’un des rares penseurs à avoir compris, sans la nommer explicitement, la spécificité de cette rationalité “managériale” et son emprise sur l’ensemble du réel, ce qu’il dévoile et analyse dans <a href="https://www.babelio.com/livres/Debord-La-societe-du-spectacle/1788">La société du spectacle</a>, cette société où “tout ce qui était directement vécu s’est éloigné dans une représentation” (th. 1), dans laquelle “le but n’est rien, le développement est tout” (th. 14). Qu’il soit “concentré” - sous la forme d’une centralisation bureaucratique et autoritaire de l’appareil de production, “diffus” - sous la forme d’économies de marchés libérales, ou “intégré” - sous la forme du capitalisme globalisé triomphant après l’effondrement de l’Union Soviétique - le spectacle est <em>totalitaire</em> et prend possession de tous les aspects de la vie, et en tant qu’il est fondé sur l’ubiquité de la “marchandise” remplace le qualitatif par le quantitatif (th. 38).</p>
<p>J’écris ces lignes dans le contexte de la crise sanitaire provoquée par la pandémie de <a href="https://fr.wikipedia.org/wiki/Pand%C3%A9mie_de_maladie_%C3%A0_coronavirus_de_2019-2020">Covid-19</a>, alors que 800 millions de personnes se voient appliquées des mesures de confinement. Cette crise met en lumière de manière spectaculaire et tragique les failles et limites de la pensée managériale obsédée par l’efficacité quand elle s’applique à autre chose que la rentabilité économique d’une entreprise privée : c’est le “management” des systèmes de santé soumis aux impératifs de rentabilité et d’efficacité qui produit leur effondrement dans des pays comme l’Italie et peut-être bientôt la France ou les États-Unis.</p>
<p>La soumission permanente de pans entiers de plus en plus vastes de nos sociétés à l’obsession de la mesure, à l’instrumentalisation des êtres, des choses et du Monde, à l’objectivation de tout et de tous soumis à la dictature de la raison managériale ignorante de ses limites et aveugle à ce qui n’est pas quantifiable a produit, produit et produira de plus en plus de “crises” qu’elles soient sanitaires (SRAS, H1N1, Vache folle, Covid-19…), économiques (crise des “subprimes”, “dot-com bubble”, dettes souveraines, prêts étudiants), écologiques (réchauffement climatique, marées noires, chûte de la biodiversité) ou humanitaires (boat-people, famines, crise des migrants en Méditerranée, Syrie, Irak, Afghanistan).</p>
<p>Il serait évidemment absurde et naïf de prétendre que ce sont les managers et le management qui provoquent ces catastrophes, mais il est clair qu’un mode de pensée fondé exclusivement sur la mesure de toute chose, les statistiques à foison, la gestion rationnelle des moyens et la subsomption des fins en objectifs chiffrés est incapable de prendre en compte l’inattendu, l’imprévu, le <em>cygne noir</em>, la catastrophe. Il semble donc plus que jamais nécessaire de remettre à l’honneur l’<a href="/posts/kant2.html">impératif catégorique kantien</a> de <em>toujours</em> considérer autrui comme une fin et non un moyen.</p>
<p>Concrètement, cela signifie pour tous ceux d’entre nous qui sont aujourd’hui insérés dans les réseaux managériaux d’organisations diverses - fonctions publiques, petites et grandes entreprises, sous-traitants et freelance - qu’il est urgent de soumettre notre quotidien à l’épreuve de ces principes : quel est le <em>sens</em> de notre action, de notre travail, de notre rôle dans l’organisation ? Pour <a href="simone-responsabilite.html">G.Anders</a>, c’est la division du travail en fragments de plus en plus petits et de plus en plus déconnctés du but poursuivi, et donc notre incapacité à comprendre et envisager les conséquences de nos actions qui produit du <em>monstrueux</em>. Il est donc essentiel de lutter contre cette division imposée par la pensée managériale et de faire en sorte que le sens du travail de chacun soit compris de tous et que nous soyons maîtres de son organisation. C’est en recréant du <em>collectif</em> et des relations de travail égalitaires en vue d’un but commun que nous parviendrons à nous guérir du poison de l’efficacité.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>En particulier parce que ses théories sont infalsifiables et ses expériences non reproductibles du fait du poids du contexte et de la réflexivité dans toutes les organisations.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>c’est tellement classe de mettre du grec ancien dans un billet de blog, je n’ai pas pu résister à cette coquetterie.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Il est fascinant que cette rationalisation extrême sous la coupe de l’efficacité s’accomplit désormais dans la figure du <em>coach</em> et dans la prolifération de méthodes et pratiques plus ou moins irrationnelles et aux fondements scientifiques douteux. Programmation neuro-linguistique, analyse transactionnelle, communication non-violente, méditation de pleine conscience, modèles MBTI et une foultitude d’autres “outils” font désormais partie de la panoplie du “bon” manager. Retour du refoulé diraient les psychanalystes ?<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>oui, c’est le plus souvent un homme et rarement une femme.<a href="#fnref4">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;La mise en scène de la vie quotidienne&quot;</title>
    <link href="http://abailly.github.io/posts/la-presentation-de-soi.html" />
    <id>http://abailly.github.io/posts/la-presentation-de-soi.html</id>
    <published>2020-02-26T00:00:00Z</published>
    <updated>2020-02-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[Le livre est une analyse des interactions sociales vues comme une pièce de théâtre, un jeu de rôles dans lequel les membres d'une équipe collaborent pour donner un spectacle à des spectateurs]]></summary>
</entry>
<entry>
    <title>Sur &quot;Libres d&#39;obéir&quot;</title>
    <link href="http://abailly.github.io/posts/libres-d-obeir.html" />
    <id>http://abailly.github.io/posts/libres-d-obeir.html</id>
    <published>2020-01-18T00:00:00Z</published>
    <updated>2020-01-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Libres d&#39;obéir&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January 18, 2020</div>

<p><em>Libres d’obéir</em>, sous-titré <em>Le management, du nazisme à aujourd’hui</em> est un essai historique qui vise à mettre en lumière la “modernité du nazisme”, à analyser comment la vision radicale de la société et de l’humanité promue et développée par les nazis durant les 12 ans qu’aura durant le IIIème Reich n’est par sortie, par quelque portail transdimensionel magique<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, d’un univers parallèle mais a des racines et des prolongements dans <em>notre</em> modernité.</p>
<h1 id="synthèse">Synthèse</h1>
<p>Le livre se concentre essentiellement sur la vie de Reinhard Höhn, juriste, penseur du nazisme et de son organisation, <em>SS Oberführer</em> pendant la guerre puis fondateur et directeur de l’école de <em>management</em> de Bad-Harzburg, et aussi prolifique auteur de livres sur l’histoire militaire et le management. Höhn est pris ici comme un exemple archétypique de ces hauts-gradés du nazisme, penseurs de la pureté raciale et de l’espace vital pan-germanique, qui ont mis leur intelligence et leurs talents au service du projet national-socialiste ;<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> et qui après la guerre ont trouvé à recycler ces mêmes talents, édulcorés des éléments idéologiques les plus sulfureux, au sein de la social-démocratie.</p>
<p>Les premiers chapitres, suivant l’ordre chronologique, développent la conception de l’État national-socialiste proposée par Höhn et d’autres, et sa mise en oeuvre en Allemagne avant la guerre puis dans toute l’Europe pendant.</p>
<p>Premier étonnement : le totalitarisme nazi n’aime pas l’État, considéré comme une construction rationnelle d’inspiration romaine et française. L’État et ses fonctionnaires sont vus comme antagoniste à la vision naturaliste et vitaliste du lien organique entre le <em>peuple</em> et son <em>chef</em>. Le <em>führer</em> nazi n’est pas un dictateur, un autocrate, mais il émerge “naturellement” du peuple pour le guider, il ne le “représente” pas comme un élu, il l’incarne, il en est l’émanation naturelle, immanente et par conséquent incontestable : qui est contre le führer est contre le peuple.</p>
<p>L’organisation nazie va donc systématiquement chercher à réduire les pouvoirs de l’État en créant une multitudes d’organismes - d’organes - parallèles, très souvent concurrents les uns des autres, qui vont prendre en charge au nom du peuple tel ou tel aspect de la vie publique, ce qui, combiné à la rapacité et à la haine que se vouent les uns aux autres les différents barons du nazisme, conduit rapidement à un système extrêmement chaotique et mouvant.</p>
<p>Vitaliste, l’idéologie nazie voit dans la profusion d’officines et la compétition un phénomène naturel, le pendant au niveau du groupe de la lutte pour la vie que mènent les races et les être vivants entre eux. Par la compétition, seuls les meilleurs et les plus forts survivent et renforcent donc le grand corps du <em>peuple</em>, et ce qui est vrai des individus l’est aussi des groupes.</p>
<p>L’unité organique entre le chef et le peuple se décline aussi dans les organisations, usines et bureaux : le chef émerge du groupe naturellement, par ses compétences et son leadership ; ce qui n’empêche pas le capitalisme de s’accomoder parfaitement du nazisme car ce principe ne remet pas en cause la propriété des moyens de production, pour autant que ces moyens de production soient mis au service du peuple et du projet national-socialiste.</p>
<p>Compte-tenu de la réalité des conditions économiques de l’Allemagne, ruinée par la guerre et la crise économique, cette idéologie permet de mobiliser les “travailleurs” pour reconstruire le pays et accomplir le destin du peuple germanique de conquérir son espace vital, occupé par des races subalternes (slaves, latins) ou noyauté par les juifs.</p>
<p>Second étonnement : la propagande ne suffit pas, il faut “Manager et ménager la ‘ressource humaine’” comme l’indique le titre d’un chapitre ; il faut en quelque sorte <em>acheter</em> le consentement du peuple. Ce qui sera fait au travers d’une politique sociale généreuse - au moins en apparence - organisant vacances et croisières, loisirs, aides sociales en tout genre proposées par la <em>Kraft durch Freude</em> ou <em>Force par la joie</em>, intégré au <em>Deutsche Arbeitsfront</em> le syndicat unique.</p>
<p>C’est dans ce cadre que Höhn, alors professeur à Berlin et conseiller du Sicherheitsdienst (SD), le service de sécurité et d’espionnage de la SS et du parti, développe et peaufine ses théories du “management”, inspirées notamment par les réformes militaires de <a href="https://en.wikipedia.org/wiki/Gerhard_von_Scharnhorst">von Scharnhorst</a><a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>. Au coeur de ces principes se trouve l’<em>Auftragstaktik</em> ou <em>tactique par la mission</em> : l’officier se voit confié une mission par ses supérieurs, charge pour lui de mettre en oeuvre <em>tous</em> les moyens pour parvenir à remplir l’objectif<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>.</p>
<p>Höhn “disparait” à la fin de la guerre ce qui lui permet d’éviter la douloureuse épreuve des procès de dénazification, et reparait au début des années 50, après que la RFA a voté des lois d’amnistie pour les seconds couteaux. Il recommence à publier et fonde une école de management à <a href="https://de.wikipedia.org/wiki/Akademie_f%C3%BCr_F%C3%BChrungskr%C3%A4fte_der_Wirtschaft">Bad-Harzburg</a> qui verra passer 600000 cadres de toutes origines (jusqu’à 35000 par à son apogée en 1974) : industrie, services, privé et public…</p>
<p>Décliné en théorie du management, l’<em>Auftragstaktik</em> permet à l’organisation une grande souplesse et une performance maximale et devient le <em>management par objectif</em>. Les “managers” et employés à tous niveaux se voient confiés des missions et objectifs dont ils deviennent responsables, pour l’atteinte desquels tous les moyens sont bons. Ce principe sera développé dans la gestion des “ressources humaines”, notamment avec l’accent mis sur les “fiches de poste” et “lettres de mission”.</p>
<p>Dans les années 70, une nouvelle génération n’accepte plus les compromis fait par la RFA avec le passé nazi pour permettre la reconstruction et le “miracle économique” allemand. Des articles révèlent le passé nazi de Höhn, le forçant à prendre sa retraite. Son école fera faillite mais sera reprise, l’enseignement mis au goût du jour. Höhn meurt en 2000.</p>
<h1 id="analyse">Analyse</h1>
<p>J’ai eu l’occasion de discuter de ce livre - avant de l’avoir lu, suivant les conseils de Pierre Bayard - sur le <em>Slack</em> “Les agiliste”, suite à une interview de <a href="https://www.liberation.fr/debats/2020/01/05/johann-chapoutot-le-nazisme-a-ete-une-matrice-du-management-moderne_1771724">Johann Chapoutot</a> parue dans Libération. Il est clair que l’interview est beaucoup moins nuancée que le livre et que l’amalgame qui y est fait entre le management moderne et le nazisme ressemble fort à la volonté d’atteindre le point Godwin en un coup.</p>
<p>Le livre, en retraçant le parcours intellectuel et professionnel de Reinhard Höhn, permet sinon de révéler du moins de rappeler que la modernité est soluble dans le nazisme malgré, ou peut-être grâce à, l’extraordinaire incohérence dans le <em>discours</em> nazi et dans sa mise en oeuvre : entre l’exaltation des forces de la Nature et l’asservissement de la technicité la moins naturelle, la critique radicale de l’État et l’incroyable enchevêtrement bureaucratique créé par les diginitaires nazis, l’asservissement de l’individu à la communauté, à la “race” et la fascination pour les héros, les individus exceptionnels ; et, donc, la flexibilité et l’agilité requise dans les strates intermédiaires des organisations et la rigidité des objectifs et des hiérarchies.</p>
<p>Bien évidemment, ce livre est surtout une critique du “management”, montrant la filiation directe qui relie les méthodes qui ont aujourd’hui le vent en poupe - délégation, bonheur au travail, flexibilité - aux techniques de <em>Menschenfürung</em> développées par Höhn et ses semblables dans le but de maximiser la “productivité” de la machine de guerre nazie. Le parallèle pourrait même être poussé un cran plus loin en soulignant à quel point l’attention accordée aux employés et cadres des grandes organisations contemporaines a pour contrepoint l’exploitation de masse dans des pays à bas coût de main d’oeuvre, de même que le bonheur du travailleur allemand était indexé sur la mise en coupe réglée et l’esclavage d’une grande partie de l’Europe.</p>
<p>Il par ailleurs souligne la perversité de ces méthodes “modernes” qui d’un côté sont aux petits soins pour les individus, s’occupent des moindres détails de leur bien-être ; et de l’autre les responsabilisent à outrance en leur fixant des objectifs souvent inaccessibles par des voies “normales”, produisant de la charge de travail supplémentaire et parfois des comportements violents. Cette dissociation de la responsabilité entre les fins et les moyens est incroyablement perverse car elle permet à tous les échelons de se défausser : les chefs, en disant qu’ils n’ont pas voulu ça et que les subordonnés ont pris trop d’initiatives, les subordonnés en disant qu’ils n’ont fait que le travail qui leur été demandé et qu’ils n’étaient que des rouages dans la machine.</p>
<p>Le “mystère” nazi - comment une nation parmi les plus civilisées du monde a pu sombrer dans la barbarie industrialisée - n’en est évidemment pas un : en séparant les <em>moyens</em> des <em>fins</em> et en jouant sur les affects d’une population meurtrie et déboussolée, tout devient possible.</p>
<p>“Libres d’obéir” offre aussi d’autres pistes de réflexion qui font écho à toute une littérature sociologique et anthropologique sur la domination, sa fatalité, ses mécanismes, ses masques, en tout premier lieu bien sûr au travail de Bourdieu. Je pense en particulier à ses cours <a href="http://www.seuil.com/ouvrage/sur-l-etat-pierre-bourdieu/9782020662246">Sur l’État</a> et à son analyse de la formation de l’État moderne comme constitution d’un <em>champ</em> autonome permettant à toute une classe de lettrés d’acquérir du pouvoir face à la noblesse et au clergé, qui répond à la théorie nazi de formation de l’État comme instrument au service du Prince contre le Peuple.</p>
<p>Cette vision de l’État comme antithétique à la communauté du peuple ou de la race semble curieusement peu éloignée de certaines conceptions d’inspirations rousseauistes ou libertaires, à cette différence fondamentale près que là où les nazis postulent une communauté d’origine naturelle, constituée par le sang et bornée par la pureté raciale, Rousseau et la tradition anarchiste libertaire ne posent aucune limite à la manière dont les individus libres s’associent pour former communauté.</p>
<p>Plus simplement et plus concrètement, ce livre constitue à mon sens un salutaire rappel sur la généalogie plus que douteuse des organisations modernes et sur la nécessité de “refaire société” sur des bases qui tiennent compte et des <strong>moyens</strong>, et des <strong>fins</strong>, ce qui suppose un changement radical des modes de constitution et de gouvernement des entreprises, syndicats et services publics ; et sur notre responsabilité, en tant que membre de ces organisations.</p>
<p>Il souligne enfin que la domination d’une partie de la population sur une autre ne peut se faire uniquement par la force, ni même principalement par elle : il y faut du consentement.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>L’altérité radicale du Mal est un thème essentiel dans les films et comics de super-héros. Dans le film <em>Avengers</em>, le monde est menacé par des aliens qui surgissent d’un portail transdimensionnel, appelés par Loki, et sauvé par des super-héros qui, s’ils sont divers et parfois étranges n’en sont pas moins tous profondément <em>américains</em>. Il y a des super-vilains américains bien sûr, mais ils sont “normaux”, ils ne menacent pas vraiment l’équilibre du monde, ils sont mauvais mais ne sont pas le <em>Mal</em>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Un exemple plus connu est celui d’<a href="https://en.wikipedia.org/wiki/Albert_Speer">Albert Speer</a>, dont le génie organisateur a grandement aidé l’Allemagne, comparativement pauvre en ressources, à développer une économie de guerre extrêmement efficace. La lecture de ses mémoires, <a href="https://www.fayard.fr/pluriel/au-coeur-du-troisieme-reich-9782818500118">Au coeur du IIIème Reich</a>, vaut le détour.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Von Scharnhorst est le général qui a réformé l’armée prussienne, sclérosée dans les méthodes et la pensée de Frédéric II et laminée par Napoléon en 1806-1807.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Dans les wargames sur la seconde guerre mondiale, les chefs intermédiaires allemands bénéficient toujours d’un “bonus” d’initiative par rapport aux autres nations ; et les fameux <em>Kampfgruppe</em>, groupements ad hoc d’unités combattantes diverses, représentent la traduction de cette flexibilité dans les moyens mis en oeuvre pour atteindre l’objectif.<a href="#fnref4">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
