<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2018-11-17T00:00:00Z</updated>
    <entry>
    <title>CodeMesh 2018</title>
    <link href="http://abailly.github.io/posts/codemesh-2018.html" />
    <id>http://abailly.github.io/posts/codemesh-2018.html</id>
    <published>2018-11-17T00:00:00Z</published>
    <updated>2018-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>CodeMesh 2018</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 17, 2018</div>

<p>Once again I have been lucky enough to attend this year’s <a href="https://codesync.global/conferences/code-mesh-2018/">codemesh</a> conference, but this time I was not only attending but also presenting with my friend <a href="https://twitter.com/abolibibelot">Yann Schwartz</a>, speaking of something we have been working on for a few months and thinking of for a few years: How to leverage the power of those billions of lines of logs our systems generate?</p>
<p>I only attended the first day of the conference so the following notes reflect only a fraction of the conference. Rumors have it that the second day was much better than the first, unfortunately.</p>
<ul>
<li>The first keynote was given by Carl Hewitt, of <a href="http://www.erights.org/history/actors.html">Actors</a> fame, and titled <em>Ultraconcurrency for the future</em>. This was some kind of research program or vision statement about the future of computing systems and different technologies and paradigms, from actors to <em>citadels</em> through <em>inference and planning systems</em> would led to <em>Scalable Intelligent Applications</em>. I must admit the talk was hard to follow…</li>
<li><a href="https://codesync.global/speaker/carlos-baquero-moreno/">Carlos Baquero Moreno</a> then talked about <a href="https://hal.inria.fr/inria-00555588">Convergent/Commutative/Conflict-free Replicated Data Types</a> of which he is one of the original creator. His talk was an introduction to CRDTs and it succeeded in giving a good intuition of some of the basic data structures you could build and the principles underlying both state and operation based CRDTs. Of special note was his use of a beautiful <em>isochronous map</em> drawn by Galton in the XIXth century coloring various parts of the planet according to the time it takes to reach them from then the Center of the World, London.</li>
<li>I was both excited and intrigued by the next talk, entitled <em>Verifying a distributed system with combinatorial topology</em>, so I was sorely disappointed when I realised it was a 40 minutes long rant about how inane current development practice of distributed systems are, and how mathematics, and more precisely combinatorial topology, could help solve our problems, without any single fact or even vaguely enlightening example to support this claim. Given that Maurice Herlihy recently published a <a href="https://www.amazon.com/Distributed-Computing-Through-Combinatorial-Topology/dp/0124045782">book</a> on this subject, I am 100% sure this is an interesting topic from which us practitioners could get deep insights, but this presentation failed to convey any useful intuition.</li>
<li><em>Coroutine explained</em> was a great overview of this sometimes confusing construct which can appear in various guises: Cooperative threads, asynchronous computations, first-class continuations. Coroutines are useful to simplify cooperative multitasking code, alleviating the pain of callback hell or even chain of promises, and removing context-switching overhead. It was interesting to see how async/await computations, and in general coroutines, are “compiled” to state-machines. I learnt about the difference between <em>stackful</em> and <em>stackless</em> coroutines, Lua being a representative of the former while JS implements the latter. The presentor highlighted some caveats when working with coroutines, liek painful stack traces, convoluted debugging and hard to maintain thread safety when using both coroutines and multithreading.</li>
<li>The last talk I attended was given by <a href="https://heather.miller.am/">Heather Miller</a> and aimed at providing a 10000 feet view of the state of research in distributed systems support from programming language theory. This talk was really awesome and treaded quite a lot of ground, from different consistency guarantees on data structures, to Heather Miller’s own Function Passing, through Session Types. <a href="https://heather.miller.am/blog/towards-language-support-for-distributed-systems-references.html">This URL</a> is supposed to host a collection of references to the various work cited: Can’t wait to see it filled.</li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>LambdaConf 2018</title>
    <link href="http://abailly.github.io/posts/rock-solid-haskell-services.html" />
    <id>http://abailly.github.io/posts/rock-solid-haskell-services.html</id>
    <published>2018-06-05T00:00:00Z</published>
    <updated>2018-06-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>LambdaConf 2018</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on June  5, 2018</div>

<h1 id="rock-solid-haskell-services">Rock-Solid Haskell Services</h1>
<ul>
<li>The workshop is presented by Roman Gonzales who is working for FP Complete and it leverages the company’s experience building highly-reliable services in Haskell</li>
<li>The overall architecture of the system is based on Matt Parson’s <a href="http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html">Three Layer Haskell Cake</a>, which is very reminiscent of Alistair Cockburn’s Hexagonal Architecture and DDD</li>
<li>It boils down to enforcing a strict separation between <em>resources</em>, <em>business services</em> and <em>core domain logic</em></li>
<li>To those 3 layers, Roman, drawing from his experience as a Clojure developer, adds a <em>Zero Layer</em> which is responsible for managing the lifecycle of <em>components</em> in such a way that they can be disposed of and <em>restarted</em> at will. This gives the developer the ability to interact with the “complete” system directly in the REPL and be able to reload any part of it at will</li>
<li>The <a href="http://hackage.haskell.org/package/componentm">componentm</a> library provides the needed tools for this, and the ability to report failures at startup/teardown time, as well as some timings on how much time each component took to startup and teardown. Note that I am slightly annoyed that all logging done happens to be text-based which to me seems like an anti-pattern: Logging issued at the application level should be structured and only ever converted to human-readable format when it is needed</li>
<li>Of course the greatest benefit of this approach is the shortening of the feedback loop it provides</li>
<li>Roman spends quite a long time presenting another tool he wrote to manage configuration, <a href="https://hackage.haskell.org/package/etc">etc</a>.</li>
<li><code>etc</code> allows one to define a lot of different sources of configuration like files, env variables, command-line flags, and merge them in a single JSON tree that can then be used by the application</li>
<li>I must say I am not a big fan of those big Yaml configurtion files although I must confess I sometimes indulge in them</li>
<li>Following a discussion with my colleague <a href="https://twitter.com/cvogt">Chris Vogt</a>, I more and more like the idea of limiting configuration to the bare minimum, e.g. to 0</li>
<li>Having non configurable executables that are produced and packaged for specific environment, which means moving the configuration up the stack, say at compile time</li>
<li>when we need to change some dependency, we recompile a process and redeploy it</li>
<li>this implies a solid deployment strategy and thec capability to rollback on errors</li>
<li>need to couple that with supervision trees in order to manage errors in an orderly manner</li>
<li>the presenter then introduces <a href="https://github.com/roman/Haskell-capataz">capataz</a> which is a Haskell implementation of <em>supervision</em> trees</li>
<li>supervision trees provide the ability to automatically restart components or components trees when an error happens</li>
<li>the workshop proceeds to deployment and production concerns, with <a href="https://pragprog.com/book/mnee2/release-it-second-edition">Release It!</a> as a reference pooint, and some definitions on various issues that can happen to a system:</li>
<li><em>impulses</em> are rapid shocks to the system</li>
<li><em>strain</em> is stress over time, which might be caused by dependency on another system that starts operating at half-capacity
<ul>
<li>signs are unresponsive app, spikes on system-level metrics, excess I/O</li>
</ul></li>
<li>strain produce <em>Cracks</em> that can lead <em>cascading failures</em></li>
<li><em>faults</em> =&gt; <em>errors</em> =&gt; <em>failures</em></li>
<li>source of strains:</li>
<li>lack of timeouts on outbound requests</li>
<li>resource pools drained because of failures at lower level</li>
<li>system resource exhaustion (files, ports, RAM…)</li>
<li>not limiting size of resources (bounded queues)</li>
<li>limiting size of query results</li>
<li>timeouts are very rarely transient which means retries should be delayed</li>
<li><em>circuit breakers</em> allow keeping track of the state of a 3rd party system</li>
<li>when num of failures pass some threshold -&gt; make all subsequent requests fail or return default value, marking the circuit open</li>
<li>after some time -&gt; try again (canary requests) and close the circuit again if it succeeds (e.g. 3rd party system goes back to normal state)</li>
<li>use timeouts on every use of allocated resource</li>
<li>the last stage of the workshop goes to deploying all the services that have bben built. The presenter introduces (localstack)[https://localstack.cloud/] a tool to simulate part of AWS stack locally.</li>
</ul>
<h1 id="from-zero-to-live-with-functional-javascript">From Zero to Live with Functional Javascript</h1>
<p>This 2 hours workshop was given by Ian Thomas, CTO of SkyBet. It was a fast-paced overview on how to build modern javascript applications based on FP principles. The workshop is based on his <a href="https://github.com/anatomic/zero-to-live-fp-js-workshop">git repo</a> and builds a complete 12 factor app from the ground up. It contains lot of materials and the session was way too short to get more than a glimpse of it, but it’s definitely interesting material when one wants to build JS-based microservices.</p>
<p>Ian Thomas also gave a keynote on how FP helps break the <em>fear cycle</em> which prevents large code bases from changing.</p>
<h1 id="seeking-refuge-from-unsafe-javascript">Seeking Refuge from Unsafe JavaScript</h1>
<p>Another workshop dedicated to Functional Javascript, presented by David Chambers. It goes through the various pure FP constructs provided by <a href="">sanctuary</a>, a library which basically provides Haskell on top of JS. Sanctuary provides algebraic data types and all the classical functions we have come to love from Haskell, and more.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>CodeMesh 2017 - Takeaways</title>
    <link href="http://abailly.github.io/posts/codemesh-2017.html" />
    <id>http://abailly.github.io/posts/codemesh-2017.html</id>
    <published>2017-11-13T00:00:00Z</published>
    <updated>2017-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>CodeMesh 2017 - Takeaways</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 13, 2017</div>

<p>here are some key takeaways from this year’s <a href="http://www.codemesh.io/codemesh2017">codemesh</a> conference. i must say i never had such an intense conference, with lot of fascinating and mind-blowing sessions which bred lots of new or old ideas in my mind. thanks a lot to the organisers and the amazing speakers which made this event memorable.</p>
<ul>
<li>How to apply simple machine learning techniques and speculative execution to optimise repeated executions of programs or program fragments, caching pre-computed execution path to skip some computations,</li>
<li>Using <em>session types</em> to design applicative protocols as <em>finite state machines</em> enforced by the type system hence statically verified, with some encoding examples in haskel and idris,</li>
<li>An answer to the classical <a href="http://wiki.c2.com/?FizzBuzzTest">fizzbuzz</a> interview test where one the y combinator and church numerals from scratch using a pure untyped λ-calculus, in the spirit of the now famous piece by Aphyr <a href="https://aphyr.com/posts/342-typing-the-technical-interview">Typing the technical interview</a>,</li>
<li>Why it is actually a good idea to model <code>IO</code> as a monad even in an impure language like scala, as it gives the compiler the capability to verify and enforce proper use of <em>side effects</em> statically,</li>
<li>How messy and imprecise the <em>Computer Science Metanotation</em>, a language which is ubiquitous in PLT research papers to define <em>formal systems</em>, has become over the past 30 or 40 years,</li>
<li>How to write (potentially infinite) <em>towers of interpreters</em>, with reflection and reification capabilities between each layer, and collapse the resulting tower in a single-pass compiler. This year’s <a href="http://lampwww.epfl.ch/~amin/">favorite</a>, ex aequo with Tomas Petricek’s talk,</li>
<li>Whence does Haskell come and what’s the history of Miranda, where one learns there was no λ-calculus nor first-class functions in McCarthy’s LISP and the Programming Languages’ history is far from the linear reconstruction we often are told it is,</li>
<li>Would aliens be able to understand λ-calculus which amounts to asking classical philosophy of mathematics question: Are mathematical objects <em>discovered</em> from the the land of eternal truths they are part of or <em>invented</em> hence subjects to historical and sociological contingencies. With fascinating references to works by Lakatos and Lakoff on the history and sociology of mathematics,</li>
<li>What benefits one can reap from abstracting concurrent IOs with <a href="https://github.com/facebook/Haxl/">Haxl</a>, a great library developed at Facebook by <a href="http://simonmar.github.io/">Simon Marlow</a>,</li>
<li>How to derive <em>implementations</em> of functions from examples thanks to <a href="https://github.com/webyrd/Barliman/">Barliman</a> and logic programming with <a href="http://minikanren.org/">miniKanren</a>,</li>
<li>The use of the concept of <em>Feedback Loops</em> and <em>Feedback Structures</em> to design and develop complex self-regulated distributed systems.</li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 39</title>
    <link href="http://abailly.github.io/posts/weekly-review-39.html" />
    <id>http://abailly.github.io/posts/weekly-review-39.html</id>
    <published>2017-09-25T00:00:00Z</published>
    <updated>2017-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 39</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 25, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Another great read from TMP, this time about the low-level <em>lingua franca</em> of browser-based computations. Lead me to also read <a href="http://languagengine.co/blog/differentiating-functional-programs/">languagengine - Blog - Differentiating Functional Programs</a> and the original specification: <a href="https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf">spec/pldi2017.pdf at master · WebAssembly/spec</a></p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/">To type or not to type: quantifying detectable bugs in JavaScript | the morning paper</a></dt>
<dd><p>Can static typing helps in getting rid of bugs? This paper provides a resounding <em>Yes!</em> answer.</p>
</dd>
<dt><a href="http://matt.might.net/papers/might2011derivatives.pdf">Parsing with Derivatives</a></dt>
<dd><p>One thing that always amazes me is how seemingly unrelated concepts of mathematics have deep and useful practical applications to computing. This paper shows how to apply the notion of <em>derivatives</em> of a function to generate parsers for context-free grammars, following a technique pioneered by Brzozowski in <a href="http://maveric.uwaterloo.ca/reports/1964_JACM_Brzozowski.pdf">Derivatives of Regular Expressions</a>.</p>
</dd>
<dt><a href="https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf">Totally Free</a></dt>
<dd><p>I am deeply indebted to my co-worker Alex Babkin for pointing me at this paper that links in very interesting ways to a lot of work I have been doing in the past with <em>Free monads</em> and <em>Effects</em>. I have translated the Agda code to Haskell and this helped me see the similarities between the <code>General</code> type McBride introduces and the various constructions for Free monads, notably exposed by Ed Kmett in a <a href="http://comonad.com/reader/2011/free-monads-for-less/">series of blog post</a>.</p>
</dd>
<dt><a href="https://www.linkedin.com/pulse/id-known-what-we-were-starting-ray-dillinger">If I’d Known What We Were Starting | Ray Dillinger | Pulse | LinkedIn</a></dt>
<dd><p>“ICOs are a scam” says one of the original inventor and developer of Bitcoin. Interesting insights into the chaotic history of the “blockchain”…</p>
</dd>
<dt><a href="http://www.cs.nott.ac.uk/~psztxa/publ/ydtm.pdf">Why Dependent Types Matter</a></dt>
<dd><p>An already old but nevertheless interesting paper advocating for the use of dependent types in mainstream programming languages. My first exposure to the <a href="https://github.com/mietek/epigram2">Epigram</a> programming language on which Edwin Brady worked before developing <a href="https://www.idris-lang.org/">Idris</a>.</p>
</dd>
<dt><a href="https://github.com/confluentinc/ducktape">confluentinc/ducktape: System integration and performance tests</a></dt>
<dd><p>A framework for testing microservices and distributed systems</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 38</title>
    <link href="http://abailly.github.io/posts/weekly-review-38.html" />
    <id>http://abailly.github.io/posts/weekly-review-38.html</id>
    <published>2017-09-18T00:00:00Z</published>
    <updated>2017-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 38</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 18, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://vadosware.io/post/static-binaries-for-haskell-a-convoluted-approach/">Static Binaries for Haskell: A Convoluted Approach</a></dt>
<dd><p>When trying to build minimal docker images, having a statically linked binary is a plus. This is actually quite hard to realize in practice with GHC as this post demonstrates (note that I tried the suggested approach and failed…)</p>
</dd>
<dt><a href="http://graydon2.dreamwidth.org/253769.html">graydon2 | “What next?”</a></dt>
<dd><p>Interesting and opinionated post on <em>what’s next</em> in Programming languages, e.g. which features from PLT will reach mainstream. First-class modules done right is definitely something we are direly in need for!</p>
</dd>
<dt><a href="http://slatestarcodex.com/2017/09/05/book-review-surfing-uncertainty/">Book Review: Surfing Uncertainty | Slate Star Codex</a></dt>
<dd><p>A long book review on cognition and how our brain copes with uncertain, partial or plain wrong data.</p>
</dd>
<dt><a href="https://github.com/adericbourg/coreprotocols-fr">Les Protocoles Fondamentaux</a></dt>
<dd><p>French translation of Michelle and Jim McCarthy’s <a href="">Core Protocols</a>, using <a href="https://github.com/rkasper/coreprotocols">The Core Protocols: A Guide to Greatness</a> dfrom Richard Kasperowski as main source.</p>
</dd>
<dt><a href="https://filecoin.io/filecoin.pdf">FileCoin</a></dt>
<dd><p>A <em>cryptocurrency</em> providing blockchain-based file-system</p>
</dd>
<dt><a href="http://hackage.haskell.org/package/testing-feat">testing-feat: Functional Enumeration of Algebraic Types</a></dt>
<dd><p>A Haskell package to enumerate inhabitants of any ADT, useful for systematic testing of data types.</p>
</dd>
<dt><a href="http://www.samcoope.com/posts/deep_code_generation">Sam Coope - Blog</a></dt>
<dd><p>Looks fun! Did not read the full thesis though…</p>
</dd>
<dt><a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">PragPub January 2012 | Unit Tests Are FIRST | The Pragmatic Bookshelf</a></dt>
<dd><p>A gentle reminder about the properties that a proper unit test should exhibit: Fast, Isolated, Repeatable, Self-Verifying, and Timely</p>
</dd>
<dt><a href="https://www.tezos.com/">Tezos Crowdfunding</a></dt>
<dd><p>Tezos is a smart contracts platform that aims at offering a self-governing network. I read the <a href="https://www.tezos.com/static/papers/white_paper.pdf">language white paper</a> which interestingly draws ideas from Forth: The Tezos language is a typed stack-based language. Although of note is the fact the reference implementation is in OCaml.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Speaking of languages, WebAssembly aims at providing a more solid foundation than Javascript as a the lingua franca for executing arbitrary code in browsers.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 36</title>
    <link href="http://abailly.github.io/posts/weekly-review-36.html" />
    <id>http://abailly.github.io/posts/weekly-review-36.html</id>
    <published>2017-09-04T00:00:00Z</published>
    <updated>2017-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 36</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September  4, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://github.com/solo-io/squash">solo-io/squash: The debugger for microservices</a></dt>
<dd><p>A tool to coordinate debugging of a bunch of processes running inside docker containers. Only for gdb and dlv based programs with VS Code editor</p>
</dd>
<dt><a href="https://github.com/jrclogic/smcdel">jrclogic/SMCDEL: A symbolic model checker for Dynamic Epistemic Logic.</a></dt>
<dd><p>I have been fascinated by model-checking and non standard logics since I discovered this in 2000. Too bad I never invested the time to genuinely master that field. Looks like past years have seen much advance in the field and this MC for epistemic logic interested me because it’s written in Haskell and implements BDD, something I might need for work I am currently doing on distributed systems testing.</p>
</dd>
<dt><a href="https://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html">apfelmus - Reasoning about space leaks with space invariants</a></dt>
<dd><p>Thanks to my coworker <a href="https://www.linkedin.com/in/alexbabkin/">Alex Babkin</a> for this post. It helped me get a deeper understanding of laziness and space-time tradeoffs in Haskell.</p>
</dd>
<dt><a href="https://ocharles.org.uk/blog/posts/2016-01-26-transformers-free-monads-mtl-laws.html">Monad transformers, free monads, mtl, laws and a new approach</a></dt>
<dd><p>An interesting approach to offer the best of both free monads/effects and monad transformers. Materialized in the <a href="https://ocharles.org.uk/blog/posts/2016-04-23-transformers-eff.html">transformers-eff</a> package</p>
</dd>
<dt><a href="http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf">Asymptotic Improvement Of Computations Over Free Monads</a></dt>
<dd><p>An important stop in my journey towards better understanding of free monads.</p>
</dd>
<dt><a href="http://homepages.inf.ed.ac.uk/slindley/papers/handlers.pdf">Handlers in action</a></dt>
<dd><p>An alternative approach to composable effects and transformers, based on a custom DSL for expressing effects. Uses TH’s quasi-quoters which I am not a big fan of…</p>
</dd>
<dt><a href="http://okmij.org/ftp/Haskell/extensible/param-eff.pdf">Parameterized Effects</a></dt>
<dd><p>Follow-up over <em>extensible effects</em> paper taking into account parametric monads. The goal is to be able to embed and check state transitions at the type level making it impossible to write things like reading a file before opening it</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/30/a-concurrent-perspective-on-smart-contracts/">A concurrent perspective on smart contracts | the morning paper</a></dt>
<dd><p>This week’s TMP was dedicated to a series of papers on Smart Contracts, a subject I have a keen interest in given that I am currently working for a company developing a platform for Smart Contracts! Also of interest is <a href="https://blog.acolyer.org/2017/08/31/adding-concurrency-to-smart-contracts/">Adding concurrency to smart contracts</a> and <a href="https://blog.acolyer.org/2017/09/01/step-by-step-towards-creating-a-safe-smart-contract-lessons-from-a-cryptocurrency-lab/">Step by step towards creating a safe smart contract: lessons from a cryptocurrency lab | the morning paper</a></p>
</dd>
<dt><a href="http://why3.lri.fr/">Why3</a></dt>
<dd><p>A platform for theorem-prover-based program verification providing a “front-end” on top of 2 dozens theorem proving tools, including Coq.</p>
</dd>
<dt><a href="https://www.tweag.io/posts/2017-08-24-linear-types-packed-data.html">Tweag I/O - Compact normal forms + linear types = efficient network communication</a></dt>
<dd><p>Nice insights on <em>linear types</em> from the people implementing them in GHC. Did I say how cool the people at http://tweag.io were?</p>
</dd>
<dt><a href="https://jship.github.io/posts/2017-08-27-monad-transformer-commutativity.html">jship - Monad Transformer Commutativity</a></dt>
<dd><p>Understanding how to stack your monad transformers</p>
</dd>
<dt><a href="http://idlewords.com/talks/web_design_first_100_years.htm">Web Design - The First 100 Years</a></dt>
<dd><p>Read this great talk thanks to my friend Bernard. Contains some important insights on how much we suck at predicting the future and an implicit call to arms to steer the future of the internet in the <em>right</em> direction</p>
</dd>
<dt><a href="https://github.com/barrucadu/dejafu">barrucadu/dejafu: Systematic concurrency testing meets Haskell.</a></dt>
<dd><p>Discovered this package thanks to Mathieu Boespflug from tweag.io! A great tool to systematically check concurrent programs.</p>
</dd>
<dt><a href="http://reasonablypolymorphic.com/blog/information-effects">Review: Information Effects :: Reasonably Polymorphic</a></dt>
<dd><p>Mind-boggling blog post on how to implement a language to define typed reversible computations in Haskell</p>
</dd>
<dt><a href="http://www.cs.utexas.edu/users/mckinley/papers/bpor-oopsla-2013.pdf">Partial Order Reduction</a></dt>
<dd><p>State explosion is the bane of model-checkers. This paper proposes algorithms (implemented in dejafu) to reduce the number of states to explore based on some notion of <em>equivalence relations</em> between states.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 35</title>
    <link href="http://abailly.github.io/posts/weekly-review-35.html" />
    <id>http://abailly.github.io/posts/weekly-review-35.html</id>
    <published>2017-08-28T00:00:00Z</published>
    <updated>2017-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 35</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on August 28, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://michael.steindorfer.name/publications/phd-thesis-efficient-immutable-collections.pdf">Efficient Immutable Collections</a></dt>
<dd><p>Immutables collections paves the way for efficient program transformations and parallelization, but they might lead to inefficiencies from garbage collection or repeated traversals. This thesis provides techniques to build efficient immutable collections on the JVM.</p>
</dd>
<dt><a href="https://github.com/ipfs/ipfs">GitHub - ipfs/ipfs: IPFS - The Permanent Web</a></dt>
<dd><p>Discovered this fascinating project which is the foundation of numerous other projects, like <a href="https://github.com/whyrusleeping/gx">gx</a> a package management tool.</p>
</dd>
<dt><a href="https://vadosware.io/post/end-to-end-testing-with-hspec-almost/">End To End Testing With Hspec (Almost)</a></dt>
<dd><p>How to (not) use Haskell and Hspec to write end-to-end testing using <a href="http://hackage.haskell.org/package/hspec">hspec</a> and <a href="https://hackage.haskell.org/package/webdriver">hs-webdriver</a>. Looks like recent changes in webdriver broke Haskell’s library…</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/16/interactions-of-individual-and-pair-programmers-with-an-intelligent-tutoring-system-for-computer-science/">Interactions of individual and pair programmers with an intelligent tutoring system for computer science | the morning paper</a></dt>
<dd><p><em>tl;dr</em>: We discovered that while both groups exhibited significant learning gains, pair programmers completed problems more quickly, relied less heavily on system-provided examples, coded more efficiently, and showed higher signs of engagement.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/17/on-the-design-of-distributed-programming-models/">On the design of distributed programming models | the morning paper</a></dt>
<dd><p>Another gem from Adrian Colyer’s treasure trove: What’s needed in languages to fully support distributed systems programming?</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/23/growing-a-protocol/">Growing a protocol | the morning paper</a></dt>
<dd><p>This paper triggered some research on distributed systems testing, along with:</p>
</dd>
</dl>
<ul>
<li><a href="https://blog.acolyer.org/2015/03/26/lineage-driven-fault-injection/">Lineage-driven Fault Injection | the morning paper</a>: Analysing programs execution to inject <em>interesting</em> errors, e.g. ones that have high probability of triggering bugs</li>
<li><a href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-leesatapornwongsa.pdf">SAMC</a>: A tool to drive testing through model-checking with specific techniques to reduce state explosion</li>
<li><a href="https://github.com/osrg/namazu">osrg/namazu: 鯰: Programmable fuzzy scheduler for testing distributed systems</a>: Fuzz testing of distributed systems</li>
<li><a href="http://www.pdl.cmu.edu/dbug/">Parallel Data Lab Project: dbug: Systematic and Scalable Testing of Concurrent Systems</a>: Another model-checking/testing tool interposing itself between processes and OS/libraries to catch system calls and inject errors</li>
<li><a href="http://www.pdl.cmu.edu/PDL-FTP/associated/CMU-PDL-12-101.pdf">Concurrent Systematic Testing at Scale</a>: Paper from the dbug project</li>
<li><a href="http://www.macesystems.org/mace/">The Mace Project | MaceSystems</a>: A language and toolset to design and implement distributed systems</li>
<li><a href="https://infoscience.epfl.ch/record/151495/files/EPFL_TH4858.pdf">LMC</a>: Solves the state explosion problem by analysing and tracking local state instead of the global state</li>
</ul>
<dl>
<dt><a href="https://www.zurich.ibm.com/~cca/papers/pax.pdf">Yet Another Visit to Paxos</a></dt>
<dd><p>One the numerous Paxos papers, this time introducing crash-tolerance and Byzantine failure tolerance. Lead to PBFT-Smart algorithm.</p>
</dd>
<dt><a href="http://www.countingcalculi.com/features/smart_hiring/">Hire Like the Israeli Military</a></dt>
<dd><p>Detailed article on practical application of Daniel Kahneman’s hiring techniques from <a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow">Thinking, Fast and Slow</a>. In the book, Kahneman advocates the use of a simple rating system based on questions to identify observable behaviours of hired persons and objectivize their past experience.</p>
</dd>
<dt><a href="https://stackoverflow.com/questions/10236953/the-pause-monad">haskell - The Pause monad - Stack Overflow</a></dt>
<dd><p>One article from a series I read this weekend trying to acquire a deeper understanding of Free monad construction and how to implement pause/resume on top of Free</p>
</dd>
</dl>
<ul>
<li><a href="https://www.reddit.com/r/haskelltil/comments/4ea7er/coyoneda_is_just_the_free_functor/">Coyoneda is just the Free Functor : haskelltil</a>: <a href="https://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Data-Functor-Coyoneda.html">Coyoneda</a> functor reifies functor application…</li>
<li><a href="http://alpmestan.com/posts/2017-08-17-coyoneda-fmap-fusion.html">From Hask Till Dawn: Coyoneda and fmap fusion</a>: … a technique that can be used to make traversal of functorial structures and repeated fmap applications more efficient</li>
<li><a href="https://elvishjerricco.github.io/2016/04/08/applicative-effects-in-free-monads.html">Applicative Effects in Free Monads</a></li>
<li><a href="http://elvishjerricco.github.io/2016/04/13/more-on-applicative-effects-in-free-monads.html">More on Applicative Effects in Free Monads</a></li>
</ul>
<dl>
<dt><a href="http://comonad.com/reader/2011/free-monads-for-less/">The Comonad.Reader » Free Monads for Less (Part 1 of 3): Codensity</a></dt>
<dd><p>A serie of article from Ed Kmett on the Free monad construction and how to make it more efficient, followed by:</p>
</dd>
</dl>
<ul>
<li><a href="http://comonad.com/reader/2011/free-monads-for-less-2/">The Comonad.Reader » Free Monads for Less (Part 2 of 3): Yoneda</a></li>
<li><a href="http://comonad.com/reader/2011/free-monads-for-less-3/">The Comonad.Reader » Free Monads for Less (Part 3 of 3): Yielding IO</a></li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Notes on Reliability &amp; Maintainability of Haskell Code</title>
    <link href="http://abailly.github.io/posts/haskell-reliability.html" />
    <id>http://abailly.github.io/posts/haskell-reliability.html</id>
    <published>2017-05-24T00:00:00Z</published>
    <updated>2017-05-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Notes on Reliability &amp; Maintainability of Haskell Code</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May 24, 2017</div>

<p>Those notes are my answer to a <a href="https://gist.github.com/heath/858a321b5fc96d3011d9b6ea4fca3cb9">question</a> asked on the <a href="https://elm-lang.slack.com/">Elm Slack</a></p>
<ol style="list-style-type: decimal">
<li>what are some methods you use to maintain a clean codebase?
<ol style="list-style-type: decimal">
<li>basic principles always apply: maintain low-coupling &amp; high-cohesion, separation of concerns</li>
</ol>
in the case of Haskell/FP, coupling across modules happen when one module depends on another module, possibly on details of data types (e.g. constructors) of this module. Even depending on exported types/functions introduces coupling. Modules should be as much self contained as possible
<ol start="2" style="list-style-type: decimal">
<li>clear separation between functional components of the system, each being vertically integrated instead of spread out over multiple technical layers</li>
</ol>
<p>By “vertically” I mean that a unit of deployment is a “function” of the system, something that’s meaningful from the point of view of the end-user/customer/business, e.g. a <em>bounded context</em> in the sense of Domain-Driven Design. This is opposed to a more technical view where units of deployment/organisation of the code are “horizontal” layers, e.g. Web service, applicative components, data access layer,…</p>
<ol start="3" style="list-style-type: decimal">
<li>minimal code sharing, limited to common types. Use common/standard libraries wherever possible, pack common dependencies as libraries</li>
</ol>
<p>Rather than depending on code at source level, depend on it at binary level, e.g. as a package.</p>
<ol start="4" style="list-style-type: decimal">
<li>standard module structure, repeated over all components of the system to ease navigation and understanding</li>
<li>test, test, test at all levels: unit tests (including QC tests), integration tests (e.g. at boundaries like REST APIs), system level tests</li>
<li>limit size of modules, components, functions (I always use a small 13’’ screen and everything should fit in it)</li>
</ol>
<p>Size matters when you need to refactor/edit/change any piece of code. GHC is smart enough to optimise code so there is usually nothing preventing dividing code in manageable chunks</p>
<ol start="7" style="list-style-type: decimal">
<li>no dependencies between components so that I can work on a single one at a time</li>
</ol>
<p><em>component</em> means <em>deployable unit of code</em>, e.g. might be a package or a service</p>
<ol start="8" style="list-style-type: decimal">
<li>type explicitly everything</li>
<li>abstract away actual IO as much as possible. Explicit IO type should appear as late as possible (e.g. in main function), favor specific monads with limited effects</li>
<li><p>use <em>actual types</em> wherever possible to represent domain concepts, avoid primitive types and above all <em>naked strings</em> (or <code>Text</code>) when they represent actual values</p>
<p>Types are the interface of functions/modules and they should be as explicit as possible. Compare:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">checkPassword ::</span> <span class="dt">UserName</span> <span class="ot">-&gt;</span> <span class="dt">Password</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
checkPassword u p <span class="fu">=</span> <span class="fu">...</span>

<span class="ot">checkPassword&#39; ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span><span class="ot">` </span>
<span class="ot">checkPassword&#39; userName password = ...</span></code></pre></div>
<p>Haskell provides <em>type synonyms</em> so it is tempting to have:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">UserName</span> <span class="fu">=</span> <span class="dt">Text</span>
<span class="kw">type</span> <span class="dt">Password</span> <span class="fu">=</span> <span class="dt">Text</span></code></pre></div>
<p>But aliases are syntactic and are replaced when typechecking code. Using aliases actually means depending on a concrete representation of the type. <code>newtype</code> are cheap in Haskell and it is easy to derive typeclasses to use constant strings or numbers when needed, but they are “actual types” and thus increases readibility and reliability of code.</p></li>
<li>limit exposition of constructors esp. for ADTs, prefer exposing functions and “smart constructors”</li>
</ol></li>
<li>how does haskell help you to maintain a clean, decoupled codebase?
<ol style="list-style-type: decimal">
<li>being expressive leads to more compact code which means more information fits in a single function which helps focusing</li>
<li>thanks to types, refactoring is very easy: change what’s needed to be changed and fix compiler errors</li>
<li>thanks to types, it is easy to generalise cross-cutting concepts that appear in different contexts</li>
<li>compositionality of functions helps defining and using small manageable chunks of logic</li>
<li>“higher” type concepts (typeclasses, GADTs, functors and friends, type families) increase expressivity and allows introducing domain-relevant or technical abstractions at all levels</li>
<li>types are very useful to model domain-related concepts and have some constraints checked by the compiler</li>
<li>being both compiled and interpreted decreases the feedback loop when developing/tuning code: I can use the REPL to play with the code</li>
</ol></li>
<li>what system design benefits do you receive from a statically typed, pure language such as haskell, that you wouldn’t receive in a dynamically typed, but immutable language?
<ol style="list-style-type: decimal">
<li>I can have a strong and statically enforced separation between a core domain model’s functions and types and connections to the outside world, along the line of hexagonal architecture. Thanks to separation of effectful and pure functions, it is easy to test/QC/reason about the core domain without having to deal with the impurity of realworld computations. For example, I can let concurrency out the picture and later on use STMs (or something else) to manage concurrent access, or I can model my system with concurrency in mind (e.g. CRDTs, event streams) and still not embed effects until actual deployment</li>
<li>I can leverage the power of the compiler to chose the level of correctness I want/need, from lousy to proof-like… I can actually code in Haskell like I would code in a dynamically typed language (e.g. use simple generic immutable structures like list, use primitives…) but I can also go for something close to proof-system.</li>
</ol></li>
</ol>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 20</title>
    <link href="http://abailly.github.io/posts/weekly-review-20.html" />
    <id>http://abailly.github.io/posts/weekly-review-20.html</id>
    <published>2017-05-22T00:00:00Z</published>
    <updated>2017-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 20</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May 22, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="tuesday">2017-05-09 Tuesday</h1>
<dl>
<dt><a href="https://www.youtube.com/watch?v%3DcaSOTjr1z18">A Functional Programmer’s Guide to Homotopy Type Theory - YouTube</a></dt>
<dd><p>Nice introduction to HoTT from a programmer’s perspective, with an example application from <em>patch theory</em></p>
</dd>
</dl>
<h1 id="wednesday">2017-05-10 Wednesday</h1>
<dl>
<dt><a href="http://civs.cs.cornell.edu/proportional.html">Condorcet Internet Voting Service</a></dt>
<dd><p>An online implementation of Condorcet’s voting system which uses voters’ ranking to select the result which is the most acceptable for all voters. Maybe the result of French Presidential elections would be best modelled with such a system…</p>
</dd>
<dt><a href="http://blog.sigfpe.com/2014/05/cofree-meets-free.html">A Neighborhood of Infinity: Cofree meets Free</a></dt>
<dd><p>Great blog post which triggered <a href="https://github.com/dalaing/cofun">David Laing’s</a> series of posts and talks and my own work on <a href="https://github.com/abailly/hdo">hdo</a> a library to interact with Digital Ocean’s API</p>
</dd>
<dt><a href="http://math.ucr.edu/home/baez/information_loss.pdf">information<sub>loss</sub>.pdf</a></dt>
<dd><p>Another theoretical look at Shannon’s entropy</p>
</dd>
</dl>
<h1 id="thursday">2017-05-11 Thursday</h1>
<dl>
<dt><a href="https://barryoreilly.com/2016/08/29/the-most-important-metric-youll-ever-need/">The most important metric you’ll ever need | Barry O’Reilly</a></dt>
<dd><p>Emphasizes the importance of <em>learning</em> in those day and age</p>
</dd>
<dt><a href="https://www.infoq.com/articles/scs-microservices-done-right">Self Contained Systems (SCS): Microservices Done Right</a></dt>
<dd><p>I am not a great fan of <em>XYZ done right</em> style of blog posts which have a natural tendency to decay over time. This one suggests a somewhat disciplined approach on microservices that is interesting.</p>
</dd>
</dl>
<h1 id="monday">2017-05-15 Monday</h1>
<dl>
<dt><a href="http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf">free.dvi - wadler.pdf</a></dt>
<dd><p>While preparing my talk, I thought this classical paper from Wadler could be a good example of <em>abstraction done right</em>!</p>
</dd>
<dt><a href="http://perevillega.com/understanding-free-monads">On Free Monads – Pere Villega</a></dt>
<dd><p>An explanation (in Scala) of Free monads and what they are useful for</p>
</dd>
<dt><a href="http://blog.gardeviance.org/2012/07/adoption-cycles.html">Bits or pieces?: Adoption cycles</a></dt>
<dd><p>Sarcastic post from Simon Wardley on how large organisations adopt emerging technologies</p>
</dd>
<dt><a href="https://medium.com/willbe-group/tous-artisans-au-21%25C3%25A8me-si%25C3%25A8cle-1f2addfb6862">Tous artisans au 21ème siècle ? – WillBe Group – Medium</a></dt>
<dd><p>Merci à Ronan pour le lien sur ce très bon article consacré au futur de l’artisanat. A mettre en regard de <a href="https://medium.com/willbe-group/travail-la-r%25C3%25A9volution-remote-5ea29f32ad1a">Travail : la révolution Remote – WillBe Group – Medium</a>. Il y a aussi un <a href="https://www.youtube.com/watch?v=OIL_2vknseM&amp;feature=youtu.be&amp;t=3m10s">talk</a></p>
</dd>
</dl>
<h1 id="wednesday-1">2017-05-17 Wednesday</h1>
<dl>
<dt><a href="http://dephasage.ocular-witness.com/pdf/SimondonGilbert.OnTheModeOfExistence.pdf">SimondonGilbert.OnTheModeOfExistence.pdf</a></dt>
<dd><p>An English and partial version of Simondon’s classical book</p>
</dd>
<dt><a href="http://www.moo.mud.org/">MOO home page</a></dt>
<dd><p>Thinking of usign a MOO as a communication channel to replace Slack for <em>Artisans du logiciel</em>…</p>
</dd>
</dl>
<h1 id="thursday-1">2017-05-18 Thursday</h1>
<dl>
<dt><a href="http://akkartik.name/post/literate-programming">Literate programming: Knuth is doing it wrong</a></dt>
<dd><p>I stumbled upon this blog post while attending <a href="http://ncrafts.io/speaker/matthiasnoback">Matthias Noback’s session on Living Documentation</a>. Literate programming would seem to make a lot of sense when one thinks about documenting software, yet it did not stick outside of academia. This post suggests improvements that could help literate programming go mainstream. This post lead me to <a href="https://awelonblue.wordpress.com/2014/09/29/introducing-wikilon/">Wikilon</a> which appears to be some attempt at building an interactive programming system along the line of Bret Victor’s <a href="http://worrydream.com/#!/LearnableProgramming">Learnable Programming</a></p>
</dd>
</dl>
<h1 id="saturday">2017-05-20 Saturday</h1>
<dl>
<dt><a href="http://tomasp.net/coeffects/">Coeffects: Context-aware programming languages</a></dt>
<dd><p>I had the pleasure to meet Tomas Petricek (apologies for missing diacritics…) at NewCrafts. This page is another attempt at providing living software instead of dead web pages to help people learn new concepts by playing with them.</p>
</dd>
<dt><a href="https://philipnilsson.github.io/Badness10k/posts/2017-05-07-escaping-hell-with-monads.html">Badness 10.000 - Escaping Hell with Monads</a></dt>
<dd><p>Another explanation of why monad is a good abstraction</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 18</title>
    <link href="http://abailly.github.io/posts/weekly-review-18.html" />
    <id>http://abailly.github.io/posts/weekly-review-18.html</id>
    <published>2017-05-08T00:00:00Z</published>
    <updated>2017-05-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 18</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on May  8, 2017</div>

<p>This post is a summary of links related to coding and software I followed and read (sometimes, skimmed over) in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<h1 id="monday">2017-05-01 Monday<a id="sec-1" name="sec-1"></a></h1>
<dl>
<dt><a href="https://github.com/abailly/xxi-century-typed/blob/master/idris/src/BottlesOfBeer.idr">99 Bottles of Beer</a></dt>
<dd><p>I managed to complete my Idris implementation of the 99 Bottles of Beer classical Kata. This attempt was triggered by a discussion on Slack over <a href="https://www.sandimetz.com/99bottles">Sandi Metz’s book</a> which a couple of friends have read and is apparently excellent.</p>
</dd>
</dl>
<h1 id="tuesday">2017-05-02 Tuesday<a id="sec-2" name="sec-2"></a></h1>
<dl>
<dt><a href="https://blog.acolyer.org/2017/05/02/corfu-a-distributed-shared-log/">Corfu: A distributed shared log | the morning paper</a><a id="sec-2-1" name="sec-2-1"></a></dt>
<dd><p>Very interesting paper about an implementation of a distributed strongly consistent persistent log, something handy when one wants to implement event sourcing. The code is open-sourced as <a href="https://github.com/CorfuDB/CorfuDB">CorfuDB/CorfuDB</a> and there is a recent follow-up I did not delve into yet.</p>
</dd>
<dt><a href="https://news.ycombinator.com/item?id%3D13576236">Ask HN: What is the biggest untapped opportunity for startups? | Hacker News</a></dt>
<dd><p>I found it funny the first answer to this question is exactly what I am trying to do with <a href="http://drcode.io">Dr.Code</a>: Short consulting sessions to help teams get over thorny issues or have access to affordable expert knowledge and skills.</p>
</dd>
<dt><a href="http://www.extremeprogramming.org/rules.html">Extreme Programming Rules</a><a id="sec-2-4" name="sec-2-4"></a></dt>
<dd><p>Back to basics… XP is still unsurpassed as a coherent set of guidelines and practices for software development.</p>
</dd>
</dl>
<h1 id="wednesday">2017-05-03 Wednesday<a id="sec-3" name="sec-3"></a></h1>
<dl>
<dt><a href="https://medium.com/travis-on-docker/multi-stage-docker-builds-for-creating-tiny-go-images-e0e1867efe5a">Multi-Stage Docker Builds for Creating Tiny Go Images</a><a id="sec-3-1" name="sec-3-1"></a></dt>
<dd><p>Something I have been doing by hand for couple of years now and which is now a supported feature of docker: Use several containers in your build to trim down images size.</p>
</dd>
<dt><a href="https://gordon.readthedocs.io/en/latest/lambdas.html">Lambdas — Gordon 0.6.0 documentation</a><a id="sec-3-2" name="sec-3-2"></a></dt>
<dd><p>I have been working last year on using Haskell to deploy <a href="https://github.com/abailly/aws-lambda-haskell">AWS Lambda</a> functions, a work that has been superseded by <a href="https://github.com/qmuli/qmuli/">qmuli</a> which aims at packaging properly Haskell executables and manage the workflow. Gordon does just that for officially supported runtimes.</p>
</dd>
</dl>
<h1 id="thursday">2017-05-04 Thursday<a id="sec-4" name="sec-4"></a></h1>
<dl>
<dt><a href="http://nullprogram.com/blog/2013/02/06/">How to Make an Emacs Minor Mode « null program</a><a id="sec-4-1" name="sec-4-1"></a></dt>
<dd><p>I am thinking of writing an proper indentation mode for a proprietary language I am working with and looked up what support Emacs provide for doing so. Still looks a bit daunting unfortunately.</p>
</dd>
</dl>
<h1 id="friday">2017-05-05 Friday<a id="sec-5" name="sec-5"></a></h1>
<dl>
<dt><a href="https://www.youtube.com/watch?v%3DpqFgYCdiYz4">(13) 2 10 Elaborator Reflection: Extending Idris in Idris - YouTube</a><a id="sec-5-1" name="sec-5-1"></a></dt>
<dd><p>Talk about using built-in elaborator engine in Idris to extend the language, similar to what one can achieve using Template Haskell.</p>
</dd>
<dt><a href="http://ericlefevre.net/wordpress/2009/03/06/is-fit-dead-a-debate-on-twitter/">Is Fit Dead? A debate on Twitter | Eric Lefevre-Ardant on Java &amp; Agile</a><a id="sec-5-2" name="sec-5-2"></a></dt>
<dd><p>It looks there is not much debate going on anymore on BDD/ATDD and I am not sure whether this is due to the fact it is now considered mainstream or has been dropped altogether. I have always been a big fan of FitNesse and <em>Executable Specifications</em> approach but this is something that requires a lot of energy to setup properly on a project. Not all teams and settings are ready to invest the time to build a common language across developers and business analysts.</p>
</dd>
</dl>
<h1 id="sunday">2017-05-07 Sunday<a id="sec-6" name="sec-6"></a></h1>
<dl>
<dt><a href="https://nstack.com/index.html">NStack - Composable Data Analytics</a><a id="sec-6-2" name="sec-6-2"></a></dt>
<dd><p>An interesting new proposal in the distributed computing space, implemented in Haskell. I am however not a big fan of having to use a custom language instead of an already existing scripting or programming language to describe workflows. Code is available on github: <a href="https://github.com/nstack/nstack">nstack/nstack: Type-safe, composable microservices for data analytics</a><a id="sec-6-1" name="sec-6-1"></a></p>
</dd>
<dt><a href="http://simoneetlesphilosophes.fr/imaginer-linversion/">Exercice n°1: renverser pour mieux voir - Simone et les philosophes</a><a id="sec-6-3" name="sec-6-3"></a></dt>
<dd><p>Exercer son esprit critique en commencant par le plus évident et le plus méconnu : les inégalités homme-femme.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
