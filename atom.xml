<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2023-02-16T00:00:00Z</updated>
    <entry>
    <title>Sur &quot;Le mythe de l&#39;entrepreneur&quot;</title>
    <link href="http://abailly.github.io/posts/mythe-entrepreneur.html" />
    <id>http://abailly.github.io/posts/mythe-entrepreneur.html</id>
    <published>2023-02-16T00:00:00Z</published>
    <updated>2023-02-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Le mythe de l&#39;entrepreneur&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on February 16, 2023</div>

<p><a href="https://www.editionsladecouverte.fr/le_mythe_de_l_entrepreneur-9782355221972"><em>Le mythe de l’entrepeneur</em></a> est un livre d’Anthony Galluzo, paru aux éditions de la Découverte en 2022. Au travers de la figure emblématique de Steve Jobs, il se propose de <em>détricoter</em> les mailles du mythe construit par Jobs, ses thuriféraires, et tous ceux qui ont intérêt à promouvoir une certaine conception de l’homme et de la société, et de mettre à nu la réalité sous-jacente à ce mythe, les forces qui le soutiennent et ont contribué à son émergence.</p>
<h2 id="résumé">Résumé</h2>
<p>Le point de départ du livre est une analyse scrupuleuse du “mythe” Steve Jobs, à partir d’un matériau riche de bibliographies - ou plutôt d’hagiographies, d’articles de presse, d’entretiens, de publicités et documents commerciaux d’Apple, etc. Dès la création d’Apple, Steve Jobs, a savamment construit et entretenu sa légende dont les grandes étapes sont bien connues : les traumatismes de l’enfance, l’éducation dans la classe moyenne industrieuse des années 50 et 60, les débuts héroïques dans un garage et les premières ventes, le succès fulgurant, la chute, la traversée du désert, le retour aux commandes d’Apple, les innovations géniales qui se succèdent, enfin la mort brutale en pleine gloire.</p>
<p>Steve Jobs, entouré d’équipes marketing et d’experts en communcation, a construit simultanément son image de génie et l’image “cool” et “branchée” d’Apple, se présentant comme un <em>entrepreneur</em> en opposition au <em>capitaliste</em> incarné, dans le mythe jobsien, par l’archi-ennemi Bill Gates et la firme qu’il a crééé Microsoft. L’entrepreneur est ici entendu en son sens schumpetérien, comme la figure paradigmatique des forces de destruction/création inhérentes au marché et à l’économie capitaliste. L’entrepreneur est cet individu, le plus souvent un homme, dont le génie lui permet d’entrevoir l’avenir, d’identifier avant tout le monde de nouvelles opportunités, de créer de nouveaux produits voire de nouveaux marchés. Avant Steve Jobs, la micro-informatique personnelle ludique n’existait pas, après Steve Jobs elle pèse des centaines de milliards de dollars. À sa mort, il sera “canonisé” et considéré à l’égal d’un Leonard de Vinci ou d’un Einstein.</p>
<p>Ce récit gomme ou minimise tout ce qui pourrait écorner l’image du démiurge : son insertion dans un contexte social, économique, historique particulier, celui de la Californie d’après-guerre, réceptacle de milliards de dollars d’investissement militaire et gouvernemental dans l’industrie aéronautique, les semi-conducteurs, les logiciels, les télécommunications ; le rôle fondamental du cercle familial, du milieu des “bricoleurs” issue d’un vaste marché de composants de seconde main, de Steve Wozniak bien sûr, des premiers investisseurs et de leur réseau ayant permis le décollage commercial ; l’importance du tissu industriel, du réseau de sous-traitants californien, de la disponibilité d’ingénieurs et de chercheurs hautement qualifiés ; les centaines et milliers de collaborations impliquées dans chaque “invention”…</p>
<p>Steve Jobs est l’incarnation moderne de l’archétype du génie qui s’est formé essentiellement avec le romantisme au tournant des XVIIIème et XIXème siècles. Mais dans le domaine de l’entrepreneuriat, il n’est pas le premier à avoir forgé sa propre statue de son vivant : à la fin du XIXème siècle déjà, l’opposition entre entrepreneur - créateur de valeur, d’innovations technologiques, oeuvrant pour le bien de l’humanité - et capitaliste - rapace sans coeur ni âm, financier de haut vol uniquement préoccupé d’amasser des richesses - est activée pour contrer le concept de <em>Robber barons</em> qui fait alors florès dans la presse populaire et accompagne la diffusion des idées socialistes. John Rockefeller, Andrew Carnegie, ou Thomas Edison ont à coeur d’incarner ce mythe de l’entrepreneur, en opposition aux financiers tels que J.P. Morgan.</p>
<p>Eux aussi utilisent la presse, les livres - Carnegie en particulier obtient de grand succès d’éditions, les activitiés philanthropiques, les voyages, pour promouvoir leur image de <em>Self-made men</em> dont la richesse et le talent bénéficie au plus grand nombre. Ils sont l’incarnation du succès et des bienfaits de la méritocratie américaine et du libéralisme économique, comme Steve Jobs une centaine d’années plus tard.</p>
<p>Tous ces efforts de relations publiques se heurtent à la réalité des relations de pouvoirs dans une économie capitaliste. L’image d’Andrew Carnegie se trouva durablement affectée par sa “gestion” désastreuse de la <a href="https://en.wikipedia.org/wiki/Homestead_strike">grève de Homestead</a>, et est bien documenté ce que son ascension doit à la brutalité d’un capitalisme de <em>laissez-faire</em> dopé par l’afflux de migrants. A contrario, l’image de Steve Jobs n’est guère entachée par les “révélations” dans les années 2010 sur l’exploitation par Apple de milliers d’ouvriers chinois, dans des immenses usines gérées par des sous-traitants, voire dans des camps de travail Ouïghours ; comme elle a résisté à l’exploitation par Apple à ses débuts, des milliers de migrants sud-américains travaillant dans des usines de sous-traitance ultra-flexibles en Californie même, qui n’ont pas été pour rien dans le décollage de l’industrie de la micro-informatique.</p>
<p>Le livre se conclut sur une interrogation : Elon Musk est-il l’héritier de cette image d’entrepreneur génial que Steve Jobs a su porter à son plus haut degré ? Ou, comme bien d’autres avant lui, ne restera-t’il qu’un “robber baron” comme un autre ?</p>
<h2 id="discussion">Discussion</h2>
<p><em>Le mythe de l’entrepreneur</em> est très bien écrit, de manière très vivante, remplit d’anecdotes croustillantes ou désolantes, et il se lit d’une traite ce qui est un plaisir assez rare pour être souligné dans le domaine des livres “militants.”</p>
<p>Comme tout le monde, je connaissait la <em>Vulgate</em> jobsienne et ce qu’elle incarne d’idéologie “Siliconien”, et si je ne suis pas particulièrement “fan” du personnage de Jobs, je dois bien avoir subi son influence d’une manière ou d’une autre puisque je suis client de sa marque. Mais ce que met particulièrement en lumière A.Galluzzo c’est la cohérence et la constance avec laquelle ce mythe a été construit par Jobs et Apple pour promouvoir la marque et ses produits. Je me souviens d’une pub des années 90 je crois, où un père industriel et son héritier de fils faisaient le tour des usines et des docks, en limousine, sous un ciel gris et bas, et qui se concluait avec le logo à la pommme et le slogan <em>Think different</em>.</p>
<p>Ce que sont parvenus à construire et maintenir Steve Jobs et tous les dirigeants d’Apple, depuis sa création à la fin des années 1970 jusqu’à nos jours soit pendant plus de 40 ans, c’est au sens propre une <em>icône</em>, c’est à dire une image de la divinité réalisée selon des règles précises.</p>
<blockquote>
<p>L’icône ne représente pas le monde qui nous entoure. La transfiguration en est la clé en particulier dans le visage des personnages.
<a href="https://fr.wikipedia.org/wiki/Icône_(religion)">icône</a></p>
</blockquote>
<p>La firme Apple, par la grâce de la “déification” de Steve Jobs et du discours construit autour de sa personne, est parvenue à totalement fétichiser les marchandises qu’elle produit, faisant disparaître l’ensemble du processus de production nécessaire à la “magie” Apple. Marketing et réseaux d’influences, chaînes logistiques complexes s’étendant sur l’ensemble du globe, méga-usines où triment des armées d’ouvriers, terres rares, métaux lourds, plastiques nécessitant des processus d’extraction, de fabrication et de recyclage lourds et polluants, stratégies financières d’évasions fiscales et d’optimisations des profits, gestion du personnel en apparence généreuses pour contrer toute tentative de syndicalisation, toutes ces activités peu glamour, souvent peu regardantes sur les dégâts environnementaux et humains en dehors des caméras.</p>
<p>Qui sait, ou se souvient, qu’Apple a fait un <a href="https://www.apple.com/newsroom/pdfs/FY22_Q4_Consolidated_Financial_Statements.pdf">chiffre d’affaires</a> de 394 <em>milliards</em> de dollars en 2022 pour un bénéfice de 99 milliards, dont 90 ont été utilisés pour racheter ses propres actions, augmentant mécaniquement la valeur des actions restantes ? Steve Jobs est bien un capitaliste comme les autres, mais un capitaliste qui est parvenu à faire oublier que son objectif était de maximiser les profits, d’accumuler de la richesse.</p>
<p>Dans la période que nous traversons, il est possible qu’Elon Musk n’ait même pas besoin de toute cette communication, de ces écrans de fumée : quarante ans de révolution néo-conservatrice et de lavage de cerveaux ont réussi à implanter dans l’esprit de la multitude que l’accumulation de richesse, l’avidité, la rapacité, la brutalité en affaire, étaient des valeurs positives.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;L&#39;étrange défaite&quot;</title>
    <link href="http://abailly.github.io/posts/etrange-defaite.html" />
    <id>http://abailly.github.io/posts/etrange-defaite.html</id>
    <published>2022-08-28T00:00:00Z</published>
    <updated>2022-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;L&#39;étrange défaite&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on August 28, 2022</div>

<p>En juillet 1940, Marc Bloch, historien de renom, juif athée et vétéran de deux guerres, est démobilisé suite à la capitulation signée par le maréchal Pétain. Il écrit <a href="https://www.gallimard.fr/Catalogue/GALLIMARD/Folio/Folio-histoire/L-etrange-defaite#">L’étrange défaite</a> comme un procès-verbal, une déposition, composée à partir de son expérience concrète de la guerre, de la vie sociale et politique de la France des années 20 et 30, et du travail de l’historien et de l’universitaire. Alors que la guerre d’agression et de conquête revient frapper à la porte de l’Europe, ce témoignage sans concession mérite d’être relu.</p>
<h1 id="résumé">Résumé</h1>
<p>Le livre se compose de deux parties : la <em>confession d’un soldat</em> et la <em>confession d’un français</em> traitant respectivement de l’analyse proprement militaire de la défaite, et de l’analyse des causes sociales, politiques, économiques de cet effondrement.</p>
<h2 id="les-causes-militaires-de-la-défaite">Les causes militaires de la défaite</h2>
<p>Dans la première partie, Marc Bloch fait appel à son expérience de soldat et d’officier dans les deux guerres. En 1939 il est appelé sous les drapeaux en tant qu’officier d’état-major chargé de la gestion des dépôts et de l’approvisionnement des unités en essence. Ce n’est pas un poste au “front” mais c’est un poste assez stratégique qui lui permet d’interagir avec d’autres parties de l’état-major, le 2ème bureau par exemple qui est chargé du renseignement, ou le 4ème chargé de la stratégie ; mais aussi avec les unités combattantes qu’il doit ravitailler en essence ; et les alliés, belges et britanniques, avec lesquels il est nécessaire de se coordonner.</p>
<p>Pour Marc Bloch, l’armée française à la doctrine forgée dans les tranchées de Verdun, dirigée par des “vieillards”, engoncée dans une bureaucratie tatillone et paperassière, a totalement échoué à prendre la mesure du changement de paradigme que la motorisation, les blindés et l’aviation ont provoqué. Vieillissante dans ses idées et ses structures, complaisante, arrogante, elle s’est trouvée confrontée à un ennemi plus jeune, plus agile, plus mobile, plus agressif et n’a jamais réussi à réagir et en prendre la mesure, là où l’armée “napoléonienne” de 1914 avait su trouver de nouvelles ressources, changer en profondeur, devant les premières défaites de l’offensive allemande.</p>
<p>Il donne de nombreux exemples de cette sénilité tant intellectuelle que structurelle :
* l’inaction et l’apathie durant la “drôle de guerre” de septembre 1939 à mai 1940 quand il aurait fallu profiter de la concentration des forces en Pologne pour affaiblir l’armée allemande (sans parler du soutien à l’allié polonais agressé par l’allemagne nazie et la russie soviétique) ;
* une fois le combat engagé, l’incapacité du commandement à intégrer la vitesse de l’armée allemande dans ses plans de sorte que chaque ligne de retraite était établie en fonction de tableaux de marche de 1914 et que les unités, une fois le recul accomplie, se retrouvait en fait toujours au front voire même derrière l’ennemi plus mobile ;
* le refus du 2ème bureau de “traiter” une source belge de renseignements sur les dépôts de carburants parce qu’elle n’avait pas suivi la procédure prévue.</p>
<p>Les “alliés” anglais en prennent aussi pour leur grade, peu soucieux de venir en aide à une armée française qu’ils méprisaient un peu. Bloch équilibre tout de même les torts, les français se révélant incapables d’organiser la coordination et de mettre en place des structures de liaison efficaces au niveau des unités combattantes, privilégiant systématiquement les voies hiérarchiques lentes et lourdes.</p>
<p>Il hésite un peu à aller au delà de la simple incompétence mais n’oublie pas de noter que des officiers (dans une note de bas de page ajoutée 2 ans après la rédaction du texte, il confesse en avoir sous-estimer le nombre) et soldats ont clairement manqué de courage, voire ont accueilli la reddition avec soulagement. Il note d’ailleurs que ce ne sont pas nécessairement les soldats professionnels, blanchis sous le harnois et rompus à la vie morne et paisible des casernes, qui montrent le plus de courage face à “la mitraille”. L’éthique du travail bien fait et de la solidarité se transporte de la vie civile à la viemilitaire et Bloch ne manque pas de rappeler combien les “jaunes” se comportent lâchement au feu.</p>
<p>Une fois le combat engagé, la mobilité et l’agilité de l’armée allemande, les offensives et bombardements sur de grandes profondeurs, ont agit comme le serpent Qâa sur Mowgli : démoralisée, prisonnière de schémas obsolètes, privée de chefs capables de prendre des initiatives hétérodoxes, l’armée française était vaincu avant même d’avoir tiré la moindre cartouche.</p>
<h2 id="les-causes-sociales-et-politiques-de-la-défaite">Les causes sociales et politiques de la défaite</h2>
<p>L’examen de conscience ne s’arrête pas là et Marc Bloch souligne combien l’armée est le reflet du pays qu’elle est supposée servir et de son époque, dépendante de décisions politiques et du soutien de la population. Or force est de constater que le ver était dans le fruit là aussi.</p>
<blockquote>
<p>[..] nos chefs ne sont pas seulement laissés battre. Ils ont estimé très tôt naturel d’être battu.</p>
</blockquote>
<p>Encore une fois, la prégnance d’une vision passéiste de la France faite de clochers, de petits bourgs nichés au creux des vallons, de notables, dotée d’un art de vivre et d’un terroir unique, d’un conservatisme bonhomme peu enclin aux décisions hâtives et rétif au changement, une France essentiellement rurale en somme, masqua les changements profonds survenus durant l’entre-deux-guerres et l’essor de l’industrialisation et de la société de masse. Ce fantasme ne correspondait plus à la réalité bien sûr, comme la crise de 1929 et la victoire du Front Populaire le montra, mais il était encore profondément ancré dans l’imaginaire collectif et notamment les classes dirigeantes.</p>
<p>L’auteur passe en revue l’ensemble des acteurs de la vie sociale et il n’en est pas qui trouve grâce à ses yeux:</p>
<ul>
<li><p>les partis de droite ont tout fait pour saper la République, “gangrénée” par la corruption et le “communisme”:</p>
<blockquote>
<p>que les partis qualifiés de droite soient si prompts aujourd’hui à s’incliner devant la défaite, un historien ne saurait en éprouver une bien vive surprise</p>
</blockquote></li>
<li><p>les partis de gauche, portés au pouvoir par le grand espoir du Front Populaire ont autant été paralysés par un pacifisme aveugle, quand ce n’était pas de la pure inféodation à des intérêts étrangers :</p>
<blockquote>
<p>dans ses zigzags sans grâce reconnaissons la courbe que décrivirent, sous nos yeux émerveillés, les danseurs sur corde raide du communisme</p>
</blockquote></li>
<li><p>patrons et syndicats ont été incapables de faire “l’union sacré” tant il est vrai que</p>
<blockquote>
<p>Nos chefs d’entreprise ont toujours mis leur foi dans le secret, favorable aux menus intérêts privés, plutôt que dans la claire connaissance, qui aide l’action collective</p>
</blockquote>
<p>et que les syndicats, en particulier dans la fonction publique, n’ont pas su dépasser les intérêts catégoriels pour unir leurs troupes (à l’époque nombreuses) et soutenir l’effort de guerre ;</p></li>
<li><p>les professeurs et universitaires, enfin, corps dont Marc Bloch fait partie, qui ont failli à leur rôle d’éclaireur et “d’accoucheur” des esprits en</p>
<blockquote>
<p>Oscillant sans trêve entre un humanisme à l’ancienne mode [..] et le goût souvent intempérant pour les nouveautés.</p>
</blockquote>
<p>et qui n’ont pas eu le courage, pour ceux qui partagaient le diagnostic pessimiste de Marc Bloch, de faire état publiquement des carences de tout un pays.</p></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>J’avoue avoir eu un peu de mal à “rentrer” dans le style de Marc Bloch, assez marqué par son époque et fait de multiples incises qui hâchent le flot de la lecture, parfois très lyriques voire un peu grandiloquent. Mais ce texte court est porté par la puissance d’une vision claire et lucide de la catastrophe qui frappa notre pays en 1940. Surtout, il me semble résonner cruellement avec l’actualité la plus brûlante.</p>
<p>Comme le dit Karl Marx dans <a href="https://fr.wikipedia.org/wiki/Le_18_Brumaire_de_Louis_Bonaparte">Le 18 brumaire de Louis Bonaparte</a>:</p>
<blockquote>
<p>Tous les grands événements et personnages historiques se répètent pour ainsi dire deux fois […] la première fois comme tragédie, la seconde fois comme farce.</p>
</blockquote>
<p>Les années 30 avaient les Ligues, l’Action Française, la Cagoule, le PCF inféodé à l’Internationale Communiste, Maurice Thorez et Jacques Duclos, des dictatures et régimes plus ou moins autoritaires et totalitaires, URSS et l’Allemagne nazie en tête, un pays fracturé entre classe ouvrière, paysans inquiets, bourgeoisie anti-républicaine, et une guerre commencée par l’invasion d’un pays d’Europe de l’est supposé notre allié mais soutenu assez mollement par des dirigeants politiques et un peuple mal préparé à “mourir pour Dantzig”.</p>
<p>Toute ressemblance avec des personnalités et événements récents ne saurait être complètement fortuite, ni vraiment rassurante.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>PROGRAMme Final Workshop</title>
    <link href="http://abailly.github.io/posts/programme-1.html" />
    <id>http://abailly.github.io/posts/programme-1.html</id>
    <published>2022-07-03T00:00:00Z</published>
    <updated>2022-07-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>PROGRAMme Final Workshop</h1>

  <h2 class="subtitle">Day 1</h2>

<div class="info">Posted on July  3, 2022</div>

<p>I have already published some notes on the <a href="/posts/hapop-5.html">HaPoP-5</a> conference, here are more notes from the accompanying <a href="https://programme.hypotheses.org/spring-workshop-iii-what-is-a-computer-program-final-conference">PROGRAMme workshop</a>. <a href="http://tomasp.net/">Tomas Petricek</a> and <a href="https://pro.univ-lille.fr/liesbeth-de-mol/">Liesbeth de Mol</a> kindly asked me to take part in the workshop as a <em>respondent</em> for one of the presentations, of which I am most grateful to them! Note the goal of the <em>PROGRAMme</em> program (!) is to publish a - possibly constantly evolving - book to answer the question “What is a computer program?” This book currently lives in a private wiki as it’s still a work-in-progress, with lot of unfinished chapters.</p>
<h1 id="day-1---programme">Day 1 - PROGRAMme</h1>
<h2 id="what-is-a-computer-program-an-anti-disciplinary-view">What is a computer program? An anti-disciplinary view</h2>
<blockquote>
<p>presented by Liesbeth De Mol</p>
</blockquote>
<ul>
<li>This is the introduction to the whole book, reminding it’s an ANR funded project</li>
<li><em>anti-disciplinary</em> vs. <em>trans-disciplinary</em>: The intent is not to let each discipline (logic, CS, philosophy, linguistics…) undisturbed but rather to</li>
<li>The goal is to question the object that lies at the foundation, as programs have become transparent while software is “eating the world”, to approach the problem with ontological glasses on</li>
<li>Problems are also opportunities:
&gt; Wherein lies the danger, grows also the saving power.
&gt; <em>Friedrich Hölderlin.</em></li>
<li>Programs evolve and their use, study, and make should be on equal footing. A program is like a <a href="https://arsindustrialis.org/pharmakon"><em>pharmakon</em></a>, being both a cure and a poison depending.
<ul>
<li>There’s a risk of alienation which has been identified, among others, by Simondon, when the use of a technological artefact becomes disconnected from its make</li>
<li>Programs <em>are historical</em> and their invisibilisation is a process that increases the alienation they induce, yet we think about them with decades or even centuries old ideas
&gt; We march backwards into the future
&gt; _Marshall McLuhan</li>
</ul></li>
<li>In his response, Paul Edwards highlights there are 2 genres of computing history:
<ul>
<li>One concerned with <em>logic</em>, the evolution of concepts and the intellectual history of programming or calculability</li>
<li>Another one concerned with <em>machines</em>, taking an engineering and economic perspective</li>
</ul></li>
<li><em>Computer Science</em> is the discipline that connects <em>notations</em> and <em>machines</em>, seeking (or producing) semiotic closure of the questions it delves with
<ul>
<li><p>Scientific disciplines are a construct from the XIXth century (see Foucault, <em>Les mots et les choses</em>)</p></li>
<li><p>Within a discipline there’s no place for some questions and that’s how boundaries between disciplines are erected</p></li>
<li><p>The tension between <em>notations</em> and <em>machines</em> is captured by the following <a href="https://en.wikipedia.org/wiki/Semiotic_square">Greimas square</a>:</p>
<pre><code>notations --------- machines
   |                   |
   |                   |
   |                   |
 systems ----------- logic</code></pre></li>
</ul></li>
</ul>
<blockquote>
<p>I wholeheartedly support the intention of breaking the barriers disciplines erect around them, a process leading to the over-specialisation which has dire consequences on the whole of humanity. I think it’s Gunther Anders who introduced the moral imperative that one should fullly understand the consequences of his or her actions as part of a system, or refrain from undertaking them. That software is both a boon and bane is now quite obvious and rethinking our, and others’, relationship to programs, programming, and software is an important task to carry out.</p>
</blockquote>
<h2 id="classifying-programs">Classifying programs</h2>
<blockquote>
<p>presented by Baptiste Mélès</p>
</blockquote>
<ul>
<li>The unicity of the concept of program contrasts with the diversity of concrete programs. The goal of classification is also to not forget “minorities”.</li>
<li>Bottom-up classification approach, using <em>comparative analysis</em> and unifying existing classifications
<ul>
<li>Not that there aren’t that many classifications, presenter highlights Brooks’ (System/Product) and <a href="https://www.expressionsofchange.org/lehman-spe-classification/">Lehman’s</a> (S/P/E)</li>
</ul></li>
<li>Top-down (a priori) classification seeks to escape “real-life mess”</li>
</ul>
<blockquote>
<p>Like most of the chapters, this is a work-in-progress about which I don’t have much to say.</p>
</blockquote>
<h2 id="logic-a-declaration-of-independence">Logic – a declaration of independence?</h2>
<blockquote>
<p>presented by Giuseppe Primiero</p>
</blockquote>
<ul>
<li>Logic representation comes before the implementation of any program</li>
<li>Draw on the analogy of “Logic as Motherland” and “Languages as colonies”</li>
<li>Flow diagrams from Von Neumann was a first step
<ul>
<li>Logic is used as a specification, using mathematical and possibly recursive definitions naturally</li>
<li>This leads to the <em>Correctness problem</em>: Is an implementation correct w.r.t. its specificaiton? This involves proving invariants by going through a flowchart and checking the state each transition leads to</li>
<li>Floyd, 1967: Properties are independent of their physical realisations in a language</li>
<li>Hoard, 1969: Programming is an <em>exact science</em> and we can apply deductive reasoning from the program</li>
</ul></li>
<li>Then come various <em>policies of control</em> (Curry-Howard, logic programming, operational semantics…): How does Motherland enforces rules on colonies
<ul>
<li>Types were initially very different from logic</li>
<li>To what extent do colonies depend on Motherland?</li>
</ul></li>
<li>Adopt a pragmatic view: The nature of programs depend on the user or agent
<ul>
<li>Do programs have <em>habitus</em>?</li>
<li>Is there something like a “Sociology of programs”?</li>
</ul></li>
<li>The <em>Order of Concepts</em> opposes the <em>Order of Things</em></li>
<li>A new role for <em>Formal Methods</em>: Not imposing regulations on what can or cannot be programmed, but hlping in constructing systems
<ul>
<li>More verifications leads to more fine-grained ontologies</li>
</ul></li>
<li>It seems there are many Motherlands: Logic, business needs, military
<ul>
<li>Are we not entering a <em>post-colonial</em> phase of programming?</li>
</ul></li>
</ul>
<blockquote>
<p>I enjoyed how far we can get applying the Motherland/colonies pattern to CS and programming history. There is still this “provincial” feeling within CS w.r.t. Mathematics and Logic. It’s not uncommon for programmers with strong math background to grow some form of superiority complex regarding their inferior brethens, the “mere” programmers and this attitude is especially rife in the FP circles. Putting the bonds between logic and programming in perspective, realising that type theory or formal methodes are just <em>one</em> aspect of programs, is an important work to carry out.</p>
</blockquote>
<h2 id="notations.-there-is-no-escape">Notations. There is no escape</h2>
<blockquote>
<p>presented by Tomas Petricek</p>
</blockquote>
<p><strong>Note</strong>: These notes are a mix of things from the chapter presented by Tomas and my own response to it. See the <a href="/slides/notations-escape.html">slides</a>.</p>
<ul>
<li>The ever growing proliferation of notations seems like a curse, as if they have escaped some Pandora’s box</li>
<li>They are the result of a <em>negotiation</em> between humans and machines
<ul>
<li>We need a notation to be close to the way we think and express ourselves</li>
<li>But it must also be close to how machines actually work</li>
</ul></li>
<li>Having different notations for humans and machines is a way to enforce division of labor &amp; maintain hierarchy of thinkers and doers</li>
<li>LISP and Smalltalk provides higher <em>notational programmability</em></li>
</ul>
<h2 id="machines-hide-and-seek">Machines – Hide and seek</h2>
<blockquote>
<p>presented by Maarten Bullynck</p>
</blockquote>
<ul>
<li><a href="http://bitfragment.net/notes/proglang-src-brown-automatic-1954/">Brown &amp; Carr, 1954</a> develops the idea of “Automatic Programming” into a general translation system, whereby the computer itself is used to translate high-level language into low-level instructions, something which was novel and actively resisted by some people at the time</li>
<li>Computers become digital because we <em>tame the waves</em> from analog signal</li>
<li>Cloud computing and virtual machines seems to mark the triumph of software vs. hardware</li>
<li>There is a need to <em>open the machines</em></li>
</ul>
<h2 id="systems-the-system-if-dead-long-live-the-system.">Systems – the system if dead! Long live the system.</h2>
<ul>
<li>Understand programs from a systems perspective</li>
<li>A <em>system</em> is a stabilised heterogeneous situation containing members, see <a href="https://dl.acm.org/doi/pdf/10.1145/1115858.1115870">McIlroy, 1969</a></li>
<li>A program:
<ul>
<li>contains programs</li>
<li>interact with other programs (it’s never alone)</li>
</ul></li>
<li>Programs:
<ul>
<li>are programmed</li>
<li>programming happens within programs</li>
</ul></li>
<li>States of the system are <em>opening</em>, <em>exchanging</em>, <em>closing</em></li>
<li>Maintaining invariants:
<ul>
<li>enabling multiple purposes, generality vs. applicability</li>
<li>managing compatibility: convenience vs. dependence</li>
</ul></li>
<li>Example of RUNCOM evolving to <code>/etc/rc.d</code> then <code>systemd</code>
<ul>
<li>systemd provides unity, separation of responsibilities of the system vs. applications</li>
</ul></li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>HaPoP-5</title>
    <link href="http://abailly.github.io/posts/hapop-5.html" />
    <id>http://abailly.github.io/posts/hapop-5.html</id>
    <published>2022-06-21T00:00:00Z</published>
    <updated>2022-06-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>HaPoP-5</h1>

  <h2 class="subtitle">History and Philosophy of Programming</h2>

<div class="info">Posted on June 21, 2022</div>

<p>I have a long standing interest for Philosophy, and I was thus delighted when <a href="https://twitter.com/tomaspetricek">Tomas Petricek</a> proposed me to join the <em>Program Committee</em> for the <a href="https://www.shift-society.org/hapop5/">HaPoP-5</a> conference, more than two years ago. The conference was initially supposed to take place in 2020, co-located with NCrafts, but both events were cancelled because of <em>You Know What</em>. Here are some notes along with personal comments about each of the conference’s sessions. Another blog post will cover my notes from the <a href="https://programme.hypotheses.org/spring-workshop-iii-what-is-a-computer-program-final-conference">PROGRAMme workshop</a> which took place in the same location right after HaPoP-5.</p>
<h2 id="warren-sack---miniatures-demos-and-artworks-three-kinds-of-computer-program-their-uses-and-abuses">Warren Sack - Miniatures, Demos and Artworks: Three Kinds of Computer Program, Their Uses and Abuses</h2>
<p>Warren Sacks is the author of <a href="https://mitpress.mit.edu/books/software-arts">Software Arts</a></p>
<ul>
<li>Those three kinds of programs look superficially close but are actually very different artefacts</li>
<li><em>Miniatures</em> are like <em>philosophical statements in code</em>, the goal is to rewrite a system in a miniature form in order to clarify what’s specific about it, its “essence”
<ul>
<li><a href="https://www.amazon.com/Inside-Computer-Understanding-Miniatures-Intelligence-ebook/dp/B00J4BRAMM">Inside Computer Understanding</a> is a great example, it’s a book containing the description of 5 systems along with their miniatures</li>
<li>Another example is Minix built for the purpose of teaching and understanding operating systems</li>
<li>Notebooks, literate programming are other examples of miniatures</li>
</ul></li>
<li><em>Demos</em> are <em>rhetoric</em> in nature, demonstration in the prime sense (proving) very often to the purpose of getting more funding</li>
<li><em>Artworks</em> are <em>aesthetic</em> endeavours, of course. Software art is inscribed in the history of art esp. the emergence of modern and then conceptual art which detaches the artwork from its concrete realisation</li>
<li>Miniatures are pedagogical, demos persuasive, artworks pleasurable</li>
</ul>
<blockquote>
<p>I don’t know much about software arts but this talk gave me the desire to discover more of it. I liked the attempt at classifying various artifacts which share the common theme of <em>Programming-in-the-small</em> but serve very different purposes. It seems to me however that this classification does not do justice to the “Demo scene” whose artifacts lie at the intersection of all three classes.</p>
<p>Another very interesting category of programs which would have been worthy of analysis is what I would call “Constrained Competitive programming”, things like the <a href="https://www.ioccc.org/">IOCCC</a>, or programs written in very alien languages. There is an <em>exploratory</em> dimension that would deserve a category of its own.</p>
</blockquote>
<h2 id="shoshana-simons---programming-practice-as-a-microcosmos-of-human-labor-and-knowledge-relations">Shoshana Simons - Programming practice as a microcosmos of human labor and knowledge relations</h2>
<ul>
<li>The main thesis of this work is that technical practices are not separate from the rest of the world and are historically situated which implies the programmer embeds its worldview in their work</li>
<li>Starting examples are:
<ul>
<li>Runtime analysis of a program completely ignores the actual labor involved in executing the program</li>
<li>Buying an apple at a grocery store ignores and hides the labor involved in bringing the apple, shrinkwrapped, to the store</li>
<li>The <em>command-line</em> metaphor reflects the division of labor between those who give command and those who execute them</li>
</ul></li>
<li>Technical practice is hegemonic, it’s a training ground for capitalism</li>
<li>There are 2 main approaches to ethics esp. as it relates to programming and tech:
<ul>
<li>Ethics as values: People have values they impose on otherwise neutral data/technologies</li>
<li>Ethics as consequences: Technology is a given, what are its impacts and how to make it work for the greater good</li>
</ul></li>
<li>These 2 views keep technology as a <em>black-box</em> they are like the 2 sides of a same coin, the input and output of “function” whose workings are ignored</li>
<li>The <em>How</em> matters, we need to open the black-box if we really want to improve our ethical approach to tech</li>
<li>Practice <em>Critical Journaling</em> which is a daily reflection on one’s own relation to tech, critiquing what is unethical in it and hopefully improving it</li>
</ul>
<blockquote>
<p>Another interesting and somewhat provocative talk, even though the critique of the idea that scientific theories, and even more so practices, are a-historical and independent of the social context in which they are produced is somewhat mainstream nowadays. Although this talk takes a more political stance on the question, this reminds me of early Latour’s work, esp. in <a href="https://www.editionsladecouverte.fr/la_science_en_action-9782707145468">La science en action</a> in which he demonstrates how scientists are not pure minds completely detached from the mundane practicalities of this world, like money, power status, ego…</p>
<p>I find teaching the practice of <em>Critical Journaling</em> a great idea, and also the emphasis on “unpacking” the black-box relevant in a world where technology is unquestioned and appears somewhat “magical”, with its impacts on the real world and real people’s life being ignored (think how food delivery startups take advantage of loopholes in law to employ workers without paying the full benefits and taking the responsibilities an employer has, how AirBnB’s pricing algorithms impact housing prices in metropolis…)</p>
</blockquote>
<h2 id="lucas-bang---program-size-a-call-for-inquiry">Lucas Bang - Program Size: A Call for Inquiry</h2>
<p>https://mitpress.mit.edu/books/making-sense</p>
<ul>
<li>Blum’s Size theorem states that a total program equivalent to a non-total program would suffer from an exponential blow-up in size. Intuitively, non-total languages allow one to “compact” the behaviour of a program
<ul>
<li>Computing GCD takes 2 lines in Python but 400 in (total) Idris</li>
</ul></li>
<li>A general program could be:
<ol type="1">
<li>Most general purpose PL are too general</li>
<li>Let’s write more programs into restricted (total) PL</li>
<li>Blum’s theorem might bite you</li>
</ol></li>
<li>“If you want to optimise your code, you have to write more code”</li>
<li>We need developers to pay more attention to program size</li>
</ul>
<blockquote>
<p>I was completely ignorant of Blum’s theorem and even though its results are somewhat obvious, the fact it talks about total programming languages is very interesting and resonates with my personal investigations on <a href="./dependently-typed-accounting.html">practical use of Dependent Types</a>.</p>
<p>The “call to arms” to developers to start taking care of their program size makes of course a lot of sense, and it’s well-known that program size is <a href="https://www.researchgate.net/publication/220204439_Cyclomatic_Complexity_and_Lines_of_Code_Empirical_Evidence_of_a_Stable_Linear_Relationship">good measure for complexity</a> or at least as good as any other measure, and taming complexity is a major problem in software engineering.</p>
<p>In a way, Lucas is advocating for more polyglot programming, whereby teams and projects will use the “right tool” for the job and not reach out for whatever hammer that happens to be “ready-at-hand” at one point in time for everything. Using total languages (eg. Idris), or <em>restricted languages</em> (<a href="https://dhall-lang.org/">Dhall</a> or <a href="https://github.com/Gabriella439/grace">Grace</a>), for the relevant parts of a system entails significant advantages in terms of quality, testing, security (eg. reduction of attack surface). My intuition is that those advantages, in the long run, offset the drawback of having to manage several languages/toolchains.</p>
</blockquote>
<h2 id="andre-dickson---the-disturbance-of-death-and-debt">Andre Dickson - The disturbance of death and debt</h2>
<ul>
<li>Major disturbances of programs are
<ul>
<li>Death (Peter Naur, <a href="https://pages.cs.wisc.edu/~remzi/Naur.pdf">Programming as Theory Building</a>, or <a href="https://gist.github.com/dpritchett/fd7115b6f556e40103ef">here</a> for a markdown)
&gt; The death of a program happens when the programmer team possessing its theory is dissolved. A dead program may continue to be used for execution in a computer and to produce useful results. The actual state of death becomes visible when demands for modifications of the program cannot be intelligently answered. Revival of a program is the rebuilding of its theory by a new programmer team.</li>
<li>Conceptual Integrity (Brooks)</li>
<li>Debt (Ward Cunningham)</li>
</ul></li>
<li>In Naur’s views, programs die over time because the programmers lose understanding of the underlying theory, or because there is no theory
<ul>
<li>Naur’s theory is implicit whereas <a href="https://plato.stanford.edu/entries/ryle">Ryle</a>’s explicit</li>
<li>The problem with Naur’s view is that theories erase the program as an <em>equipment</em> (in phenomenological sense following Heidegger), a set of tools, rules and languages to make the practice of programming explicit</li>
</ul></li>
<li><em>Programs are equipments</em></li>
</ul>
<blockquote>
<p>This talk was one of the most philosophical of the conferences, drawing on Heidegger’s phenomenology to criticize, or shed a different light on Naur’s and Cunnigham’s notions and how they “disturb” the “lifecycle” of a program. We have had a follow-up discussion by mail with the presenter which somehow clarified his point of view. In my words, the idea is that a program (and the whole environment in which it is taken care of by programmers) is an <em>equipment</em> in the sense of Heidegger.</p>
<p>This talk prompted me to think again about this <em>conceptual integrity</em> concept, and to somehow reject Peter Naur’s (and Brooks’) idea that a program is somehow the “embodiment” or the “realisation” of a <em>theory</em>. This feels a lot like classical Aristotelian shape/matter duality which in my opinion is a common plague of our industry and possibly of our civilisation as it conveys the idea that what <em>matters</em> most is the shape, the idea, the theory that one bestows on matter in a god-like gesture, like how antique gods modelled humanity out of clay and infused them with life.</p>
</blockquote>
<h2 id="daniel-kuby---towards-a-linguistic-conception-of-programming"><a href="https://twitter.com/danielkuby">Daniel Kuby</a> - Towards a linguistic conception of programming</h2>
<ul>
<li>Linguistics is concerned with human languages whereas prog languages are the realm of <em>formal languages</em> theory</li>
<li>What is a PL? We can take the machine centric view or use the formal language sense, but talking about <em>language</em> for PLs is a metaphor
<ul>
<li>Linguistics make use of formal languages but they are not its subject of study</li>
</ul></li>
<li>Goal of the talk is to reframe PL as <em>natural languages</em>. According to studies in <a href="https://www.researchgate.net/publication/333481200_The_Language_of_Programming_A_Cognitive_Perspective">cognitive linguistics</a> programming activates the same brain areas than <em>talking</em> and not <em>problem solving</em>
<ul>
<li><a href="https://www.researchgate.net/publication/263743154_When_Technology_Became_Language_The_Origins_of_the_Linguistic_Conception_of_Computer_Programming_1950-1960">Nofre et al., 2014</a> provides an inquiry into the links between linguistics and programming</li>
</ul></li>
<li>The fact that the design of PL is linguistic engineerings is new only in philosophy. Famous quote from <a href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">Abelson and Sussman</a> about readability of programs dates back to the 80’s</li>
<li>There are 2 traditions that take interest in specific languages:
<ul>
<li>Wittgenstein and his primitive language then later <em>language games</em></li>
<li>Frege and the microscope analogy about math/science notation vs. ordinary language</li>
<li>Poverty/simplicity of a language does not mean <em>deficiency</em> but <em>fitness for use</em></li>
</ul></li>
<li>This leads to the notion of <em>Restricted Languages</em> related to applied linguistics, the study of <em>usage</em> of languages
<ul>
<li><em>restriction</em> is an operator on <em>natural language</em> to produce sublanguages</li>
</ul></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">Spontaneous</th>
<th style="text-align: left;">Engineered</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Restricted</td>
<td style="text-align: left;">sublanguages</td>
<td style="text-align: left;">Controlled languages</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">(medicine)</td>
<td style="text-align: left;">eg. PL</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Unrestricted</td>
<td style="text-align: left;">Natural languages</td>
<td style="text-align: left;">Planned languages</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">eg. Esperanto</td>
</tr>
</tbody>
</table>
<blockquote>
<p>We keep talking about <em>languages</em> in the context of programming but outside of CS this is understood asa metaphor and linguistics usually ignores programming languages. I like the idea of applying linguistic tools and categories to PL, considering those as part of a continuum of symbolic systems. Us practitioners are always concerned with the readability and expressivity of our programs, perhaps a little too much sometimes. Perhaps this line of research will provide insights that could inform future languages development, or possibly engineering of DSLs.</p>
</blockquote>
<h2 id="nicolas-nalpon-and-alice-martin---why-semantics-are-not-only-about-expressiveness---the-reactive-programming-case">Nicolas Nalpon and Alice Martin - Why semantics are not only about expressiveness - The reactive programming case</h2>
<ul>
<li>Concerned with the <em>epistemic</em> difference (and cost) of different semantics: How a given formal semantics represent a system and its behaviour matters for the end user</li>
<li>Having identical semantic expressiveness does not imply identical semantic representation</li>
<li>Example: Reactive programming for UI. To give a semantic to sush a system requires dealing with 2 distinct parts: An algorithmic part and a reactive part. Experiment with 2 formalisms:
<ul>
<li><a href="https://core.ac.uk/download/pdf/82274932.pdf">Bigraphs theory</a> is a formalism from Robin Milner (of CCS and π-calculus fame)</li>
<li>λ-calculus</li>
</ul></li>
<li>Possible solution is using hybrid semantics, eg. different fwks for different parts of the system at the cost of increasing complexity in code generation</li>
<li>What’s the quantitative impact of various formalisms wrt to length of derivation/execution steps?</li>
</ul>
<blockquote>
<p>Going beyond the obvious but useless Turing completeness yardstick to compare formal languages makes a lot of sense, and the example provided while simple makes a good case about how different representations can have different “epistemic” costs. I am too sure about the usability of bigraph formalism which I am unfamiliar with but if I think about something simpler like π-calculus, the classical reduction of λ-calculus to it (and vice-versa) already demonstrates how different notations for different aspects of system can be more or less painful to work with. It’s another good argument for polyglot programming, this time when it comes to formal specifications.</p>
</blockquote>
<h2 id="robin-hill---hello-world-an-interrogation">Robin Hill - Hello World? An Interrogation</h2>
<ul>
<li>HW is about writing complete program, end-to-end</li>
<li>It’s about helping students’ relationship with code to evolve from <a href="https://eternalisedofficial.com/2021/02/02/ready-to-hand-and-present-at-hand-heidegger/">present-at-hand_ to _ready-at-hand</a></li>
<li>Why investigate HW?
<ul>
<li>Wikipedia has a page that exists since 2001 and has been constantly updated</li>
<li>There’s a common metric to compare PL, the <em>Time To Hello World</em> or TTHW</li>
<li>HW is a <em>meme</em></li>
</ul></li>
<li>HW does nothing, it has nothing to do about programming and is born of expedience. It is stripped of all the “interesting” parts of programming (eg. algorithms, problem solving…)</li>
<li>It stems from the fact students need first hand experience, to learn basic things that hard to articulate and make the programming environment <em>ready-at-hand</em>
<ul>
<li>For example, HW shows that programming is about <em>ordering</em> (do one thing, then one thing)</li>
<li>Code is <em>materiality without matter</em>, it presents possibilities and resistances</li>
</ul></li>
<li>There are analogs from other crafts like stitching fabrics together when learning to sew
<ul>
<li>Goal is to show <em>how</em> and <em>that</em></li>
</ul></li>
<li>Important realisation is that coding involves code to do coding -&gt; <em>we use programs to write programs</em> which is something specific to this activity</li>
<li>programming = materiality + computational thinking ?</li>
</ul>
<blockquote>
<p>The last talk of the conference proposes a phenomenological inquiry into the humble yet ubiquitous “Hellow World” program.</p>
<p>I found it interesting this analysis lead to the somewhat obvious but yet ignored truth that <em>coding involves code</em>: Even though it’s possible to write programs with pencil and paper, to actual <em>code</em> and <em>program</em> requires some other program to actually do something. HW is the first artefact a wannabe developer encounters that helps to acquire that insight. It reminds me of how puzzled I was before I learnt systems programming, when I reading books about Computer hardware and CPU, that were hinting at assembly or C code and I was pretty much clueless on how to actually <em>write</em> and <em>execute</em> those. I only have ever programmed using high-level applications like Multiplan or Access and did not know there was another reality behind those applications.</p>
<p>Robin Hill’s work, while seemingly simple, highlights this fact there is a <em>huge</em> amount of implicit knowledge behind even the simplest task of programming.</p>
</blockquote>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>On &quot;Resonance&quot;</title>
    <link href="http://abailly.github.io/posts/resonance.html" />
    <id>http://abailly.github.io/posts/resonance.html</id>
    <published>2022-03-12T00:00:00Z</published>
    <updated>2022-03-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>On &quot;Resonance&quot;</h1>

  <h2 class="subtitle">Part I, On relations to the World</h2>

<div class="info">Posted on March 12, 2022</div>

<p><a href="https://www.editionsladecouverte.fr/resonance-9782348067358">Resonance</a> is a book by Harmut Rosa, a famous contemporary German sociologist and philosopher who theorised <em>Acceleration</em> as a core impact modernity has on society in a previous book. I have read the first part of this book in French but the ideas he set forth <em>resonated</em> - pun intended - so much with me I wanted to share them with a wider audience, hence this English summary.</p>
<p>My notes don’t do justice to the richness of the book which is very well written even if quite dense, and more importantly packed with concrete examples and actual results from studies in the field and experiments, whether from neurosciences, sociology, psychology… Something that’s rare enough in a theoretical book to be worthy of emphasis.</p>
<p>This small article tries to summarise the core ideas I understood from this rich book, and how those ideas relate to other ideas, feelings, experiences I have had in the past. It’s (un)structured as a loosely organised collection of notes, and my goal is to give the reader enough clues and intriguing ideas that she or he would want to have a closer look and read this important book.</p>
<h2 id="how-does-a-resonating-life-looks-like">How does a resonating life looks like?</h2>
<p>Our life is essentially experienced as weaving bonds with beings and things, whether objects, practices, beliefs, groups), as a continuous stream of phenomenons manifesting that something outside of us <em>Affects</em> use. Rosa introduces his book with the description of the contrasted life of three pairs of people:
* One person that seeks to maximise resonance of every single experience, versus one who tries to maximise the number of variety of lived experiences,
* One that perceives the world as full of resonating bonds versus one the only feels alienated,
* One that relates to the world and other beings through <em>command &amp; control</em>, as instruments to suit her purpose, versus one that relates to others through <em>mimetic assimilation</em>.</p>
<p>Resonance thus occurs either <em>horizontally</em>, with other human beings (friends, relatives, lovers, activists…), <em>diagonally</em> with things, animals, ideas, or <em>vertically</em> with transcending “totalities” like The World, Nature, God, Humanity.</p>
<h2 id="embodiment-of-resonance">Embodiment of Resonance</h2>
<p>Our body is what allows us to resonate with otheres, skin is our first communication medium: It’s first through touch and being touched that we experience the world, following the eerie state of the baby in his or her mother’s placenta. The skin is a membrane through which the outside affects us (scars, burns, strokes, tatoos), but with which we also express ourselves (flush, goose bumps). The more we consider our skin (and more generally our body) as an <em>object</em> the less we seem able to resonate.</p>
<p>Breathing and blowing are our very first, mostly unconscious, interaction with the world, ones which force us to let it penetrate us. Then comes eating and drinking.</p>
<p>We are social beings through and through even within our bodily interaction with the world: The way we walk, we perceive space, our attitude, how we stand up and sit down… This <em>hexis</em> is the embodiment of socially built constraints and habits and in return it has social effects.</p>
<p>The erotic relationship to the other, whether “purely” sexual or “merely” platonic, is a peak of resonance. It’s one of the most powerful and intense ways to resonate with the Other and the World as it involves every part of our being, physical, mental, aesthetic.</p>
<p>Relation to the World can be modelled as involving 3 parts: The Self, the Body and the World.
The Body mediates the relationship of the Self to the World, and interactions happen in both directions yielding 4 different possible type of relations. Any of these relations can be experienced as <em>resonating</em> or <em>muted</em>. In the late modernity, the Body (and the World) are most often experienced as <em>instrumental</em>.</p>
<p>Reification is the process through which one aims at controlling and mastering the Body, considering it as an <em>object</em>. It can take two apparently opposite but deeply connected aspects:</p>
<ul>
<li><em>Internal reification</em> through reeducation and training, dietary regimes, yoga and gym courses, fasting…</li>
<li><em>External reification</em> through the use drugs or aesthetical surgery.</li>
</ul>
<p>Reification induces <em>alienation</em> by dissociating one’s Self from her Body, a symptom of which being the <em>burn-out</em>.</p>
<p>The separation between the <em>objectal body</em> and the <em>subjectal body</em>, between the body as it relates to the world and the body as it relates to the Self, is nowhere as obvious than in the varieties of sexuality and relationships to one’s gender. The fact that intersexuality, travesty, homosexuality or transsexuality can be powerful sources of alienation and pain for the individual demonstrates:
1. How much society values the <em>objectal body</em> over the <em>subjectal</em> one, and
2. That such fundamental things as our perceptions of our body are socially built.</p>
<h2 id="resonance-culture">Resonance &amp; Culture</h2>
<p>The deepest experiences of resonances are always devoid of a particular object hence of desire.</p>
<blockquote>
<p>The Self and the World are not entities preexisting their relationship, but take shape through the relationnal process.
p. 195</p>
</blockquote>
<p>Man is an auto-interpretative being.</p>
<p>According to Weber and Habermas, each culture favors one or the other form of relation to the worlds, classified along 2 pairs of opposition: Active or Passive attitude, whereby the Self is an intentional subject actively engaging with the World, or merely a receptacle of whatever the World throws at her ; Affirmation or Negation as ways to evaluate one’s relationship to the world.</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>Active</th>
<th>Passive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Affirmation</td>
<td>Adaptation (Confucianism)</td>
<td>Contemplation (Ancient Greece)</td>
</tr>
<tr class="even">
<td>Negation</td>
<td>Domination (Capitalism)</td>
<td>Escape (hinduism, buddhism)</td>
</tr>
</tbody>
</table>
<p>No culture is devoid of values hence of <em>evaluation</em> which is the process through which we attribute one or more <em>values</em> to something.
We can distinguish between <em>Weak evaluation</em> which relates to our immediate desires, “I want X” and which are “internal”; and <em>Strong evaluation</em> which relates to our core values, “It is important that X”, and which are always external, within the <em>World</em>.</p>
<p>Evaluation allows to build a <em>Moral map</em> of the World with guides our choices and gives meaning, within the frame of a specific cultural context.</p>
<p><a href="http://www.gerhardschulze.de/">Gerhard Schulze</a> studied the attitudes and beliefs of inhabitants of a small German city in the 80’s and proposed 5 classes identifiying each attitude with what he calls a <em>Basic Existential Problem</em>:</p>
<ol type="1">
<li><em>Threat</em> where the World is perceived mostly as a source of danger from which to seek protection,</li>
<li><em>Trial</em>: The world is a source of challenges to overcome,</li>
<li><em>Stimulation</em>: The World is a source of feelings and sensations,</li>
<li><em>Self experience</em>: The world is a way to know oneself better,</li>
<li><em>Adaptation</em>: The World as expectations to be met, to adapt with.</li>
</ol>
<h2 id="resonance-empathy">Resonance &amp; Empathy</h2>
<p>Empathy is a biological phenomenon that we have been programmed to feel, much like as social animals we have a natural tendency to imitate others. That’s why it’s pretty hard to act violently in normal circumstances, it requires exceptional situations and possibly several agressions to react.</p>
<p>Empathy has a neurological support, possibly through so-called mirror neurons and imitative instinct, but it is socially constructed through the child and adult’s interactions with others. “Wolf child” unvoluntary experiments and numerous psychological studies have proven that interactions are vital for the mental well-being and psychic development.</p>
<p>Saying or hearing can be performative because language is intimately linked to our capabilities to resonate. And language resonates because it links us to the social world.</p>
<h2 id="alienation-vs.-resonance">Alienation vs. Resonance</h2>
<p>Alienation is a concept which has received a lot of attention along the 20th century, so much so that it devolved into amorphous meaninglessness. Within the theory of resonance, alienation can receive a very precise definition as <em>relation without relationship</em> to the World, that is a form of being and interaction with the world, both things, animals and people, which is purely <em>instrumental</em>, muted, devoid of feedback.</p>
<p>That’s the exact opposite of <em>resonance</em> which is defined as a bi-directional, feedback rich, relation to the World, each party resonating with the others on its <em>own frequency</em>.</p>
<p>Alienation and resonance are dialectically related: Resonance emerges from consciousness of an alienation and the quest of a “solution” founded on trust into the very possibility of resonance.</p>
<p>This dialectic definition <em>resonance</em> and <em>alienation</em> ends the first part of the book, the second being devoted to identifying concrete manifestations of both in what Rosa calls <em>Late modernity</em>, namely our Western capitalist civilisation.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Mutation-Based TDD</title>
    <link href="http://abailly.github.io/posts/mutation-testing.html" />
    <id>http://abailly.github.io/posts/mutation-testing.html</id>
    <published>2022-01-31T00:00:00Z</published>
    <updated>2022-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Mutation-Based TDD</h1>

  <h2 class="subtitle">Developing Plutus contracts with QuickCheck</h2>

<div class="info">Posted on January 31, 2022</div>

<h1 id="smart-contracts-cardano">Smart Contracts &amp; Cardano</h1>
<p>I discovered the concept of <em>Smart Contracts</em> in 2016 in Singapore when I met the nice folks at <a href="https://legalese.com/">Legalese</a>, Meng Wong and Alexis Chun. This is what attracted me to blockchain much more than the cryptocurrency and speculation space: The fascinating idea of designing software that would run in a fully decentralised and distributed manner, representing evolving contractual obligations and rights over time, and reacting to consensual events added to the chain.</p>
<p>Since then I have worked on a private blockchain based platform at <a href="https://www.symbiont.io/">Symbiont</a>, designing and building a <a href="https://www.symbiont.io/mortgages">mortgage servicing system</a> using Symbiont’s <a href="https://www.symbiont.io/post/safety-and-ease-of-use-in-sympl-a-dsl-for-enterprise-smart-contracts">SymPL</a> ; and recently joined <a href="https://iohk.io/">IOG</a> which is the company developing the core technology of the <a href="https://cardano.org/">Cardano</a> blockchain and cryptocurrency.</p>
<p>In 2021 <a href="https://plutus.readthedocs.io/en/latest/">Plutus</a>, Cardano’s native smart contract language, was made available on mainchain. Plutus is basically a lambda-calculus, and thus a Turing-complete language, with which developers write <em>scripts</em> that can lock <a href="https://files.zotero.net/eyJleHBpcmVzIjoxNjQzNDY2MzE0LCJoYXNoIjoiYTVhYmY4NjdiY2E2YzdkNTNjODkwNWNmZDZhYmM5MjAiLCJjb250ZW50VHlwZSI6ImFwcGxpY2F0aW9uXC9wZGYiLCJjaGFyc2V0IjoiIiwiZmlsZW5hbWUiOiJDaGFrcmF2YXJ0eSBldCBhbC4gLSAyMDIwIC0gVGhlIEV4dGVuZGVkIFVUWE8gTW9kZWwucGRmIn0%3D/156852d95f236fc19bf9615579d71dd7857ba06556a4b867adef6bfe7e5c4e1a/Chakravarty%20et%20al.%20-%202020%20-%20The%20Extended%20UTXO%20Model.pdf">eUTxO</a>. The scripts are evaluated when a transaction <em>consumes</em> such a eUTxO and the transaction is considered valid iff each validator evaluates to <em>True</em> in the context of the given transaction.</p>
<p>Of course, the correctness of the validators’ code aka. <em>Smart Contracts</em> is of the utmost importance as they can control large amount of funds and coordinate complex processes involving a large number of parties. The Smart contracts space is infamous for quite a few exploits, some of them <a href="https://en.wikipedia.org/wiki/The_DAO_(organization)">famous</a> and having resulted in significant losses, hence the ability to test, verify, validate, audit Plutus code is critical. While we wait for proper formal verification tools to mature, we have to resort to standard practices like auomated testing and manual auditing, hence as <em>Smart Contracts Developers</em> we need to be extra-careful with this part of the code and put ourself in the shoes of potential “Attackers” that could try to harm users in various ways: Steal currencies, Denial-of-Service, lock funds…</p>
<h1 id="hydra-smart-contracts">Hydra Smart Contracts</h1>
<p>With my fellow colleagues working on the <a href="https://github.com/input-output-hk/hydra-poc">Hydra</a> Layer-2 protocol for Cardano, <a href="https://www.linkedin.com/in/matthias-benkort-47186a57">Mathias Benkort</a> and <a href="https://www.linkedin.com/in/sebastian-nagel-2bb43a1a/">Sebastian Nagel</a>, we decided in October 2021 to move away from PAB and Plutus Application Framework in the development of the Hydra on-chain validators and experiment with so-called <em>Direct Chain</em> interaction: Use the standard cardano-api protocols and data structures to interact with the blockchain, posting transactions and following the chain as new blocks get created and new transactions added.</p>
<p>After having spent some time setting up the needed infrastructure to build, post and observe Hydra-relevant transactions to and from a cardano-node, we went back to revisit our earlier work on Contracts and implement the full “Happy path” Hydra lifecycle, from initialising a Head to <em>Fan-out</em> and redistribution of UTxO created within the Head.</p>
<h2 id="test-driving-hydras-validators">Test-Driving Hydra’s Validators</h2>
<p>Being Test-Driven Development addicts the first question raised was then: How do you test-drive Plutus smart contracts? There’s a growing set of tools developers have at their disposal to test and test-drive Plutus contracts:</p>
<ol type="1">
<li>The “official” <a href="https://plutus-apps.readthedocs.io/en/latest/plutus/tutorials/contract-testing.html">Model-based testing</a> framework which is part of the plutus-apps repository
<ul>
<li>Scope is complete Plutus apps, which are tested at the level of the <code>Contract</code> monad, eg. including both on-chain and off-chain code,</li>
<li>Tests are generated based on a <em>state machine model</em> of the system,</li>
<li>It uses QuickCheck and <a href="https://github.com/input-output-hk/plutus-apps/tree/main/quickcheck-dynamic">quickcheck-dynamic</a> framework to explore state machine, generate traces and check correctness of implementation,</li>
<li>Tests are run within an <code>Emulator</code> that’s supposed to reproduce the behaviour of the blockchain.</li>
</ul></li>
<li><a href="https://github.com/tweag/plutus-libs/">plutus-libs</a> is another model-based testing approach also based on QuickCheck from <a href="https://www.tweag.io/blog/2022-01-26-property-based-testing-of-monadic-code/">Tweag</a>, called <code>cooked-validators</code>:
<ul>
<li>It provides own <code>MonadBlockChain</code> abstraction to represent off-chain interaction with the blockchain, which ultimately is based on Plutus’ representation of the ledger’s types,</li>
<li>Tests are written as properties over trace expressions written in a <code>GenT</code> monad allowing interleaving generators and chain interactions like posting transactions,</li>
<li><em>modalities</em> <code>somewhere</code> and <code>everywhere</code> provide a way to modify generated traces to produce more traces representing some arbitrary change over the set of traces. This is a powerful concept akin to <em>Temporal logic</em> modal operators, see <a href="https://github.com/tweag/plutus-libs/blob/main/examples/tests/PMultiSigStatefulSpec.hs#L272">this example</a> for a use of <code>somewhere</code>,</li>
</ul></li>
<li><a href="https://github.com/Liqwid-Labs/plutus-extra/tree/master/tasty-plutus">tasty-plutus</a> provides a unit and property testing framework integrated with <a href="https://hackage.haskell.org/package/tasty">Tasty</a>
<ul>
<li>It’s based on a DSL to build a <code>ScriptContext</code> that can then be used to run the validators directly,</li>
<li>Uses Plutus’ <code>Scripts.runScript</code> function to run the script,</li>
<li>The scripts are run in compiled form and passed to the CEK interpreter,</li>
</ul></li>
</ol>
<h2 id="mutation-based-property-driven-development">Mutation-based Property Driven Development</h2>
<p>We decided to explore another avenue, which we have called <em>Mutation-based Property Driven Development</em> and which is as one can guess, a combination of <em>Property-based Testing</em> with QuickCheck, <em>Test-Driven Development</em>, and <em>Mutation testing</em>. Traditional <a href="https://en.wikipedia.org/wiki/Mutation_testing">Mutation testing</a> is a testing technique that introduces small modifications like changing a comparison operator, or modifying constants, into a program and checks whether or not the existing tests “kill” the produced mutants, eg. fail. Mutation testing requires somewhat complex tooling because it needs to modify the source code, in limited and semantically meaningful ways in order to generate code that won’t be rejected by the compiler. A quick search lead me to <a href="https://hackage.haskell.org/package/MuCheck">MuCheck</a> which seems to be the only available tool in Haskell-land and is quite old already, and beside we did not want to rely on esoteric tooling.</p>
<p>Plutus eUTxO validators are boolean expressions of the form:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>validator <span class="op">:</span> <span class="dt">Datum</span> <span class="ot">-&gt;</span> <span class="dt">Redeemer</span> <span class="ot">-&gt;</span> <span class="dt">ScriptContext</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>All things being equal, “mutating” a <em>validator</em> so that it returns <code>False</code> instead of <code>True</code> can be done:</p>
<ul>
<li>Either by <em>mutating</em> the code of the <code>validator</code> implementation,</li>
<li>Or by <em>mutating</em> its arguments.</li>
</ul>
<p>This simple idea lead us to the following strategy to test-drive each of our validator scripts, <code>Head</code>, <code>Commit</code> and <code>Initial</code>:</p>
<ol type="1">
<li>Start with a validator that always return <code>True</code>,</li>
<li>Write a <em>positive</em> property test checking <em>valid</em> transactions are accepted by the validator(s),</li>
<li>Write a <em>negative</em> property test checking <em>invalid</em> transactions are rejected. This is where <em>mutations</em> are introduced, each different mutation type representing some possible “attack”,</li>
<li>Watch one or the other properties fail and enhance the validators code to make them pass,</li>
<li>Rinse and repeat.</li>
</ol>
<p>As this is really the most “novel” part here are some details about the <em>Mutations</em> and the <em>Adversarial</em> property we check.</p>
<h2 id="generic-property-and-mutations">Generic Property and Mutations</h2>
<p>The definition of the property is simple and completely generic way: Given a transaction with some UTxO context, and a function that generates <code>SomeMutation</code> from a valid transaction and context pair, this property checks applying any generated mutation makes the mutated (hence expectedly invalid) transaction fail the validation stage.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">propMutation ::</span> (<span class="dt">CardanoTx</span>, <span class="dt">Utxo</span>) <span class="ot">-&gt;</span> ((<span class="dt">CardanoTx</span>, <span class="dt">Utxo</span>) <span class="ot">-&gt;</span> <span class="dt">Gen</span> <span class="dt">SomeMutation</span>) <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>propMutation (tx, utxo) genMutation <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  forAll <span class="op">@</span>_ <span class="op">@</span><span class="dt">Property</span> (genMutation (tx, utxo)) <span class="op">$</span> \<span class="dt">SomeMutation</span>{label, mutation} <span class="ot">-&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    (tx, utxo)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span> applyMutation mutation</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span> propTransactionDoesNotValidate</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span> genericCoverTable [label]</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span> checkCoverage</span></code></pre></div>
<p>To this basic property definition we add a <code>checkCoverage</code> that ensures the set of generated mutations covers a statistically significant share of each of the various possible mutations classified by their <code>label</code>.</p>
<p>The <code>SomeMutation</code> type is simply a wrapper that attaches a <code>label</code> to a proper <code>Mutation</code> which is the interesting bit here.</p>
<p>The <code>Mutation</code> type enumerates various possible “atomic” mutations which preserve the structural correctness of the transaction but should make a validator fail.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Mutation</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">ChangeHeadRedeemer</span> <span class="dt">Head.Input</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">ChangeHeadDatum</span> <span class="dt">Head.State</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">PrependOutput</span> (<span class="dt">TxOut</span> <span class="dt">CtxTx</span> <span class="dt">Era</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RemoveOutput</span> <span class="dt">Word</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">ChangeInput</span> <span class="dt">TxIn</span> (<span class="dt">TxOut</span> <span class="dt">CtxUTxO</span> <span class="dt">Era</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">ChangeOutput</span> <span class="dt">Word</span> (<span class="dt">TxOut</span> <span class="dt">CtxTx</span> <span class="dt">Era</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Changes</span> [<span class="dt">Mutation</span>]</span></code></pre></div>
<p>The constructors should hopefully be self-explaining but for the last one. Some interesting mutations we want to make require more than one “atomic” change to represent a possible validator failure. For example, we wanted to check that the <code>Commit</code> validator, in the context of a <code>CollectCom</code> transaction, verifies the state (<code>Head.Input</code>) of the <code>Head</code> validator is correct. But to be interesting, this mutation needs to ensure the <em>transition</em> verified by the <code>Head</code> state machine is valid, which requires changing <em>both</em> the datum and the redeemer of the consumed head output.</p>
<h2 id="transaction-specific-mutations">Transaction-specific Mutations</h2>
<p>To be run the <code>propMutation</code> requires a starting “healthy” (valid) transaction and a specialised generating function. It is instantiated in the test runner by providing these two elements:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>describe <span class="st">&quot;CollectCom&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  prop <span class="st">&quot;does not survive random adversarial mutations&quot;</span> <span class="op">$</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    propMutation healthyCollectComTx genCollectComMutation</span></code></pre></div>
<p>The interesting part is the <code>genCollectComMutation</code> (details of the <code>Mutation</code> generators are omitted):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">genCollectComMutation ::</span> (<span class="dt">CardanoTx</span>, <span class="dt">Utxo</span>) <span class="ot">-&gt;</span> <span class="dt">Gen</span> <span class="dt">SomeMutation</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>genCollectComMutation (tx, utxo) <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  oneof</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    [ <span class="dt">SomeMutation</span> <span class="dt">MutateOpenOutputValue</span> <span class="op">.</span> <span class="dt">ChangeOutput</span> <span class="op">...</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">SomeMutation</span> <span class="dt">MutateOpenUtxoHash</span> <span class="op">.</span> <span class="dt">ChangeOutput</span> <span class="op">...</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">SomeMutation</span> <span class="dt">MutateHeadScriptInput</span> <span class="op">.</span> <span class="dt">ChangeInput</span> <span class="op">...</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">SomeMutation</span> <span class="dt">MutateHeadTransition</span> <span class="op">&lt;$&gt;</span> <span class="kw">do</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        changeRedeemer <span class="ot">&lt;-</span> <span class="dt">ChangeHeadRedeemer</span> <span class="op">&lt;$&gt;</span> <span class="op">...</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        changeDatum <span class="ot">&lt;-</span> <span class="dt">ChangeHeadDatum</span> <span class="op">&lt;$&gt;</span> <span class="op">...</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Changes</span> [changeRedeemer, changeDatum]</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>Here we have defined four different type of mutations that are interesting for the <code>CollectCom</code> transaction and represent possible “attack vectors”:</p>
<ul>
<li>Changing the <code>Head</code> output’s value, which would imply some of the committed funds could be “stolen” by the party posting the transaction,</li>
<li>Tampering with the content of the UTxO committed to the Head,</li>
<li>Trying to collect commits without running the <code>Head</code> validator,</li>
<li>Trying to collect commits in another Head state machine transition.</li>
</ul>
<h2 id="running-properties">Running Properties</h2>
<p>When such a property test succeeds we get the following report which shows the distribution of the various mutations that were tested.</p>
<pre><code>Hydra.Chain.Direct.Contract
  CollectCom
    does not survive random adversarial mutations
      +++ OK, passed 200 tests.

      CollectComMutation (200 in total):
      30.5% MutateOpenUtxoHash
      27.0% MutateHeadTransition
      23.5% MutateOpenOutputValue
      19.0% MutateHeadScriptInput

Finished in 18.1146 seconds</code></pre>
<p>In the case of a failure we get a detailed report on the context of the failure:</p>
<pre><code> test/Hydra/Chain/Direct/ContractSpec.hs:96:5:
  2) Hydra.Chain.Direct.Contract.CollectCom does not survive random adversarial mutations
       Falsified (after 5 tests):</code></pre>
<p>With details about the <code>Mutation</code> that was attempted:</p>
<pre><code>         SomeMutation {label = MutateHeadTransition, mutation = Changes [ChangeHeadRedeemer (Close {snapshotNumber = 0, utxoHash = &quot;\EOT\ETX\STX&quot;, signature = [000003]}),ChangeHeadDatum (Open {parties = [1], utxoHash = &quot;\SOH\SOH\ETX\EOT\SOH\STX\NUL\STX\NUL\ETX\EOT\NUL\ETX\STX\ETX\SOH\SOH\NUL\ETX\EOT\ETX\ETX\ETX\SOH\EOT\EOT\ETX\SOH\STX\NUL\EOT\EOT&quot;})]}</code></pre>
<p>The failure itself:</p>
<pre><code>         Phase-2 validation should have failed
         Redeemer report: fromList [(RdmrPtr Spend 0,Right (WrapExUnits {unWrapExUnits = ExUnits&#39; {exUnitsMem&#39; = 831248, exUnitsSteps&#39; = 362274551}})),(RdmrPtr Spend 1,Right (WrapExUnits {unWrapExUnits = ExUnits&#39; {exUnitsMem&#39; = 1030658, exUnitsSteps&#39; = 424175713}})),(RdmrPtr Spend 2,Right (WrapExUnits {unWrapExUnits = ExUnits&#39; {exUnitsMem&#39; = 1030658, exUnitsSteps&#39; = 424175713}})),(RdmrPtr Spend 3,Right (WrapExUnits {unWrapExUnits = ExUnits&#39; {exUnitsMem&#39; = 1030658, exUnitsSteps&#39; = 424175713}}))]</code></pre>
<p>The UTxO that we used (possibly mutated):</p>
<pre><code>     Lookup utxo: {
             &quot;31237cdb79ae1dfa7ffb87cde7ea8a80352d300ee5ac758a6cddd19d671925ec#455&quot;: {
                 &quot;address&quot;: &quot;addr_test1wpjstex8ajlkn8sp5lr8dsfkn9v2m2pfudmn9kzy6epyegqk5664m&quot;,
                 &quot;datumhash&quot;: &quot;1f4e83d60d16d6bc976fa8d1d1a7a43f2fef540e643cc3c2cb5cd2d0d5052f06&quot;,
...</code></pre>
<p>And most importantly the details of the transaction that failed, including all the relevant pieces of data (inputs, outputs, scripts, datums, redeemers):</p>
<pre><code>         Tx: &quot;83ad5c518d4adacf84f5f8fb17e0f2d175a76ae88494966360cb2e96a939f260&quot;
           Input set (4)
             - 31237cdb79ae1dfa7ffb87cde7ea8a80352d300ee5ac758a6cddd19d671925ec#455
             - 96b5f154b0afc62c6a91d756ee31dfc219d76c08ebd30341c198e7b22533745e#179
             - d9c38f56d9147ba5ce4a0b52456ef4594c46992b74051e462ab8275845345e98#996
             - fb3d635c7cb573d1b9e9bff4a64ab4f25190d29b6fd8db94c605a218a23fa9ad#140
           Outputs (1)
             total number of assets: 0
             - 34.056295 ₳
           Scripts (2)
             total size (bytes):  12917
             - ScriptHash &quot;6505e4c7ecbf699e01a7c676c1369958ada829e37732d844d6424ca0&quot;
             - ScriptHash &quot;97b5cb76fd4dcccdfcff850abbe7bdc95d69f70b7eeb1a1c33135ebd&quot;
           Datums (6)
           ...
             - SafeHash &quot;59e610cce1fb1636a27bdc6e65c2bf373c829f6c726140dcedbffc5fc950af1c&quot; -&gt; DataConstr Constr 0 [Constr 0 [I (-13)],List [I 18446744073709551597,I 4,I 21]]
           Redeemers (4)
           ...
             - DataConstr Constr 0 []
             - DataConstr Constr 0 []
             - DataConstr Constr 0 []</code></pre>
<p>Note that this report could be made more friendly by trying to decode some of the <code>datums</code> and <code>redeemers</code> as we usually know what their actual type in code is, and making the association between redeemers and inputs more immediate. But even in this somewhat crude form it provides a wealth of information that makes it straightforward to manifest the shortcomings in the validators.</p>
<h1 id="conclusion">Conclusion</h1>
<p>We have applied this strategy to drive the development of the so-called “Happy Path” of the Hydra Head On-Chain Validation state machine, writing code for three different validators and five different transaction types. The early steps were a bit painful as applying mutations requires fiddling with the internals of a transaction in potentially complicated ways. It took us some time to define a good-enough set of “atomic” <code>Mutation</code>s and some good generators and helper functions, but we already had most of the API covered thanks to previous work on implementing <em>Direct</em> chain interaction, but as with any framework-like effort, we were able to observe increasing returns over time: Defining new mutations for new types of transactions has become easier.</p>
<p>Writing Plutus validators lends itself pretty well to this technique:
* The “universe of discourse” is relatively complicated (Cardano transactions are large data structures with lot of moving parts) and can fail in subtle and/or surprising ways, especially because of indirect interactions between contracts,
* It is somewhat self-contained and the validators’ code is in the end just a <em>predicate</em> over some more or less complex data types,
* It benefits from adopting an “Adversarial” mindset, trying to find interesting changes that should not be disallowed.</p>
<p>More generally, test-driving code using both mutations and properties seems to improve the quality of the “triangulation process” which TDD rests upon: QuickCheck generated counterexamples pinpoint exactly what’s missing in the code, which can be fixed straightforwardly even using “fakes”, but next run will find more counterexamples until enough coverage is reached.</p>
<p>I think this approach, while particularly well-suited to Plutus validators, has broader applicability on every development platform where there’s support for Property-Based Testing.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Debord / Baudrillard</title>
    <link href="http://abailly.github.io/posts/debord-baudrillard.html" />
    <id>http://abailly.github.io/posts/debord-baudrillard.html</id>
    <published>2022-01-29T00:00:00Z</published>
    <updated>2022-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Debord / Baudrillard</h1>

  <h2 class="subtitle">Le situationnisme est un humanisme</h2>

<div class="info">Posted on January 29, 2022</div>

<p>La lecture récente de <a href="http://www.editions-galilee.fr/f/index.php?sp=liv&amp;livre_id=2631">Simulacres et simulations</a> de <a href="https://fr.wikipedia.org/wiki/Jean_Baudrillard">Jean Baudrillard</a> m’a laissée un peu perplexe. Si le livre est très bien écrit et s’il est indéniable que Baudrillard a été visionnaire dans sa critique de l’hypertrophie du sens et du discours qui noie le réel, son nihilisme assumé m’ennuie. J’ai eu envie dans ce court texte de confronter ce que j’ai compris de sa pensée à celle d’un autre grand contempteur de la société capitaliste, Guy Debord.</p>
<p>Pour Debord, le <em>spectacle</em> est la subversion du réel par la marchandise, la soumission d’une part de plus en plus croissante des rapports humains à la logique spectaculaire marchande. Cette critique part de l’art, muséifié, momifié, marchandisé, spectacularisé (le premier geste critique de Debord est une manifestation au festival de Cannes) puis passe à la moulinette tous les domaines de la vie : urbanisme, économie, architecture, relations internationales, écologie, éducation. Le situationnisme est une lutte contre le spectacle visant à remettre la vie et les rapports humains <em>immédiats</em> au centre de l’existence, en ce sens ce n’est pas tant une théorie qu’un foyer de pratiques concrètes visant à réinvestir, redonner du sens aux rapports humains.</p>
<p>La <em>construction de situations</em> ne vise pas autre chose qu’à produire <em>collectivement</em> des moments éphémères de haute intensité du réel qui échappent par essence à la logique spectaculaire Le jeu, la <em>dépense somptuaire</em> sans contrepartie, le sexe, l’alcool, le dérèglement de tous les sens, le rejet de toutes les conventions de la vie bourgeoise (travail, famille, patrie) sont les constantes de Debord.</p>
<p>L’auto-dissolution de l’IS et l’exclusion systématique de nombreux membres au cours de sa brève existence est l’illustration de cette stratégie du “<em>refus de parvenir</em>”, du rejet de toute postérité, de toute construction pérenne, de toute institution qui puisse capturer l’existence et la recycler dans du spectacle.</p>
<p>La vie de Debord lui même est une suite de situations culminant avec mai 68 et poursuivies jusqu’à sa mort dans le refus de jamais travailler, d’être en relation marchande avec qui que ce soit, la volonté d’être maître de son existence jusqu’au bout. Comme le dit Debord lui-même dans <em>Commentaires sur la société du spectacle</em> (je paraphrase et cite de mémoire) : “Toute mon existence aura été tournée vers ce seul objectif qui est de nuire à la société spectaculaire marchande.” En conséquence, il a toujours refusé et lutté contre toute forme de “publicité”, toute “vulgarisation” de sa pensée, toute comprimission avec l’univers médiatique, pour finir dans les années 80 par être parmi les intellectuels français les plus cités et les moins visibles.</p>
<p>Ce qui fait l’originalité et le force de Debord et de l’IS c’est qu’ils ont toujours été activement engagés dans la lutte contre cette société qu’ils critiquent avec force, proposant des actions et des formes de vies alternatives concrètes. Il ne s’agit jamais d’une pensée déconnectée de l’existence, d’une pensée qui ne serait que critique, mais il s’agit de lutter activement, par tous les moyens, sous tous les aspects, contre le spectacle.</p>
<p>Baudrillard approfondit la critique situationniste, explicitement citée dans <em>Simulacres &amp; simulations</em>, de la médiation et du spectacle mais il cherche à aller plus loin: là où les situs pensaient le spectacle comme un masque sur le réel destiné à maintenir et étendre l’emprise du capital, Baudrillard affirme qu’il n’y a même plus de réel, que le spectacle, les simulacres, ont “dévoré” le réel, que “la carte a remplacé le territoire.”</p>
<p>Les péripéties, les événements, le “réel” ne sont plus que les éléments d’une immense simulation destinée à maintenir l’illusion de l’existence d’un réel, d’enjeux de pouvoirs et de luttes idéologiques. Le Watergate, la détente russo puis sino-américaine, le Vietnam, l’accident nucléaire de Three Miles Island précédé de peu par le film <em>Le syndrôme chinois</em>, Beaubourg, les hypermarchés, Disneyland, la publicité… sont quelques uns des artefacts de la <em>post-modernité</em> qu’il convoque à l’appui de sa thèse. L’hypertrophie du sens et du discours, y compris “de gauche” sur la question sociale, masque ou tente de masquer le vide du réel.</p>
<p>La dissuasion - nucléaire, sécuritaire - maintien le réel comme en suspens, produit un glacis sur le réel en attente de l’inévitable catastrophe toujours repoussé à l’horizon. Le terrorisme est ambigü, car en tant que catastrophe authentique il réintroduit du réel dans la simulation, mais il vient aussi renforcer ce qu’il prétend détruire en réactivant la simulation de la normalité et du réel une fois la catastrophe passée.</p>
<p>Pour le dire autrement, dans le monde hyperréel <em>tout</em> fait sens, tout test saturé de sens et est récupérable et récupéré. Mais personne n’est dupe et ceux qui regardent de la téléréalité, par exemple, savent très bien qu’il s’agit d’un simulacre à moitié scénarisée, mais cela n’a aucune importance. Il n’y a plus <em>d’extérieur</em> ou d’alternative, et la seule option qui reste c’est le <em>nihilisme</em> dont se réclame explicitement Baudrillard dans le dernier chapitre de <em>Simulacres et simulations</em>.</p>
<p>Contrairement à Debord, Baudrillard a toujours fait partie du système qu’il dénoncait : il a été professeur de lycée et d’université, invité à donner des conférences et des séminaires aux quatre coins de la planète ; il a été marié (2 fois) et a eu des enfants ; il a exposé ses photographies dans des musées et des galeries d’art…</p>
<p>C’est à mon sens l’aporie principale de son post-modernisme : la critique, aussi percutante et visionnaire soit elle, se dissout <em>elle aussi</em> dans l’hyper-réel du fait de l’anomie qu’elle induit, se perd dans l’infini de la récupération et des jeux de miroirs de la <em>séduction</em> du spectacle, là où Debord et l’IS tracent un chemin d’existence concret, joyeux et bordélique.</p>
<p>Là où Baudrillard a tendance à “se taper des poses”, Debord agit et c’est en ce sens que le situationnisme est un humanisme pour reprendre une formule célèbre.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>On &quot;Work&quot;</title>
    <link href="http://abailly.github.io/posts/work.html" />
    <id>http://abailly.github.io/posts/work.html</id>
    <published>2022-01-14T00:00:00Z</published>
    <updated>2022-01-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>On &quot;Work&quot;</h1>

  <h2 class="subtitle">A History of How We Spend Our Time</h2>

<div class="info">Posted on January 14, 2022</div>

<p><a href="https://www.bloomsbury.com/uk/work-9781526604996/">Work</a> is a book by James Suzman which seems to be a popular version of his academic works.</p>
<h1 id="summary">Summary</h1>
<p>The book starts by exposing the relationship between <em>work</em> in the physical sense, eg. transformation of energy, and <em>work</em> in the human sense. Work appears to be something that is characteristic of all life forms: Life is about extracting energy from the environment in order to sustain an organism. More and more complex life forms evolved through more and more efficient energy extractions capabilities, from the primitive chemical absorption of unicellulars to photosynthesis, to parasites, to plant grazers, to meat eaters… Eating more evolved life forms that already have extracted and refined energy from other sources is more efficient. Omnivorous animals dominate the “ecosphere” as they are able to extract energy from a wider variety of sources, and humanity made a leap through the discovery of <em>fire</em> which allowed humans to become even more efficient energy harvester.</p>
<p>But life is also about <em>spending</em> energy. Most lifeforms spend 100% of their energy on basic needs: Looking for food, mating, reproducing, but it’s not always the case: Suzman gives one detailed example of a south african bird that spends a great deal of its time building intricate nests that are not used. Living in an bountiful environment from which it can easily feed itself gives it more “free time” to spend energy on “useless” matters. Other examples abound and testify for <a href="./origin-of-species.html">Darwin’s</a> <em>sexual selection</em> principle: It’s not enough to be the “fittest”, one has also to reproduce successfully and it’s perfectly possible that species evolve seemingly useless characters that provide an advantage for mating and reproduction.</p>
<p>Suzman spent lot of time living with and studying what is left of the Khoisan (aka. Bushmen). They are the closest approximation to how our ancestors would have been living, they have been around for 10s of 1000s of years and barely changed their way of life. Khoisan are hunter-gatherers that feed from a somewhat hostile, arid environment, yet it’s been estimated they “work” about 3-4 hours per day maximum, more often less. They do not accumulate food nor any kind of goods and their society is fiercely egalitarian: The rich are mocked and anyone can ask anyone else to give him or her something they own, which guarantees quick equalisation and distribution of any kind of riches</p>
<p>From the work of <a href="https://en.wikipedia.org/wiki/Original_affluent_society">Marshall Sahlins</a>, <a href="https://en.wikipedia.org/wiki/James_C._Scott">James C. Scott</a>, <a href="https://en.wikipedia.org/wiki/Pierre_Clastres">Pierre Clastres</a> and others, we now know “primitive” societies have been much more affluent than the Western narrative usually asserted it. There are a lot of archaelogical evidences from the early days of humanity showing that people were doing something else than gathering food, engaging into production of art, crafts, and probably a lot of purely social activities that leave no trace. Humans, like all living beings, don’t seem to like staying idle hence “work” has a natural tendency to fill time. We don’t even know what the omnipresent <a href="https://en.wikipedia.org/wiki/Hand_axe">Hand-axe</a> was used for, but we know it required training, time and skill to be done properly.</p>
<p>It’s not clear at what point society became unegalitarian, there are tombs showing differences in wealth before agriculture, but it’s clear agriculture raised significantly the amount of work people had to do to sustain themselves especially as in the early days, agriculture was inefficient, dangerous, bread epidemics… See <a href="https://yalebooks.yale.edu/book/9780300182910/against-grain">Against the grain</a> for more thorough discussion on the “Agriculture revolution” narrative. It’s not even clear that agriculture in and of itself breeds inequality as there are evidences of egalitarian farming societies, and even egalitarian city dwellers like in Çatalhöyük.</p>
<p>The second half of the book is devoted to how our urban, highly mechanised, energy hungry society came into being, from the early days of agriculture with archeologic findings in Palestine and fertile crescent. Agriculture was a revolution that took time to take off but fundamentally changed our relationship to work and our environment: Agriculture made the concept of <em>delayed returns</em> central to the life of the first farmers, whereas HG societies were built around <em>immediate returns</em>. Whereas in the latter case, man is <em>part</em> of an environment that profusely provides everything that’s needed for him to strive, and no more, in the former the environment becomes the <em>nature</em>, an external source of food, wealth, resources and energy that must be worked on, harvested, accumulated, invested.</p>
<p>Humanity’s relationship to its environment became more and more <em>instrumental</em>, nature was objectified and contrasted with <em>culture</em> whereas the hunter-gatherer societies had a symbiotic relationship with their environment.</p>
<p>Then Suzman draws from the work of Malthus, Keynes, Sahlins, Taylor to demonstrate how this fundamental shift turned <em>scarcity</em> as a central driver of our lives. Malthus “proved” that infinite growth was unsustainable because productivity of the land would grow linearly where population grows exponentially. Technical progress disproved his predictions for a couple of centuries, until the growth of fossile energy consumption has thrown the climate into a trajectory that could prove fatal to humanity.</p>
<p>During the XIXth century and the first half of the XXth, continuous improvement in productivity lead to a decrease in the amount of time people spent working, from 70-80 hours a week in the early days of industrial revolution, to about 40 hours. Keynes predicted this fall would continue thanks to increasing mechanisation but he was proven wrong: Since the 70s, work time has stagnated or even slightly increased again, esp. in the U.S and since the 1980s, inequalities in the distribution of wealth (and revenue) have also increased drastically as documented notably by <a href="https://www.seuil.com/ouvrage/le-capital-au-xxie-siecle-thomas-piketty/9782021082289">Piketty’s work</a>.</p>
<p>Work has become a central part of our lives to the point it mostly defines us (the first thing 2 strangers talk about when introduced to each other is the work they do), yet this should not be considered “normal” or a necessity: It’s a consequence of the industrial revolution, that was made possible by increasing yield of farming and increasingly energy efficient machines, which in turn created an increasingly complex economic system and society.</p>
<p>Durkheim founded sociology in order to better understand this complex system, which lead him to study the “malady of infinite aspiration” or <em>anomie</em>. Work has become something we do <em>in order to</em> do something else, a mean to an end, a way to earn money that we can spend consuming things we have been producing in the first place, but indirectly. Contrary to what classical economists like Smith, Malthus and others thought, scarcity might not be a consequence of the infinite desires of men and their growing numbers pitted against limited resources, but rather this “infinite aspiration” is a consequence of modern conditions of living.</p>
<p>Scarcity, greed and the absurd accumulation of wealth they generate, are then a by product of our civilisation, not its foundation.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I’m having a hard time summarizing the core idea of this book, what really James Suzman is after. The second half of the book which delves into the more modern history of (Western) societies sounds somewhat like it adopts a moralist’s stance, a criticism of modernity’s appetite for work and unlimited growth that is all too easily contrasted with the ascetic yet joyful way of life of hunter-gatherer tribes like the Khoisan, or what we know from archaeological evidences. The first half, which exposes findings and evidences from still existing hunter-gatherers societies, is the most interesting one as it questions the narrative around primitives, the superiority of <em>Homo Sapiens</em>, and the take-off that agriculture permitted.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Il faut s&#39;adapter&quot;</title>
    <link href="http://abailly.github.io/posts/il-faut-s-adapter.html" />
    <id>http://abailly.github.io/posts/il-faut-s-adapter.html</id>
    <published>2021-11-05T00:00:00Z</published>
    <updated>2021-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Il faut s&#39;adapter&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November  5, 2021</div>

<p>C’est à Fabien Lamarque et à sa <a href="https://fabien-lamarque.eu/Il-faut-s&#39;adapter/">recension</a> du livre de Barbara Stiegler que je dois l’impulsion de sa lecture. <a href="http://www.gallimard.fr/Catalogue/GALLIMARD/NRF-Essais/Il-faut-s-adapter#"><em>Il faut s’adapter</em></a> est une étude fouillée des écrits de <a href="https://en.wikipedia.org/wiki/Walter_Lippmann">Walter Lippmann</a> considéré comme le père du “néolibéralisme”, et sa confrontation avec les écrits de <a href="https://en.wikipedia.org/wiki/John_Dewey">John Dewey</a>, l’un des fondateurs du <em>pragmatisme</em>.</p>
<h2 id="le-néolibéralisme-de-lippmann">Le néolibéralisme de Lippmann</h2>
<p>En résumé, le <em>néolibéralisme</em> de Lippmann est la conjonction de:</p>
<ol type="1">
<li>la croyance en l’inéluctabilité de l’économie de marché globalisée ;</li>
<li>l’inadaptation congénitale du capital humain aux exigences du marché et de la compétition ;</li>
<li>et donc le besoin d’un gouvernement technocratique et interventionniste susceptible de mettre en oeuvre les politiques nécessaires à l’adaptation des masses aux besoins de l’économie.</li>
</ol>
<p>Lippmann part d’une critique du libéralisme classique, incarné sur le plan économique par la pensée d’Adam Smith et sa “main invisible du marché”, et sur le plan politique et sociétale par les Lumières et leur lutte pour la démocratie et contre les gouvernements autoritaires. Ce libéralisme a failli et n’est plus pertinent dans le contexte de la <em>Grande Société</em> qui est celle de la seconde révolution industrielle, mondialisée, comme le montrent les souffrances qu’elle génère pour les masses exploitées.</p>
<p>Contre Marx et les marxistes qui prônent le renversement du capitalisme et l’instauration du communisme, et s’inspirant de Darwin et de sa théorie de l’évolution, Lippmann considère que le problème est celui de l’inadaptation des être humains à ce nouvel environnement vu comme une force inéluctable. Il s’agit donc de promouvoir une meilleure adaptation du “matériau humain”, au travers des forces de la sélection naturelle, de la compétition et de la “Survie des plus aptes” (<em>Survival of the fittest</em>) qui sont les principes du darwinisme.</p>
<p>Mais là où Spencer et d’autres penseurs que l’on pourrait qualifier d’<em>ultra-libéraux</em> prônent un <em>darwinisme social</em> intégral et la restriction du champ d’action des gouvernements à quelques domaines régaliens, laissant libre cours aux forces du marché et de la concurrence pure et parfaite ; Lippmann considère que les masses et les individus sont incapables à eux seuls d’évoluer suffisamment rapidement et efficacement pour que cette adaptation se fasse sans d’immenses souffrances car ils sont structurellement englués dans les “stases” d’une culture déjà dépassée. Comme le montre l’histoire économique du XIXème siècle en particulier aux États-Unis, le libéralisme et la concurrence “parfaite” mènent à la création de nouvelles oligarchies et de rentes monopolistiques, soutenues par des régimes juridiques protégeant les situations acquises.</p>
<p>Il propose donc un modèle de gouvernement qui a pour fonction à la fois de soigner et éduquer les masses en vue de leur meilleure adaptation, et d’assurer à chacun une “égalité des chances” entendue comme la suppression de biais faussant la compétition entre individus. Ce gouvernement doit être essentiellement technocratique, formé d’experts neutres et bienveillants, et strictement encadré par le <em>droit</em> et plus précisèment la <em>Common Law</em>, un modèle juridique fondé sur la constante adaptation des règles par la jurisprudence.</p>
<p>Ce néolibéralisme dépasse ainsi l’opposition identifiée par Foucault entre la biopolitique du libéralisme classique visant à libérer les flux, et les techniques disciplinaires cherchant à contrôler et normaliser les corps.</p>
<h2 id="le-dewey-lippmann-debate">Le <em>Dewey-Lippmann Debate</em></h2>
<p>À la pensée de Lippmann s’oppose celle de John Dewey, l’un des pères fondateurs du <em>pragmatisme</em> américain avec William James, dont elle est pourtant issue : les premiers écrits de Lippmann sont clairement dans la lignée de la pensée pragmatiste fondée sur le primat de l’expérience concrète et vécue.</p>
<p>Dewey lui-aussi s’inspire des thèses de Darwin, mais il les retourne contre Lippmann et les darwinistes sociaux, mettant en avant le caractère profondèment <em>expérimental</em> de la théorie de l’évolution et l’absence de finalité. D’une part, les individus et les groupes sont en constante <em>interaction</em> avec leur environnement constitué pour une grande partie d’autres individus et d’autres groupes, et l’évolution peut tout autant passer par une adaptation des individus à l’environnement qu’une adaptation de l’environnement aux individus. Les exemples abondent dans <a href="/posts/origin-of-species.html">The Origin of Species</a> d’espèces en interaction les unes avec les autres et ayant co-évolué, par exemple les fleurs et les abeilles, ou les fourmis et les pucerons.</p>
<p>D’autre part, l’évolution n’a pas de fin déterminée, n’est tendue vers aucun but assignable si ce n’est la continuation de la vie. C’est d’autant plus vrai lorsqu’il s’agit de <em>faits sociaux</em> qui sont le produit des actions humaines, qu’il s’agisse d’innovation technologique, d’idées, d’institutions, de pratiques, de coutumes. En considérant que l’humanité doit s’adapter au “progrès” et à l’économie de marché globalisée, les néo-libéraux commettent un contresens sur la théorie de l’évolution et ce faisant reconstruise une métaphysique, une séparation stricte des moyens et des fins.</p>
<p>Pour Dewey, l’évolution est <em>expérimentation permanente</em> aussi bien dans la détermination des fins que dans celle des moyens, ce qu’il appelle <em>l’enquête</em>. Et cette expérimentation permanente doit passer par un débat démocratique. De fait, la démocratie est pour Dewey liée à cette expérimentation permanente : ne peut être dit démocratique qu’une société qui promeut parmi ses membres une confrontation des idées, des choix de vie, une discussion des fins et des moyens constamment renouvelée et à laquelle tous doivent participer.</p>
<p>Comme pour Lippmann, l’éducation est chez Dewey fondamentale afin d’assurer une “égalité des chances”, non pas dans l’optique d’une compétition de tous contre tous mais pour permettre à chacun d’exprimer au maximum ses potentialités, et la tâche essentielle de tout gouvernement démocratique est de fournir à chacun les conditions de possibilités de cette expression.</p>
<p>Le décalage perçu par Lippmann et Dewey entre les schèmes de pensées, la culture, et l’état du système de production et des évolutions technologiques, est interprété par l’un comme étant négatif, comme un retard d’évolution à rattraper, à corriger ; tandis que l’autre le perçoit comme une tension dynamique et créatrice.</p>
<p>Lippmann quoiqu’étant interventionniste, critique le <em>New deal</em> de Roosevelt parce qu’il cherche à corriger les méfaits de l’économie de marché, parce qu’il est une forme de collectivisation qui corrige les effets sans s’attaquer aux causes qui sont pour lui dans ce retard de la société. Il est pourtant tout aussi interventionniste et progressiste, et c’est pourquoi il peut apparaître aux yeux d’une certaine gauche - en gros social-démocrate - comme acceptable et même pertinent. En captant à son profit le concept de progrès vu comme une marche vers l’extension indéfinie de l’économie de marché et l’adaptation parfaite des travailleurs à celle-ci, le néolibéralisme enferme ainsi toute la gauche dans ce dilemme : ou bien se rallier à la vulgate néolibérale, ou bien apparaître comme conservatrice et réactionnaire.</p>
<h2 id="résonnances-contemporaines">Résonnances contemporaines</h2>
<p>Si je connaissais Dewey et le pragmatisme, je n’avais jamais entendu parler de Lippmann avant de lire ce livre. Et Barbara Stiegler avoue elle-même dans sa conclusion qu’il pourrait justement lui être reproché d’accorder trop d’importance à un auteur mineur quand d’autres formes d’ultra-libéralismes (Hayek, Friedman) semblent avoir un impact bien plus significatif.</p>
<p>Il assez clair que Barbara Stiegler attaque ici, sans le dire explicitement, l’évolution des partis de gauche, le <em>Parti Socialiste</em> en France et les partis sociaux-démocrates occidentaux, au cours du XXème siècle. Dans un glissement progressif sur plusieurs décennies ces partis, ayant abandonné tout horizon révolutionnaire pour le réformisme, la mise en place d’un <em>État providence</em> et une politique sociale favorisant “l’égalité des chances” se sont laissés coloniser par la pensée néolibérale au point de considérer l’économie de marché, la compétition mondialisée et le capitalisme comme naturels et indépassables.</p>
<p>D’une certaine manière l’étude <a href="https://www.seuil.com/ouvrage/clivages-politiques-et-inegalites-sociales-amory-gethin/9782021456479">Clivages politiques et inégalités sociales</a>, qui montre l’évolution des structures de votes de la plupart des démocraties au cours des 70 dernières années, confirme cette évolution : tandis que le vote des plus riches restait ancré à droite, le vote des plus éduqués basculait à gauche, et l’on peut penser que cette bascule a été correlée à l’acceptation par une partie de la gauche des thèses néolibérales dans la lignée de Lippmann.</p>
<h2 id="résonnances-personnelles">Résonnances personnelles</h2>
<p>Sur un plan plus personnel, comme le disait Fabien dans son article ce livre m’oblige à me poser des questions sur la manière dont moi-même je prends part à cette idéologie néolibérale en tant que pratiquant et promoteur de pratiques “agiles”, d’une approche adaptative et évolutioniste du développement logiciel.</p>
<p>Au centre de cette question se pose la question du “changement” et de la tension entre <em>stases</em> et <em>flux</em>. D’une certaine manière cette tension est d’ordre anthropologique, elle est au coeur de ce que c’est qu’être <em>humain</em>, doué d’une raison, de la capacité à échanger des idées avec d’autres êtres humains, à rêver, à raconter des histoires et échaffauder des plans, à craindre et espérer, à respecter la “tradition” ou vouloir renverser la table. Cette tension traverse toutes les sociétés, toutes les époques, tous les êtres humains, et elle même évolue.</p>
<p>La Renaissance européenne et les Lumières ont modifier des équilibres séculaires mais il y a toujours eu des progressistes et des conservateurs, des pionniers et des organisateurs, des moments de notre existence où nous souhaitons que rien ne change et d’autres où nous avons la “bougeotte”, des possédants attachés à conserver leurs biens et des démunis souhaitant sortir de la misère.</p>
<p>Le débat entre Lippmann et Dewey est intéressant et important parce qu’il permet de comprendre que l’opposition essentielle n’est pas entre “progressisme” et “conservatisme”, entre partisans des <em>flux</em> et partisans des <em>stases</em> : il est entre ceux qui pensent et assignent à l’humanité, ou à un groupe plus restreint, une fin nécessaire - le capitalisme - laissant éventuellement la discussion ouverte sur les moyens pour y parvenir ; et ceux pour qui la fin est toujours ouverte et elle même sujette à discussion et redéfinition.</p>
<p>Sur le plan de l’éthique personnelle et professionnelle, cette opposition se manifeste dans la question de <em>l’autonomie</em> et des règles de fonctionnement du collectif : qui et comment sont définies les <em>fins</em> ? Lorsque le <em>Lean</em>, l’agilité ou toute autre technique <em>adaptative</em> et <em>évolutionnaire</em> est mise au service d’une organisation dont les fins sontr définies selon d’autres modalités, par une autorité extérieure ; lorsque ceux qui définissent les fins et ceux qui définissent les moyens ne sont pas les mêmes personnes ou sont dans une relation de subordination ; lorsque les pratiques agiles sont au service d’une définition exogène de la productivité et des résultats attendus ; lorsque <em>ceux qui font</em> ne sont pas <em>ceux qui décident</em> ou <em>ceux qui savent</em>, qu’ils ne peuvent mettre en doute, interroger, modifier les fins qui leur sont assignées ; alors Lippmann et le néolibéralisme triomphent, produisant l’accéleration généralisée et ses symptômes - désengagement, stress, burn-out, rage incontrôlée, complotisme - dont notre société souffre.</p>
<p>Mais les mêmes outils peuvent aussi, suivant Dewey et les pragmatistes, être mis au service de la définition des fins. Une équipe autonome, agile, pratiquant le TDD, le <em>Pair-Programming</em>, l’appropriation collective du code, la proximité avec le client final, n’est vraiment fidèle à l’idée qui sous tend l’eXtreme Programming que si elle a toute latitude pour négocier et décider de ses propres fins.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Why mocking is a good idea</title>
    <link href="http://abailly.github.io/posts/mocking-good-idea.html" />
    <id>http://abailly.github.io/posts/mocking-good-idea.html</id>
    <published>2021-10-29T00:00:00Z</published>
    <updated>2021-10-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Why mocking is a good idea</h1>

  <h2 class="subtitle">... when done right</h2>

<div class="info">Posted on October 29, 2021</div>

<p>Someone wrote a <a href="https://cs-syd.eu/posts/2021-10-22-why-mocking-is-a-bad-idea">recent post</a> debunking what the author thinks are <em>Mocks</em>. I say “thinks” because actually, what the author describes are not what <em>Mock objects</em> really are or how they were thought to be used, as this post demonstrates.</p>
<h1 id="what-are-mock-objects-really">What are Mock Objects really?</h1>
<p>The history of the <em>Mock object pattern</em> for <em>Test-Driven Development</em> is explained by <a href="http://www.mockobjects.com/">Steve Freeman</a> its inventor. He wrotes, with Nat Pryce, the book <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Test</a> which is a must read even if one does only functional programming. There’s also a shorter <a href="http://jmock.org/oopsla2004.pdf">OOPSLA 2004 paper</a> and an <a href="https://web.tecgraf.puc-rio.br/~ismael/Cursos/Cidade_MA/aulas/downloads/mockobjects.pdf">XP 2000 paper</a>. The very same idea was also exposed in the context of refactoring legacy code by Michael Feathers in his seminal <a href="https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/">Working Effectively with Legacy Code book</a> which is another must read, even if one does functional programming.</p>
<p>The key insight about Mock objects dawned on me when I realised these were really <em>Design tools</em>, much like one harvests most of the benefits of TDD when she conceives tests as a force to drive software design and not merely as a safety net against regression. In other words, one <em>does not</em> use Mock objects, or mock <em>interfaces</em>, only to replace a cumbersome dependency, but rather mocks roles that emerge from the needs of some piece or component of the system, to express the expectations of this component regarding some dependency without having to depend on the implementation details. Mocks are used to design <em>interfaces</em> between moving parts of the system, or to let <em>seams</em> appear as M.Feathers names those.</p>
<h1 id="the-proof-is-in-the-pudding">The proof is in the pudding</h1>
<p>Here is a concrete example drawn from my current project, Hydra, implemented in Haskell. The Hydra node we are building needs to interact with a <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/src/Hydra/Chain.hs">Chain</a> component, both to submit transactions and to receive them. Instead of having to depend on the <a href="https://github.com/input-output-hk/cardano-node">somewhat complicated implementation details</a> of a real Cardano node, we instead defined an <em>interface</em> which expresses in a concise and implementation independent way the information we send and receive.</p>
<p>Because we are using a functional language, this interface is expressed as a function which itself takes other functions (callbacks), a recurring pattern we documented in an <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/docs/adr/0007-with-pattern-component-interfaces.md">Architectural Decision Record</a>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ChainComponent</span> tx m a <span class="ot">=</span> <span class="dt">ChainCallback</span> tx m <span class="ot">-&gt;</span> (<span class="dt">Chain</span> tx m <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>where</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ChainCallback</span> tx m <span class="ot">=</span> <span class="dt">OnChainTx</span> tx <span class="ot">-&gt;</span> m ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Chain</span> tx m <span class="ot">=</span> <span class="dt">Chain</span>  {<span class="ot"> postTx ::</span> <span class="dt">MonadThrow</span> m <span class="ot">=&gt;</span> <span class="dt">PostChainTx</span> tx <span class="ot">-&gt;</span> m () }</span></code></pre></div>
<p>The details of the messages we are sending and receiving are defined as two separate data types, one representing outbound transactions, eg. transactions we’ll post to the chain:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PostChainTx</span> tx</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">InitTx</span> {<span class="ot">headParameters ::</span> <span class="dt">HeadParameters</span>}</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">CommitTx</span> {<span class="ot">party ::</span> <span class="dt">Party</span>,<span class="ot"> committed ::</span> <span class="dt">Utxo</span> tx}</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">AbortTx</span> {<span class="ot">utxo ::</span> <span class="dt">Utxo</span> tx}</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">CollectComTx</span> {<span class="ot">utxo ::</span> <span class="dt">Utxo</span> tx}</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">CloseTx</span> {<span class="ot">snapshot ::</span> <span class="dt">Snapshot</span> tx}</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">ContestTx</span> {<span class="ot">snapshot ::</span> <span class="dt">Snapshot</span> tx}</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">FanoutTx</span> {<span class="ot">utxo ::</span> <span class="dt">Utxo</span> tx}</span></code></pre></div>
<p>and the other representing inbound messages, eg. transactions and errors observed on the chain:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">OnChainTx</span> tx</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">OnInitTx</span> {<span class="ot">contestationPeriod ::</span> <span class="dt">ContestationPeriod</span>,<span class="ot"> parties ::</span> [<span class="dt">Party</span>]}</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnCommitTx</span> {<span class="ot">party ::</span> <span class="dt">Party</span>,<span class="ot"> committed ::</span> <span class="dt">Utxo</span> tx}</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnAbortTx</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnCollectComTx</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnCloseTx</span> {<span class="ot">contestationDeadline ::</span> <span class="dt">UTCTime</span>,<span class="ot"> snapshotNumber ::</span> <span class="dt">SnapshotNumber</span>}</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnContestTx</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">OnFanoutTx</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">PostTxFailed</span></span></code></pre></div>
<p>Had we coded in an Object-Oriented language, or used a <a href="https://peddie.github.io/encodings/encodings-text.html">final tagless encoding</a>, these would have been expressed as two separate interfaces with one method for each type. The important point here is that <em>we</em> are in control of this interface, <em>we</em> define the patterns of interactions with the external system we depend on and abstract away all the nitty-gritty details a dependency on a concrete implementation would entail. Our system is now <em>loosely coupled</em> to the other system as we have <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separated concerns</a>.</p>
<p>This has allowed us to focus on the core functionality of our software, to build a complete implementation of the <a href="https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/">Hydra off-chain protocol</a>, <a href="https://www.youtube.com/watch?v=3D_SAC4nyVM">demonstrate a network of Hydra nodes</a> and have automated <a href="https://github.com/input-output-hk/hydra-poc/blob/master/local-cluster/test/Test/EndToEndSpec.hs#L99">end-to-end tests</a> all without the hassle of dealing with a full Cardano node implementation. Instead, we have several <em>Mock</em> implementations of the <code>Chain</code> interface described above suitable for various use cases:
- A very fast <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/test/Hydra/BehaviorSpec.hs#L380">in-process</a> mock for Behaviour-driven testing of Hydra cluster,
- A <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/src/Hydra/Chain/ZeroMQ.hs">0MQ-based</a> implementation that allows us to spin-up a cluster of Hydra nodes, completely mocking an <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/exe/mock-chain/Main.hs">external chain</a>.</p>
<p>Note that:
- We are not side-stepping the integration problem as demonstrated by the fact we are also testing <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/local-cluster/test/Test/LocalClusterSpec.hs#L51">interaction with Cardano node</a>, and we definitely will enhance our End-to-End tests to “Close the loop” once the <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/local-cluster/test/Test/DirectChainSpec.hs#L30">Chain tests</a> demonstrate the <em>concrete implementation</em> of our abstract transactions work correctly on a real Cardano network,
- We have been careful to <a href="https://testing.googleblog.com/2020/07/testing-on-toilet-dont-mock-types-you.html">Mock types we own</a> in order to not fall into the trap of relying on a dumbed down and probably wrong implementation of some system we depend on.</p>
<h1 id="there-is-more-to-it">There is more to it</h1>
<p>This whole idea has been applied in a couple other areas of the system, most notably the <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/src/Hydra/Network.hs">Network</a> interface: Here again we express some requirements from the point of view of the Hydra node, letting those emerge from tests we write.</p>
<p>While it does not respect the <em>Mock types you own</em> mantra, we have also used this technique to great profit leveraging the <a href="https://github.com/input-output-hk/ouroboros-network/tree/3f16f617f8ada5e0e8f560b5b2d9635ec0d803f3/io-sim">io-sim</a> and <a href="https://github.com/input-output-hk/ouroboros-network/tree/3f16f617f8ada5e0e8f560b5b2d9635ec0d803f3/io-classes">io-classes</a>, as exposed in <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/docs/adr/0005-use-io-sim-classes.md">another ADR</a>. This has allowed us to test-drive the development of the protocol in an outside-in way, expressing expected <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/hydra-node/test/Hydra/BehaviorSpec.hs#L123">observable behaviour</a> in a cluster of nodes, in a safe and fast way, as pure functions.</p>
<p>Of course, this is a dangerous path to tread and we need to also run tests with the real <em>Multi-threaded Runtime System</em> to ensure proper coverage, like the End-to-end tests I already talked about and <a href="https://github.com/input-output-hk/hydra-poc/tree/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/local-cluster/bench">load testing</a>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope this post managed to convince the reader that using <em>Mock objects</em> is actually a good idea as soon as one embraces it the way it’s been intended to be used, namely as a <em>Test-driving technique</em> also called <em>London School TDD</em>, and not as a mere technical artifact to ease testing <em>after the fact</em>. As I already advocated a while ago TDD has a <a href="https://abailly.github.io/posts/tdd.html">fractal dimension</a>: It can, and in my opinion must, be applied at all stages of a system’s development and at all level of abstractions.</p>
<p>“Mock objects” is just a name for the technique that lets one work outside-in, precisely and formally (in code) expressing and testing each component first in isolation, but within a broader context: As soon as a concrete, production-ready implementation of an interface is ready, it should be integrated in the higher level tests. This is also something we wrote down in an <a href="https://github.com/input-output-hk/hydra-poc/blob/2056b8c9ba441aebc396a4fe0f50a419d6ee7be3/docs/adr/0012-testing-strategy.md">ADR on Testing strategy</a> as it deeply impacts the architecture of the system.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
