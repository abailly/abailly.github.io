<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arnaud Bailly's  Blog</title>
    <link href="http://abailly.github.io/atom.xml" rel="self" />
    <link href="http://abailly.github.io" />
    <id>http://abailly.github.io/atom.xml</id>
    <author>
        <name>Arnaud Bailly</name>
        <email>arnaud@igitur.io</email>
    </author>
    <updated>2019-09-06T00:00:00Z</updated>
    <entry>
    <title>Adventures in Dependently Typed Accounting</title>
    <link href="http://abailly.github.io/posts/dependently-typed-accounting.html" />
    <id>http://abailly.github.io/posts/dependently-typed-accounting.html</id>
    <published>2019-09-06T00:00:00Z</published>
    <updated>2019-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Adventures in Dependently Typed Accounting</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September  6, 2019</div>

<blockquote>
<p>This article is the <a href="/posts/dependently-typed-date.html">third installment</a> of a series of articles exploring connection between <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a> and <a href="https://en.wikipedia.org/wiki/Dependent_type">Dependent types</a> as implemented in <a href="http://idris-lang.org">Idris</a>. It’s been written as prepaatory work to a talk given at the <a href="https://www.meetup.com/software-craftsmanship-bdx/events/264578542/">Okiwi meetup</a> in Bordeaux.</p>
</blockquote>
<p>Although it took me more than 2 years to write a sequel to my previous post on the subject of <em>DDD + T(ype)DDD</em>, it’s a subject that I keep having in the back of my mind and something I try to apply in my day job wherever it’s possible. This time, I am investigating how to write a double-entry bookkeeping module in Idris, in the spirit of <a href="https://www.ledger-cli.org/">ledger</a> and <a href="https://hledger.org/">hledger</a>. Of course, what I wrote is nowhere near as full-featured as hledger, it’s mostly a proof-of-concept that only allows one to <em>parse</em> a ledger-formatted file and <em>pretty-prints</em> back its content.</p>
<p>What’s interesting in double-entry accounting is that it’s a “business-domain” that is relatively simple to explain and understand, grounded on some basic <em>invariants</em> that should be enforced to guarantee transactions and ledger stay consistent. This post won’t go into the details of the code which can be found in a <a href="https://github.com/abailly/xxi-century-typed/tree/master/idris/src/Accounting">github repository</a>. It’s more of a narrative on the design choices I made and what it entails to write such code in Idris, trying to highlights both the strengths of the language and its weaknesses, or its darker corners.</p>
<p>I would like to say a big “Thank you!” to the smart and friendly people from the <code>#idris</code> channel who have helped me write most of the proofs in this code, providing advices and direction on how to approach proof-writing in such a language.</p>
<h1 id="basic-concepts">Basic Concepts</h1>
<p>Here is an excerpt from <a href="https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system">Wikipedia page on double-entry bookkeeping</a>:</p>
<blockquote>
<p>In the double-entry accounting system, at least two accounting entries are required to record each financial transaction. These entries may occur in asset, liability, equity, expense, or revenue accounts. Recording of a debit amount to one or more accounts and an equal credit amount to one or more accounts results in total debits being equal to total credits for all accounts in the general ledger. If the accounting entries are recorded without error, the aggregate balance of all accounts having Debit balances will be equal to the aggregate balance of all accounts having Credit balances. Accounting entries that debit and credit related accounts typically include the same date and identifying code in both accounts, so that in case of error, each debit and credit can be traced back to a journal and transaction source document, thus preserving an audit trail. The accounting entries are recorded in the “Books of Accounts”. Regardless of which accounts and how many are impacted by a given transaction, the fundamental accounting equation of assets equal liabilities plus capital will hold.</p>
</blockquote>
<p>From this description we get some basic information about the “domain” that we’ll want to implement:</p>
<ul>
<li>A <em>transaction</em> comprises at least 2 <em>entries</em></li>
<li>An <em>entry</em> records a <em>debit</em> or <em>credit</em> amount in an <em>account</em></li>
<li>An <em>account</em> can fall into 5 different categories: <em>asset</em>, <em>liability</em>, <em>equity</em>, <em>expense</em>, or <em>revenue</em></li>
<li>The aggregate debit and credit <em>balance</em> of all accounts should be equal</li>
<li>A <em>book of accounts</em> should preserve a <em>fundamental equation</em> that ensures <code>asset = liability + equity</code><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></li>
</ul>
<p>From these elements, we can start to code and first of all define the <em>types</em> we’ll need. The whole point of this series of post is to apply DDD principles to Type-Driven Development which means we want our <em>domain concepts</em> to be reflected directly into the <em>core domain</em> of our code. So we end up needing the following types:</p>
<ul>
<li>An <code>Entry</code> which contains an <code>Account</code> and some <em>amount</em> (more on this later) with a <code>Direction</code>, <code>Debit</code> or <code>Credit</code>,</li>
<li>A <code>Transaction</code> has a date, a <code>String</code> label and a list of <code>Entry</code> which must be <code>Balance</code>d,</li>
<li>A <code>BookOfAccounts</code> is a list of <code>Transaction</code>s such that the <em>fundamental equation</em> holds at all time.</li>
</ul>
<h1 id="take-1">Take 1</h1>
<p>Equipped with all this information, I started implementing the various data types, embedding the needed invariants within the definition of the types. My initial version looked like the following (see <a href="https://github.com/abailly/xxi-century-typed/blob/2c81760819f1ab1d9ba0bc101b64a168d2817bb8/idris/src/Accounting/Core.idr">Core.idr</a> for details).</p>
<h2 id="core-domain">Core Domain</h2>
<p>The <code>Balance</code> is a simple alias for a tuple of a <code>Nat</code> and a <code>Direction</code> (debit or credit) and the other core types are straightforward:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Balance</span> <span class="ot">:</span> <span class="dt">Type</span>
<span class="dt">Balance</span> <span class="fu">=</span> (<span class="dt">Nat</span>, <span class="dt">Direction</span>)

<span class="kw">data</span> <span class="dt">Account</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkAccount</span> <span class="ot">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> { type <span class="ot">:</span> <span class="dt">AccountType</span> } <span class="ot">-&gt;</span> <span class="dt">Account</span>

<span class="kw">record</span> <span class="dt">Entry</span> <span class="kw">where</span>
  constructor <span class="dt">MkEntry</span>
  <span class="fu">amount</span> <span class="ot">:</span> <span class="dt">Balance</span>
  <span class="fu">account</span> <span class="ot">:</span> <span class="dt">Account</span></code></pre></div>
<p>Then a <code>Transaction</code> contains <code>Entries</code> of length at least 2 and with a <code>Balance</code> of <code>(0, Cr)</code>.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Entries</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkEntries</span> <span class="ot">:</span> (entries <span class="ot">:</span> <span class="dt">Vect</span> n <span class="dt">Entry</span>) <span class="ot">-&gt;</span>
              { <span class="kw">auto</span> need2Entries <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">2</span> n } <span class="ot">-&gt;</span>
              { <span class="kw">auto</span> balanced <span class="ot">:</span> balance entries <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>) } <span class="ot">-&gt;</span>
              <span class="dt">Entries</span>

<span class="kw">record</span> <span class="dt">Transaction</span> <span class="kw">where</span>
  constructor <span class="dt">Tx</span>
  <span class="fu">label</span> <span class="ot">:</span> <span class="dt">String</span>
  <span class="fu">date</span> <span class="ot">:</span> <span class="dt">Date</span>
  <span class="fu">entries</span> <span class="ot">:</span> <span class="dt">Entries</span></code></pre></div>
<p>The <code>balance</code> function computes the aggregated balance of a list of entries, taking advantage of the fact our <code>Balance</code> type is a <code>Monoid</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">balance</span> <span class="ot">:</span> <span class="dt">Vect</span> n <span class="dt">Entry</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span>
balance <span class="fu">=</span>  normalise <span class="fu">.</span> concat <span class="fu">.</span> map amount</code></pre></div>
<p>The <code>normalise</code> function is needed because a 0 balance can be either a <code>Dr</code> or <code>Cr</code>. More on this later…</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">  <span class="kw">where</span>
    <span class="fu">normalise</span> <span class="ot">:</span> <span class="dt">Balance</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span>
    normalise (<span class="dt">Z</span>, <span class="dt">Dr</span>) <span class="fu">=</span> neutral
    normalise bal     <span class="fu">=</span> bal</code></pre></div>
<p>And we are then ready to define our <code>BookOfAccounts</code> type to group a sequence of transactions:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">BookOfAccounts</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">BookTransactions</span> <span class="ot">:</span> (txs <span class="ot">:</span> <span class="dt">Vect</span> k <span class="dt">Transaction</span>) <span class="ot">-&gt;</span>
                     { <span class="kw">auto</span> fundamentalEquation <span class="ot">:</span> invert (assets txs <span class="fu">&lt;+&gt;</span> expenses txs) <span class="fu">=</span> liabilities txs <span class="fu">&lt;+&gt;</span> capital txs <span class="fu">&lt;+&gt;</span> revenues txs } <span class="ot">-&gt;</span>
                     <span class="dt">BookOfAccounts</span></code></pre></div>
<p>Note that we have modified the <code>fundamentalEquation</code> to take into account <code>expenses</code> and <code>revenues</code>. It is actually the case that <code>asset = liability + equity</code> only when taking into account the profit or deficit that is the difference between revenues and expenses. In actual accounting practices, a “normal” transaction always involves an expense or revenue account and or more balance sheet account.</p>
<h2 id="testing">Testing</h2>
<p>One of the benefits of using a Type-Driven Approach in a language like Idris is that we can use the compiler/typechecker to run <em>tests</em>, instead of having to define separate test suites.</p>
<p>Given some <code>Account</code>s definitions:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Capital</span> <span class="ot">:</span> <span class="dt">Account</span>
<span class="dt">Capital</span> <span class="fu">=</span> <span class="dt">MkAccount</span> <span class="st">&quot;Capital&quot;</span> {type <span class="fu">=</span> <span class="dt">Equity</span>}

<span class="dt">Bank</span> <span class="ot">:</span> <span class="dt">Account</span>
<span class="dt">Bank</span> <span class="fu">=</span> <span class="dt">MkAccount</span> <span class="st">&quot;Bank&quot;</span> {type <span class="fu">=</span> <span class="dt">Asset</span>}</code></pre></div>
<p>We can use propositional equality, that is the <code>Type</code> asserting that two expressions are the same, as a way to assert some property holds, and then <em>prove</em> the property actually holds by providing an implementation for it that will be typechecked:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">valid1</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Dr</span>) <span class="dt">Bank</span>,
                  <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>)
valid1 <span class="fu">=</span> <span class="dt">Refl</span>

<span class="fu">valid2</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Bank</span>,
                  <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Dr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>)
valid2 <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>Interestingly we can also state <em>negative</em> properties by proving there can never be an implementation for this type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">invalid</span> <span class="ot">:</span> <span class="dt">Not</span> (balance [ <span class="dt">MkEntry</span> (<span class="dv">100</span>, <span class="dt">Cr</span>) <span class="dt">Bank</span>,
                         <span class="dt">MkEntry</span> (<span class="dv">101</span>, <span class="dt">Dr</span>) <span class="dt">Capital</span> ] <span class="fu">=</span> (<span class="dv">0</span>, <span class="dt">Cr</span>))
invalid <span class="fu">=</span> <span class="fu">\</span> <span class="dt">Refl</span> <span class="kw">impossible</span></code></pre></div>
<p>And those tests found a bug in my code! The order in which the entries were given in a transaction mattered as I had forgotten to recursively call the accumulation function in one case.</p>
<h2 id="parsing">Parsing</h2>
<p>Once we have our core model’s types defined, we can try to talk to the outside world. Here, we’ll simply parse a list of transactions in the <em>ledger</em> format:</p>
<pre><code>2019-01-01 Some transaction
  Asset:Bank  D 100
  Equity:Capital C 100

2019-01-02 Another transaction
  Asset:Bank C 90
  Expense:Foo D 80
  Liability:Tax D 10
</code></pre>
<p>and ensure we are able to pretty-print it in the same format.</p>
<p>I use the <a href="https://github.com/ziman/lightyear">lightyear</a> parser combinators library which is pretty-much a clone of Haskell’s parsec and is similar to every other parser combinators library out there. What’s more relevant to our purpose is the fact that the types I have defined <em>enforce</em> their invariant at the <em>constructor level</em> which means they require the calling context to provide the <em>proofs</em> those invariants are indeed valid.</p>
<p>In the <code>parseEntries</code> function for example, we need to make sure provide a sequence of the correct length (at least 2) and a proof that the entries are <em>balanced</em> in order to build an <code>Entries</code> value.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">parseEntries</span> <span class="ot">:</span> <span class="dt">Parser</span> <span class="dt">Entries</span>
parseEntries <span class="fu">=</span> <span class="kw">do</span>
  e1 <span class="ot">&lt;-</span> parseEntry
  endOfLine
  e2 <span class="ot">&lt;-</span> parseEntry
  endOfLine
  es <span class="ot">&lt;-</span> sepBy parseEntry endOfLine
  <span class="kw">let</span> entries <span class="fu">=</span> e1 <span class="ot">::</span> e2 <span class="ot">::</span> fromList es
  <span class="kw">case</span> decEq (balance entries) <span class="dt">Zero</span> <span class="kw">of</span>
    (<span class="dt">Yes</span> prf) <span class="ot">=&gt;</span> pure <span class="fu">$</span> <span class="dt">MkEntries</span> entries
    (<span class="dt">No</span>  <span class="fu">_</span>)   <span class="ot">=&gt;</span> fail <span class="st">&quot;Entries are not balanced, total debits minus total credits should be 0&quot;</span></code></pre></div>
<p>In other words, there is no way<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> to build an invalid value and the Idris type system guarantees our <em>core model</em> will stay consistent <em>at compile time</em>. Applying a <em>Ports and adapters</em> or <em>Hexagonal Architecture</em> strategy leaves no room for introducing errors in our core model, completely alleviating the need to have such validation concerns (eg. checking values range, lengths, validate data…) leak into the model’s code.</p>
<h2 id="evaluation">Evaluation</h2>
<p>I was pretty happy with myself, patting me in the back for having succeeded in modelling double-entry bookkeeping in a nice simple type-safe model. Then I realised that <em>implementing</em> <code>Monoid Balance</code> was the first step, I still needed to <em>prove</em> the <a href="https://en.wikibooks.org/wiki/Haskell/Monoids#Monoid_laws">monoid laws</a> hold for my type and <code>&lt;+&gt;</code> operation. This is when things started to go awry…</p>
<p>The proof for neutral element is short but already highlights the main issue:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">rightNeutralBalance</span> <span class="ot">:</span> (x <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (x <span class="fu">&lt;+&gt;</span> (<span class="dv">0</span>, <span class="dt">Cr</span>) <span class="fu">=</span> x)
rightNeutralBalance (n, <span class="dt">Cr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusZeroRightNeutral n <span class="kw">in</span> <span class="dt">Refl</span>
rightNeutralBalance (<span class="dt">Z</span>, <span class="dt">Dr</span>) <span class="fu">=</span> believe_me <span class="st">&quot;special case for zero debit&quot;</span>
rightNeutralBalance (<span class="dt">S</span> n, <span class="dt">Dr</span>) <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>The problem is that there really are <em>two</em> neutral elements, a 0 debit and a 0 credit. I have chosen to consider the canonical neutral element to be <code>(0, Cr)</code> but that’s just a convention which comes bite me in the back when trying to prove things: I am forced to use the magic <code>believe_me</code> function to lure the typechecker in the <code>(0, Dr)</code> case.</p>
<p>Things get even worse when trying to prove associativity:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">associativeBalance</span> <span class="ot">:</span> (x <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (y <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (z <span class="ot">:</span> <span class="dt">Balance</span>) <span class="ot">-&gt;</span> (x <span class="fu">&lt;+&gt;</span> (y <span class="fu">&lt;+&gt;</span> z) <span class="fu">=</span> (x <span class="fu">&lt;+&gt;</span> y) <span class="fu">&lt;+&gt;</span> z)
associativeBalance (a, <span class="dt">Dr</span>) (b, <span class="dt">Dr</span>) (c, <span class="dt">Dr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusAssociative a b c <span class="kw">in</span> <span class="dt">Refl</span>
associativeBalance (a, <span class="dt">Cr</span>) (b, <span class="dt">Cr</span>) (c, <span class="dt">Cr</span>) <span class="fu">=</span> <span class="kw">rewrite</span> plusAssociative a b c <span class="kw">in</span> <span class="dt">Refl</span>
associativeBalance (a, <span class="dt">Dr</span>) (b, <span class="dt">Cr</span>) (c, <span class="dt">Cr</span>) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} a (plus b c))
  <span class="fu">|</span> (<span class="dt">Left</span> l) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} a b)
    <span class="fu">|</span> (<span class="dt">Left</span> x) <span class="fu">=</span> <span class="kw">rewrite</span> minusPlusPlusMinus b c a <span class="kw">in</span> <span class="dt">Refl</span>
    <span class="fu">|</span> (<span class="dt">Right</span> r) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} (a <span class="fu">-</span> b) c)
      <span class="fu">|</span> (<span class="dt">Left</span> x) <span class="fu">=</span> <span class="kw">rewrite</span> minusPlusMinusMinus b c a <span class="kw">in</span> <span class="dt">Refl</span>
      <span class="fu">|</span> (<span class="dt">Right</span> x) <span class="fu">=</span> <span class="ot">?hole_4</span></code></pre></div>
<p>What happens here is that I got caught in a maze of lemmas involving various combinations of plus and minus operations, which unvoidably would end in the need to prove that <code>Dr = Cr</code> which, obviously, would fail or need some magic axiom.</p>
<p>After much struggling with the typechecker and discussion on slack, I realised this proof was problematic because the underlying types were fatally flawed. As brillantly stated by Ohad Kammar:</p>
<blockquote>
<p>Since it’s going to be impossible to get Idris to recognise all false statements automatically, the best we can hope for is that proving false statements is going to get more and more difficult until the programmer gives up</p>
</blockquote>
<p>The types are wrong because I am conflating two concepts: The <em>Balance</em> resulting from aggregating one or more entries for some account(s), and the <em>Amount</em> of each entry, along with a direction (Debit or Credit). Although they both are integral values with a “sign”, they have different meaning in the domain and different behaviour: A <em>Balance</em> can be 0, whereas an entry’s Amount cannot.</p>
<p>Moreover, the structure of the <code>Balance</code> type is also wrong and some form of premature optimisation: Instead of having a proper data type to represent the concept along with the constraints it supports, I am trying to “abuse” existing types.</p>
<h1 id="take-2">Take 2</h1>
<p>So I went for a deep refactoring of my code to cleanly separate the concepts of an <code>Amount</code> and a <code>Balance</code> along with their proper constraints. This was also a good opportunity to start splitting my code in more manageables parts.</p>
<h2 id="amounts">Amounts</h2>
<p>An <code>Amount</code> is basically a non-zero <code>Nat</code>ural integer so let’s embed that property in our type’s constructor:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Amount</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MkAmount</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> notZero <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> n } <span class="ot">-&gt;</span> <span class="dt">Amount</span></code></pre></div>
<p>We want our <code>Amount</code> to be straightforward to use so I’ve decided I would like to equip it with a <code>Num</code> implementation:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="dt">Num</span> <span class="dt">Amount</span> <span class="kw">where</span>
  (<span class="dt">MkAmount</span> n {notZero<span class="fu">=</span>nz}) <span class="fu">+</span> (<span class="dt">MkAmount</span> k {notZero<span class="fu">=</span>nz&#39;}) <span class="fu">=</span>
    <span class="dt">MkAmount</span> (n <span class="fu">+</span> k) { notZero <span class="fu">=</span> plusRightIsLte nz }

  (<span class="dt">MkAmount</span> n {notZero<span class="fu">=</span>nz}) <span class="fu">*</span> (<span class="dt">MkAmount</span> k {notZero<span class="fu">=</span>nz&#39;}) <span class="fu">=</span>
    <span class="dt">MkAmount</span> (n <span class="fu">*</span> k) { notZero <span class="fu">=</span> lteOneMult nz nz&#39; }

  fromInteger <span class="fu">=</span> fromIntegerAmount</code></pre></div>
<p>Although the actual <em>code</em> for addition and multiplication is trivial and it is <em>obvious</em> that adding and multiplying non-zero integers yields non-zero integers, it was non-trivial (at least for me) to build the needed proofs. The addition case relies on a couple of properties from <a href="https://www.idris-lang.org/docs/current/prelude_doc/docs/Prelude.Nat.html">Nat</a> defined in Idris’ prelude, namely that adding a number to the right of a <code>LTE</code> comparison preserves it, and that <code>LTE</code> is transitive:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">plusRightIsLte</span> <span class="ot">:</span> <span class="dt">LTE</span> j k <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (k <span class="fu">+</span> n)
plusRightIsLte x   {k} <span class="fu">=</span> lteTransitive x (lteAddRight k)</code></pre></div>
<p>The multiplication case is similar except that the standard prelude does not provide a <code>lteMultRight</code> proof so I need to build it myself. This proofs is of course slightly different from the addition case because we need the factor <code>k</code> to be non-zero:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)
lteMultRight <span class="dt">Z</span>               <span class="fu">=</span> <span class="dt">LTEZero</span>
lteMultRight n     {k <span class="fu">=</span> <span class="dt">Z</span>}   <span class="kw">impossible</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> <span class="dt">S</span> k} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (plusRightIsLte <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>This is done by induction on <code>n</code> while prooving the case <code>k = 0</code> is indeed <code>impossible</code>, and here is a detailed step-by-step implementation:</p>
<p>Start with the signature for the <em>proposition</em>. Note that we can already use that signature in our implementation of <code>Num Amount</code>, as an additional hypothesis we’ll need to prove for our implementation to satisfy the typechecker:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)</code></pre></div>
<p>Hitting <code>C-c C-s</code> in Emacs and then case-splitting (with <code>C-c C-c</code> on <code>n</code> gives us the two base cases:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">lteMultRight</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Nat</span>) <span class="ot">-&gt;</span> { <span class="kw">auto</span> nz <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> k } <span class="ot">-&gt;</span> <span class="dt">LTE</span> n (mult n k)
lteMultRight <span class="dt">Z</span> <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_1</span>
lteMultRight (<span class="dt">S</span> j) <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_2</span></code></pre></div>
<p>The first case is directly solvable by hitting <code>C-c C-a</code> on the provided hole, while we need to bring in scope the (implicit) <code>k</code> and case-split on it for the second case:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight <span class="dt">Z</span> <span class="fu">=</span> <span class="dt">LTEZero</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> <span class="dt">Z</span>} <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_1</span>
lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span> <span class="ot">?lteMultRight_rhs_3</span></code></pre></div>
<p>The second case is clearly <code>impossible</code> yet the typechecker fails to infer it automatically so we have to fill it by hand. This leaves us with the following hole to fill:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"> `<span class="co">--                                     k : Nat</span>
                                         <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
                                        <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> (fromInteger <span class="dv">1</span>) (<span class="dt">S</span> k)
     <span class="co">------------------------------------------------------------------------------</span>
      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>lteMultRight_rhs_3 <span class="ot">:</span> <span class="dt">LTE</span> (<span class="dt">S</span> j) (<span class="dt">S</span> (plus k (mult j (<span class="dt">S</span> k))))</code></pre></div>
<p>This type looks like something we can recurse over inductively because we know that:</p>
<pre><code>λΠ&gt; :t LTESucc
LTESucc : LTE left right -&gt; LTE (S left) (S right)</code></pre>
<p>So peeling one layer</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="dt">LTESucc</span> <span class="ot">?hole</span></code></pre></div>
<p>and looking for the type of the hole we have</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"> `<span class="co">--                       k : Nat</span>
                           <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
                          <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> (fromInteger <span class="dv">1</span>) (<span class="dt">S</span> k)
     <span class="co">--------------------------------------------------------</span>
      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (plus k (mult j (<span class="dt">S</span> k)))</code></pre></div>
<p>gives us some more information. We can call <code>lteMultRight</code> inductively on <code>j</code> (which is reducing <code>n</code>) and see what’s needed:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="dt">LTESucc</span> (<span class="ot">?hole</span> <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>which gives us the <code>hole</code></p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">  <span class="fu">k</span> <span class="ot">:</span> <span class="dt">Nat</span>
  <span class="fu">j</span> <span class="ot">:</span> <span class="dt">Nat</span>
  <span class="fu">nz</span> <span class="ot">:</span> <span class="dt">LTE</span> <span class="dv">1</span> (<span class="dt">S</span> k)
<span class="co">--------------------------------------</span>
<span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (mult j (<span class="dt">S</span> k)) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (plus k (mult j (<span class="dt">S</span> k)))</code></pre></div>
<p>We now notice that the type of <code>hole</code> looks like the type of our <code>plusRightIsLte</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">plusRightIsLte</span> <span class="ot">:</span> <span class="dt">LTE</span> j n         <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (n <span class="fu">+</span> k)
<span class="fu">hole</span>           <span class="ot">:</span> <span class="dt">LTE</span> j (j <span class="fu">*</span> <span class="dt">S</span> k) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j (k <span class="fu">+</span> (j <span class="fu">*</span> <span class="dt">S</span> k))</code></pre></div>
<p>but with <code>n = j * S k</code> and the order of arguments in the addition on the right reversed. We can pull in the fact that addition is commutative:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (<span class="ot">?hole</span> <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>and now our <code>hole</code> has the right type:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">      <span class="dt">Accounting</span><span class="fu">.</span><span class="dt">Amount</span><span class="fu">.</span>hole <span class="ot">:</span> <span class="dt">LTE</span> j (j <span class="fu">*</span> <span class="dt">S</span> k) <span class="ot">-&gt;</span> <span class="dt">LTE</span> j ((j <span class="fu">*</span> <span class="dt">S</span> k)  <span class="fu">+</span> k)</code></pre></div>
<p>which allows us to conclude our proof:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris">lteMultRight (<span class="dt">S</span> j) {k <span class="fu">=</span> (<span class="dt">S</span> k)} <span class="fu">=</span>
  <span class="kw">rewrite</span> plusCommutative k (j <span class="fu">*</span> <span class="dt">S</span> k)
  <span class="kw">in</span> <span class="dt">LTESucc</span> (plusRightIsLte <span class="fu">$</span> lteMultRight j {k <span class="fu">=</span> <span class="dt">S</span> k})</code></pre></div>
<p>The real process was much more hectic and I needed quite a lot of help from slack’s people!</p>
<h2 id="balance">Balance</h2>
<p>We can now turn our attention to the <code>Balance</code> type and provide an implementation that takes into account the possibility for a balance to be <em>null</em> while preserving the chances to make our <code>Balance</code> type a proper monoid:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Balance</span> <span class="ot">:</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">Zero</span> <span class="ot">:</span> <span class="dt">Balance</span>
  <span class="dt">Bal</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d <span class="ot">:</span> <span class="dt">Direction</span>) <span class="ot">-&gt;</span> <span class="dt">Balance</span></code></pre></div>
<p>The key insight here is to introduce a special constructor to denote 0 which will remove the need to do “magical” things when 2 <code>Balance</code> gets to compensate each other depending on the ordering of the operands. The definitions for the various algebraic structure our <code>Balance</code> is supposed to implement (semigroup, monoid and group) are simple once we introduce the <code>compensate</code> operation relating <code>Amount</code>s and <code>Direction</code>s to yield a <code>Balance</code>:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">compensate</span> <span class="ot">:</span> (n <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d <span class="ot">:</span> <span class="dt">Direction</span>)
          <span class="ot">-&gt;</span> (n&#39; <span class="ot">:</span> <span class="dt">Amount</span>) <span class="ot">-&gt;</span> (d&#39; <span class="ot">:</span> <span class="dt">Direction</span>)
          <span class="ot">-&gt;</span> { <span class="kw">auto</span> notEqDir <span class="ot">:</span> <span class="dt">Not</span> (d <span class="fu">=</span> d&#39;) }
          <span class="ot">-&gt;</span> <span class="dt">Balance</span>
compensate (<span class="dt">MkAmount</span> n) d (<span class="dt">MkAmount</span> n&#39;) d&#39; <span class="kw">with</span> (decEq n n&#39;)
    <span class="fu">|</span> (<span class="dt">Yes</span> prf) <span class="fu">=</span> <span class="dt">Zero</span>
    <span class="fu">|</span> (<span class="dt">No</span> contra) <span class="kw">with</span> (order {to<span class="fu">=</span><span class="dt">LTE</span>} n n&#39;)
      <span class="fu">|</span> (<span class="dt">Left</span> l)  <span class="fu">=</span> <span class="dt">Bal</span> (<span class="dt">MkAmount</span> (n&#39; <span class="fu">-</span> n)
                        { notZero <span class="fu">=</span> notEqualMinusGTOne n n&#39; l contra }) d&#39;
      <span class="fu">|</span> (<span class="dt">Right</span> r) <span class="fu">=</span> <span class="dt">Bal</span> (<span class="dt">MkAmount</span> (n <span class="fu">-</span> n&#39;)
                        { notZero <span class="fu">=</span> notEqualMinusGTOne n&#39; n r (notEqReflexive contra) }) d</code></pre></div>
<p>This definition is however made more complex than we’d hoped because: 1. When substracting 2 <code>Nat</code>ural numbers, we need to prove the first number is greater than or equal to the second one, which entails the need to call <code>order</code> here to case-split on the order of the 2 numbers with the relevant proof, 2. We also need to ensure the difference is still greater than or equal to 1 in order to build an <code>Amount</code>.</p>
<p>This is a tribute to the fact our <code>Amount</code> type is “complex”, eg. its constructor is not only a <em>structure</em> to aggregate some other datatypes but also carries with it some <em>proofs</em> which need to be maintained at all time. This will come bite us again later on…</p>
<h2 id="refactoring">Refactoring</h2>
<p>Changing our 2 core types’ definition ripples through our system but without entailing any deep changes in our top-level types. The structure and the properties of our <code>Entry</code>, <code>Transaction</code>, <code>Entries</code> and <code>BookOfAccounts</code> types stay mostly the same except for the fact we don’t use <code>Balance</code> for defining an <code>Entry</code> but separate the <code>Amount</code> and the <code>Direction</code>. We only have to fix the compiler’s errors one at a time and end-up with pretty much the same code than we had before.</p>
<p>The introduction of <code>Amount</code> forces us however to make the numbers explicit in our sample entries. Although <code>Amount</code> is a <code>Num</code>ber and the compiler automatically introduces a conversion <code>fromInteger</code> when we use a literal in place of an <code>Amount</code>, writing</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">valid1</span> <span class="ot">:</span> balance [ <span class="dt">MkEntry</span> <span class="dv">100</span> <span class="dt">Dr</span> <span class="dt">Bank</span>,
                   <span class="dt">MkEntry</span> <span class="dv">100</span> <span class="dt">Cr</span> <span class="dt">Capital</span> ] <span class="fu">=</span> <span class="dt">Zero</span>
valid1 <span class="fu">=</span> <span class="dt">Refl</span></code></pre></div>
<p>yields the following typechecker error:</p>
<pre><code>             Type mismatch between
                     Zero
             and
                     compensate (fromIntegerAmount 100) Dr (fromIntegerAmount 100) Cr</code></pre>
<p>because the typechecker cannot see “past” <code>fromIntegerAmount</code>. We need to either explicitly call <code>MkAmount</code> or turn on <code>public export</code> visibility on <code>fromIntegerAmount</code> to allow the typechecker to reduce expressions usinge the definition of the function.</p>
<h2 id="evaluation-1">Evaluation</h2>
<p>The situation is definitely better than with our first model: We have a clear separation of two key concepts in our system and have strengthened our understanding of the domain and the relationship between the domain and the code by baking more properties.</p>
<p>Turns out it’s not all bright and shinny, which becomes apparent when we try (again) to prove the <code>Group Balance</code> properties. I won’t go into the tedious details in this already long post but this ended up being a long, interesting but painful journey in the realm of proofs writing. Interested reader is referred to the <a href="https://github.com/abailly/xxi-century-typed/blob/master/idris/src/Accounting/Proofs.idr">Proofs.idr</a> file which contains the current (unfinished) state of the proofs of neutral element, inverse and associativity of <code>Balance</code> with <code>&lt;+&gt;</code> operation.</p>
<p>I gave up trying to prove associativity at some point, when it became clear the proof would be a long and tedious enumeration of all possible cases depending on the respective ordering of the <code>Balance</code>s and the values of their <code>direction</code>. This is caused by the fact the definition of <code>&lt;+&gt;</code> involves a case-split on the <code>direction</code>s and then uses <code>compensate</code> which itself involves 2 case-splitting: on the the equality of the values, and on their relative ordering. The Idris typechecker works by replacing each function call by its definition and trying to reduce the resulting expression to some ground types. This means that when one wants to provide a proof that <code>(a &lt;+&gt; b) &lt;+&gt; c = a &lt;+&gt; (b &lt;+&gt; c)</code>, the applications of <code>&lt;+&gt;</code> are only reduced if the typechecker can follow the various branches in <code>&lt;+&gt;</code> definition to conclude. This can only happen if we provide the relevant proofs which basically means the structure of our proof necessarily follows from various <em>paths</em> leading to a conclusion in our function’s implementation.</p>
<h1 id="conclusion-and-takeaways">Conclusion and Takeaways</h1>
<p>I have not yet undertaken <em>Take 3</em> but it’s pretty clear I am not there yet: The fact the proof for associativity of <code>Balance</code> is still daunting and painful is certainly a sign the involved types are more complex than they should be and need some more refactoring.</p>
<p>There are a couple of other options that would be worth exploring: * The embedding of the <code>notZero</code> proof does not seem like a good idea as it brings more proof obligations in scope at each use of an <code>Amount</code>. A better solution could be to have <code>Amount</code> use directly <code>Nat</code> but consider it to represent it’s successor, and then provide smart constructor and operations to manipulate those numbers while preserving this internal property, * There exists a <a href="https://github.com/idris-lang/Idris-dev/blob/master/libs/contrib/Data/ZZ.idr">ZZ</a> module to represent <em>relative</em> integers. I could either get some inspiration from it or use it directly for <code>Amount</code>s and to hold a <code>Balance</code>, with some encoding to extract the direction (debit or credit) from the sign of the number, * Rather than trying to make <code>Balance</code> into a <code>Monoid</code>/<code>Group</code>, I could define a <code>Vect n Entry</code> to be a <code>Monoid</code> action <em>on</em> a <code>Balance</code>, eg. provide a specialised operation that applies an <code>Entry</code> on a <code>Balance</code> to give another <code>Balance</code>.</p>
<p>I am currently leaning towards exploring a combination of option 2 (use <code>ZZ</code> to contain an <code>Entry</code>’s amount and drop <code>Amount</code>) and option 3 (keep a separate <code>Balance</code> type but only use it in conjuction with <code>Entry</code>) as it seems to be both simpler than the current solution yet still close to the domain.</p>
<p>All in all, this experience has confirmed my initial intuition about Idris and the relevance of dependently-typed languages in providing “better” business domain models, something which I have been convinced of since I discovered Idris thanks to Edwin Brady’s <a href="https://www.manning.com/books/type-driven-development-with-idris">book</a>. Working through some involved (for me) proofs was an eye opener on both how difficult this process can be, and how much insight in one’s design it can provide. Some key takeaways I would like to share are:</p>
<ul>
<li>“Proving” propositions by coding their implementation is really fun, and at the same time immensely frustrating: You see something that’s obvious, and you try to convince the typechecker this is indeed obvious armed with a bunch of functions, types and rewriting rules, and it sometimes does not align and you don’t know why…</li>
<li>Proving negative statements (eg. types of the form <code>foo -&gt; Void</code>) is often, somewhat unsurprisingly, harder and less intuitive than proving positive statements</li>
<li>Thanks to the help provided by various people on slack, I had some <em>Ah-ah</em> moments on the inner workings of the typechecker and gathered some more insights on how to write proofs:</li>
<li>For a function call involved in a proof to be reduced, it needs to which case to chose which implies one need to either provide explicitly pattern-matching on arguments or <code>with</code> clauses (which really act like “local” arguments),</li>
<li>The order of case-splitting on arguments matters and can make a proof more or less complicated,</li>
<li>It’s generally easier to prove general statements and then use that in a specialised way, than the converse,</li>
<li><em>Implicit</em> values are not rewritten by <code>rewrite ... in ...</code> statements, so they need to be provided in some way in the context</li>
<li>As already stated, it’s better to not have <em>implicit</em> proofs be part of one’s types definitions: Only export the type itself and provide smart constructors when needed.</li>
<li>Leveraging the REPL and the interactions it permits is very important as it permits one to isolate the problems to solve, step-by-step, until all is left are simple lemmas or possibly axioms,</li>
<li>Relating domain-level concepts to more abstract mathematical or computer-related concepts can be a source of insights on the domain itself, for example relating a <code>Balance</code> to <code>Monoid</code> or <code>Group</code>. And trying to prove the relevant properties gives more insights on the <em>representation</em> used and whether or not it suits our purpose.</li>
</ul>
<p>This last point in particular is interesting as it provides a way to start a dialog between the <em>domain</em> and the <em>code</em> that is not one-way. We often develop software considering the “business domain” <em>ex abstracto</em>, as if the fact we were designing a <em>software system</em> for that domain was irrelevant. But this is not true, the fact it <em>runs on software</em> changes the domain itself hence it’s perfectly legitimate we can gather insights about the domain from the code implementing it. In the case of <em>accounting</em> this is pretty obvious as we are manipulating numbers and it’s a well-studied domain, but I think most if not all domains would strongly benefit from such dialog, transforming as hodge-podge of ad-hoc rules into something simpler, more regular and probably more efficient.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>It’s interesting to note the original sentence seems to imply capital and equity are one and same thing, which is not true.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Short of cheating using something like <a href="https://www.idris-lang.org/docs/current/prelude_doc/docs/%5Bbuiltins%5D.html#believe_me">believe_me</a> of course that will <em>subvert the typechecker</em>.<a href="#fnref2">↩</a></p></li>
</ol>
</div>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Homero 2019</title>
    <link href="http://abailly.github.io/posts/homero2019.html" />
    <id>http://abailly.github.io/posts/homero2019.html</id>
    <published>2019-01-02T00:00:00Z</published>
    <updated>2019-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Homero 2019</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January  2, 2019</div>

<p>En écoutant <a href="https://www.franceinter.fr/emissions/les-histoires-du-monde/les-histoires-du-monde-02-janvier-2019">France inter</a> ce matin j’ai eu immédiatement envie de partager cette lecture collective sur twitter de l’Iliade en français. J’ai donc immédiatement tweeté les premiers vers du premier chant de l’Iiliade, avant de me rendre compte que la contrainte exigeait de twitter <em>un chant par semaine</em>. Il est donc devenu urgent d’écrire un programme pour faire en sorte de pouvoir générer ces tweets automatiquement au lieu de devoir laborieusement les taper un par un. Voici le fruit, brut de décoffrage de cette micro-aventure…</p>
<p>Tout d’abord un peu de cérémonies pour que le fichier contenant le code soit interprétable comme un script:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">#!/usr/bin/env stack</span>
<span class="co">-- stack runhaskell --resolver lts-12.5 --</span></code></pre></div>
<p>Puis les inévitables extensions de langage et imports…</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE LambdaCase #-}</span>
<span class="kw">import           </span><span class="dt">Control.Applicative</span>
<span class="kw">import           </span><span class="dt">Data.Char</span>
<span class="kw">import qualified</span> <span class="dt">Data.List</span>           <span class="kw">as</span> <span class="dt">List</span>
<span class="kw">import           </span><span class="dt">Data.Monoid</span>
<span class="kw">import           </span><span class="dt">System.Directory</span>
<span class="kw">import           </span><span class="dt">System.Environment</span>
<span class="kw">import           </span><span class="dt">System.IO</span></code></pre></div>
<p>On va avoir envie de générer plus d’un tweet à la fois, et on va donc lire le nombre de tweets à générer en argument de la ligne de commande:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getNumTweets ::</span> <span class="dt">IO</span> <span class="dt">Int</span>
getNumTweets <span class="fu">=</span> getArgs <span class="fu">&gt;&gt;=</span> \<span class="kw">case</span>
  [] <span class="ot">-&gt;</span> pure <span class="dv">1</span>
  (n<span class="fu">:</span>_) <span class="ot">-&gt;</span> pure <span class="fu">$</span> read n</code></pre></div>
<p>Le principe de ce programme, concentré dans la fonction <code>makeTweets</code> est extrêmement simple, on pourrait même dire brutal:</p>
<ul>
<li>On va itérer jusqu’à ce que le nombre de tweets à générer soit de 0:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">makeTweets ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
makeTweets <span class="dv">0</span> _ <span class="fu">=</span> pure ()
makeTweets numTweets content <span class="fu">=</span> <span class="kw">do</span></code></pre></div>
<ul>
<li>On va lire le curseur depuis un fichier intitulé <code>.break</code> dans le répertoire courant, curseur qui stocke notre “état” sous la forme de l’index du premier mot du reste du texte. Si le fichier n’existe pas, on part tout simplement du début</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  start <span class="ot">&lt;-</span> readBreak <span class="fu">&lt;|&gt;</span> pure <span class="dv">0</span></code></pre></div>
<ul>
<li>On va travailler sur la liste des listes de mots du texte en entrée, où un mot est simplement une suite de lettres séparée par des espaces. Comme Haskell est un langage <em>paresseux</em>, cette liste ne va pas être construite explicitement si ce n’est pas nécessaire. Pour fluidifier la lecture on enlève du texte les renvois de notes qui apparaissent sous la forme de nombres</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">let</span> ws <span class="fu">=</span> List.inits <span class="fu">.</span> drop start <span class="fu">.</span> words <span class="fu">.</span> filter (not <span class="fu">.</span> isDigit) <span class="fu">$</span> content</code></pre></div>
<ul>
<li>De cette liste de liste de mots, on va sélectionner la <em>dernière</em> occurence qui:
<ol style="list-style-type: decimal">
<li>à une longueur inférieure à 260 lorsqu’on reconstitue une phrase à partir des mots</li>
<li>se termnine par un signe de ponctuation</li>
</ol></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      sentence <span class="fu">=</span> lastWithPunctuation <span class="fu">$</span> takeWhile ((<span class="fu">&lt;</span> <span class="dv">260</span>) <span class="fu">.</span> length <span class="fu">.</span> unwords) ws</code></pre></div>
<ul>
<li>Il ne reste plus qu’à mettre à jour notre “état” avec la longueur de la liste de mots sélectionnée, puis à imprimer la phrase ornée du hashtag <code>#homero2019</code> sur la sortie standard</li>
<li>La récursion peut se poursuivre en réduisant le nombre de tweets et en conservant le même contenu</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      end <span class="fu">=</span> start <span class="fu">+</span> length sentence
  putStrLn <span class="fu">$</span> unwords sentence <span class="fu">&lt;&gt;</span> <span class="st">&quot; #homero2019&quot;</span>
  writeBreak end
  makeTweets (numTweets <span class="fu">-</span> <span class="dv">1</span>) content</code></pre></div>
<p>La fonction auxiliaire <code>lastWithPunctuation</code> est particulièrement brutale et dangereuse, mais néanmoins amusante:</p>
<ul>
<li>On inverse l’ensemble des listes, soit 3 niveaux de listes imbriquées jusqu’à identifier le dernier caractère de chaque “phrase” candidate</li>
<li>On passe toutes les phrases qui ne se terminent pas par un signe de ponctuation</li>
<li>et on retourne la première occurence qui se termine par un tel signe.</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">lastWithPunctuation ::</span> [[ <span class="dt">String</span> ]] <span class="ot">-&gt;</span> [<span class="dt">String</span>]
lastWithPunctuation <span class="fu">=</span> head <span class="fu">.</span> dropWhile (\ s <span class="ot">-&gt;</span> not <span class="fu">$</span> isPunctuation <span class="fu">$</span> head <span class="fu">$</span> head <span class="fu">$</span> reverse <span class="fu">&lt;$&gt;</span> reverse s) <span class="fu">.</span> reverse</code></pre></div>
<p>Les deux fonctions <code>readBreak</code> et <code>writeBreak</code> servent simplement à mettre à jour le fichier <code>.break</code> contenant l’état du flux de tweets.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">writeBreak ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
writeBreak <span class="fu">=</span> writeFile <span class="st">&quot;.break&quot;</span> <span class="fu">.</span> show

<span class="ot">readBreak ::</span> <span class="dt">IO</span> <span class="dt">Int</span>
readBreak <span class="fu">=</span> <span class="kw">do</span>
  exist <span class="ot">&lt;-</span> doesFileExist <span class="st">&quot;.break&quot;</span>
  <span class="kw">if</span> exist
    <span class="kw">then</span> read <span class="fu">&lt;$&gt;</span> readFile <span class="st">&quot;.break&quot;</span>
    <span class="kw">else</span> pure <span class="dv">0</span></code></pre></div>
<p>Il ne reste plus qu’à écrire le <code>main</code> dont le principal travail est d’appeler <code>makeTweets</code> avec le contenu lu depuis l’entrée standard:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  numTweets <span class="ot">&lt;-</span> getNumTweets
  getContents <span class="fu">&gt;&gt;=</span> makeTweets numTweets</code></pre></div>
<p>En téléchargeant le Chant I depuis le <a href="https://lesbelleslettresblog.com/2015/03/25/homere-iliade-chant-i-en-version-integrale-dans-la-traduction-de-paul-mazon/">site officiel de l’éditeur</a> et en le copiant/collant dans un fichier <code>chant1</code>, on peut lancer le programme <code>tweets.hs</code>:</p>
<pre><code>$ cat chant1 | ./tweets.hs 3
Chante, déesse, la colère d’Achille, le fils de Pélée; détestable colère, qui aux Achéens valut des souffrances sans nombre et jeta en pâture à Hadès tant d’âmes fières de héros, #homero2019
tandis que de ces héros mêmes elle faisait la proie des chiens et de tous les oiseaux du ciel – pour l’achèvement du dessein de Zeus. Pars du jour où une querelle tout d’abord divisa le fils d’Atrée, protecteur de son peuple, et le divin Achille. #homero2019
Qui des dieux les mit donc aux prises en telle querelle et bataille ? Le fils de Létô et de Zeus. C’est lui qui, courroucé contre le roi, fit par toute l’armée grandir un mal cruel, dont les hommes allaient mourant; cela, #homero2019</code></pre>
<p>j’aurais aimé pouvoir utiliser <a href="https://hackage.haskell.org/package/tweet-hs">tweet-hs</a> pour pouvoir effectivement tweeté ces textes mais malheureusement, le processus pour obtenir des clés OAuth sur twitter est long et pénible et je ne sais pas si j’aurais l’énergie nécessaire pour ce faire…</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>XP is the new SCRUM</title>
    <link href="http://abailly.github.io/posts/scrum-and-xp.html" />
    <id>http://abailly.github.io/posts/scrum-and-xp.html</id>
    <published>2019-01-01T00:00:00Z</published>
    <updated>2019-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>XP is the new SCRUM</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on January  1, 2019</div>

<p>This is the blurb that introduces <a href="https://www.amazon.fr/SCHWABER-AGILE-SCRUM_p1-United-States/dp/0130676349/ref=sr_1_2?ie=UTF8&amp;qid=1546375554&amp;sr=8-2&amp;keywords=ken+schwaber">Agile Software Development with SCRUM</a>, the seminal book by Ken Schwaber and Mike Beedle that explained Scrum, or rather <em>SCRUM</em> as it should be correctly spelled, to a wide audience.</p>
<blockquote>
<p>eXtreme Programming is an ideal many software shops would love to reach, but with the constant pressures to produce software quickly, they cannot actually implement it. The Agile software process allows a company to implement eXtreme Programming quickly and immediately-and to begin producing software incrementally in as little as 30 days! Implementing eXtreme Programming is easier said than done. The process can be time consuming and actually slow down current software projects that are in process. This book shows readers how to use SCRUM, an Agile software development process, to quickly and seamlessly implement XP in their shop-while still producing actual software. Using SCRUM and the Agile process can virtually eliminate all downtime during an XP implementation.</p>
</blockquote>
<p>This message in a bottle from a not-so-distant past - the book was published in 2001 - is interesting in at least 2 respects:</p>
<ul>
<li>Its first statement is still valid, eighteen years later: XP is still an “ideal many software shops would love to reach” but find unattainable because of various forms of pressure,</li>
<li>SCRUM was explicitly advocated as a <em>process</em> to “quickly and seamlessly implement XP”, a promise it mostly failed to deliver or that was lost in the fury of <em>agile transformations</em> that arose in the wake of SCRUM takeovers of the software development methods scene.</li>
</ul>
<p>Will 2019 be the year we’ll finally see XP being recognised?</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Sur &quot;Phénoménologie de la perception&quot;</title>
    <link href="http://abailly.github.io/posts/pheno-perception.html" />
    <id>http://abailly.github.io/posts/pheno-perception.html</id>
    <published>2018-11-20T00:00:00Z</published>
    <updated>2018-11-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Sur &quot;Phénoménologie de la perception&quot;</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 20, 2018</div>

<h2 id="sur-lempirisme">Sur l’empirisme</h2>
<p>“On ne peut pas réfuter une pensée qui s’ignore elle même.” L’empirisme ignore l’expérience, soit la rencontre entre un <em>sujet</em> et le <em>monde</em>. Les constructions théoriques seront toujours plus <em>réels</em> car plus “dures”, plus précises que ce dont l’expérience peut rendre compte. L’objectivation est irréfutable car elle supprime la conscience du sujet ou bien plutôt sa relation au monde, et réciproquement la relation que le monde entretient avec le sujet, l’inclusion de celui-ci dans celui-là. L’inévitable conséquence en est le dualisme.</p>
<h2 id="sur-lintellectualisme">Sur l’intellectualisme</h2>
<p>La réflexion manque de se réfléchir elle même et rend implicite l’existence du <em>sujet connaissant</em> et la possibilité théorique de <em>tout connaître</em>. Elle manque ainsi le <em>phénomène de la pensée</em> elle même dans son analyse des conditions de possibilité de la connaissance. “Que puis-je connaître ?” présuppose qu’il y a quelque chose à connaître par un sujet connaissant, mais ignore complètement la situation concrète de ce sujet. Toute réflexion est absolue, détachée du corps, de l’espace et du temps, détachée des autres.</p>
<h2 id="primat-de-la-vision">Primat de la vision</h2>
<p>L’objet est saisi en tant qu’objet parce qu’il s’inscrit sur un <em>horizon</em> et qu’avec moi d’autres objets le “regardent”. Je peux saisir l’objet dans sa profondeur grâce aux autres objets, en construisant les relations qu’ils entretiennent les uns avec les autres, en me mettant à leur place, adoptant un point de vue multiple.</p>
<h2 id="relation-du-corps-au-monde">Relation du corps au monde</h2>
<p>Le corps n’est pas <em>dans</em> l’espace et le temps, il les <em>habite</em> et il leur donne forme. C’est parce que nous avons un corps qu’il y a un espace-temps à explorer pour nous. L’étude des conséquences de lésions nerveuses et maladies dégéneratives montre - par contraste - qu’en l’état dit “normal” nous n’avons pas <em>connaissance</em> du monde, nous n’avons pas à l’objectifier pour agir et se mouvoir : le monde est ce qui est là pour nous, à notre portée. Quand je bouge mon bras pour prendre un objet je ne planifie pas mon acte avant de l’accomplir, ce que doit faire un malade. Le corps est porteur de sens, ou plutôt il est le moyen pour nous de signifier, de donner sens aux choses du monde en nous mettant en relation avec elles.</p>
<h2 id="le-corps-comme-oeuvre-dart">Le corps comme oeuvre d’art</h2>
<p>Comme le corps, l’oeuvre d’art est individualité, à la fois expression et exprimé. Les sens sont fondamentalement unis dans l’appréhension du corps. Je ne suis pas <em>dans</em> mon corps, je <em>suis</em> mon corps.</p>
<h2 id="mimer-un-état-pour-le-faire-advenir">Mimer un état pour le faire advenir</h2>
<p>Quand je veux m’endormir, je <em>mime</em> l’état du sommeil, calme et paisible, et c’est mon corps qui répond à cette imitation en s’endormant “réellement”. Similairement la croyance est la conséquence de la pratique religieuse et non sa cause : je crois parce que j’accomplis régulièrement des rituels prescrits.</p>
<h2 id="impossibilité-de-lexistence-pure">Impossibilité de l’existence pure</h2>
<p>Parce que j’ai un corps sensible, je suis ouvert au monde et il est impossible de supprimer toute <em>intention</em>. Vivre n’est pas seulement exister mais aussi percevoir, répondre à la proposition du corps d’entrer en relation avec le monde, en quelque sorte de le créer. Cela invalide toute possibilité d’une méditation pure.</p>
<h2 id="sur-la-parole">Sur la parole</h2>
<p>L’empirisme conçoit le langage comme suite de traces, d’images verbales, déclenchées par des stimuli sonores ou visuels. L’intellectualisme le conçoit comme manifestation de la pensée. “Dans la première conception, il n’y a personne qui parle, dans la seconde il y a un sujet mais un sujet <em>pensant</em>.” Le mot seul, isolé, en lui-même n’a pas de sens, mais les mots prononcés <em>ont un sens</em> : la pensée tend vers son expression verbale et reste confuse, ignorante d’elle-même tant qu’elle n’est pas formulée dans des mots. <em>Nommer</em> fait exister les choses pour nous.</p>
<h2 id="perception-et-corps-propre">Perception et corps propre</h2>
<p>La continuité du monde et de ma perception de celui-ci est une conséquence de de l’identité du corps propre au cours du mouvement : je perçois continûment parce que je <em>suis</em> continûment au travers de mon corps : je n’ai pas besoin de voir explicitement l’arrière d’un cube pour le poser, mon corps me permettrait de tourner autour et de de faire l’expérience du géometral du cube qui découle donc de cette identité.</p>
<h2 id="langage-et-monde-conventionnel">Langage et monde conventionnel</h2>
<p>Comme le geste nous relie au monde physique et nous permet de communiquer à propos de lui, de le partager avec d’autres, la parole nous relie au monde <em>social</em> et conventionnel, symbolique, nous permet de le partager avec d’autres au moyen de gestes linguistiques. Le signe, la parole, le langage ne sont pas arbitraires au sens de “Construits ex nihilo”, ils <em>doivent</em> être ce qu’ils sont en vertu de leur histoire, de contraintes physiques, d’influences, pour permettre de communiquer dans un certain cercle.</p>
<h2 id="unité-de-la-perception">Unité de la perception</h2>
<p>Lorsque nous percevons le monde autour de nous, nos sens sont utilisés simultanément et communiquent les uns avec les autres. Ce n’est que lorsque nous nous concentrons sur telle ou telle partie, lorsque nous analysons tel objet que ceux-ci acquièrent certaines qualités propres à tel ou tel sens. Les sons ont une résonnance visuelle ou tactile, les images et couleurs suscitent des émotions et sensations corporelles.</p>
<h2 id="unité-perceptive-de-la-chose">Unité perceptive de la chose</h2>
<p>“un tableau contient enn lui-même jusqu’à l’odeur du paysage” c’est à dire que toute perception d’une chose est association, les qualités sonores, visuelles, olfactives, tactiles accompagnent la vision, le toucher ou l’ouïe. L’acuité de l’expérience fait l’acuité des sens. Donc voir une chose est le signe de toute ses qualités : voir du feu nous “donne” sa chaleur, son crépitement…</p>
<h2 id="le-sens-est-chargé-de-prédicats-anthropologiques">Le sens est chargé de prédicats anthropologiques</h2>
<p>Parce que les choses existent pour nous, au travers de notre expérience, celle-ci et notre manière de la décrire, donc notre langage, sont chargés de notre situation dans le monde, des contraintes et caractéristiques de notre corps. C’est exactement ce que décrivent Lakoff et Johnson dans leur analyses des métaphores dont notre langage est saturé : c’est parce que nous existons et vivons que ces métaphores sont universellement présentes.</p>
<h2 id="contiuité-et-inépuisabilité-du-monde">Contiuité et inépuisabilité du monde</h2>
<p>Je n’ai pas une succession discontinue de points de vues, de perspectives, quand je perçois mais une interaction continue avec les choses et les paysages. Je ne pense pas chaque image mais chaque instant glisse dans l’autre. Modéliser la perception comme un processus discret, une succession d’images ou de sensations est incorrect. L’effort et la concentration produisent des jugements d’identités d’une chose, d’une succession de ses états, parce que prélevés sur un fond continu.</p>
<p>Le monde n’est pas la somme des choses mais ce dont les choses proviennent, un “réservoir infini de choses”.</p>
<h2 id="hallucinations-perceptions-et-rêves">Hallucinations, perceptions et rêves</h2>
<p>La perception est très différente de l’hallucination car le monde y est tout entier engagé et les malades qui souffrent de visions sont parfaitement capables de faire la différence entre celles-ci et des objets réels. L’hallucination est entièrement projection de l’esprit, et pourtant elle <em>impressionne</em>, elle produit un effet sur le malade quand bien même celui-ci sait qu’elle n’est pas réelle. Et quid du rêve dont je ne peux faire la différence d’avec une perception <em>quand je le vis</em> ?</p>
<p>C’est parce que le rêve, comme l’hallucination et comme la perception se déroule avant toute opération intellectuelle, dans cette relation au monde réel qui nous implique tout entier et qui est notre corps, avant tout jugement prédicatif.</p>
<blockquote>
<p>Le perçu, le rêvé, l’halluciné demeure en deça du doute et de la démonstration</p>
</blockquote>
<p>Il n’y a pas d’erreur possible là où il n’y a pas de vérité possible : le perçu <strong>est</strong> pour nous avant toute pensée.</p>
<h2 id="temporalité">Temporalité</h2>
<p>Quand je pense, je réfléchis sur moi, mes pensées passées, je suis déjà dans le futur et je ne peux qu’utiliser des souvenirs, des témoignages incertains. Dans toute réflexion s’insère le temps, dont l’épaisseur introduit du doute et de l’ambiguïté.</p>
<h2 id="sur-la-possibilité-et-le-sens-du-cogito">Sur la possibilité et le sens du cogito</h2>
<p>Je ne peux pas objectiver mes pensées : chaque pensée, le fait même de penser est un processus dont je ne peux vraiment garder la trace entièrement que dans la mémoire qui est elle même un processus. Réfléchir c’est donc toujours reprendre la pensés, la réactualiser à partir de bribes de souvenirs et d’autres pensées qui deviennent les objets du processus mais sont soumis à la même loi. La pensée n’est donc pas <em>Essence</em> mais <em>Existence</em> et le <em>Je suis</em> du cogito doit être entendu comme un <em>J’existe</em>. Mais il n’y a pas de relation de cause à conséquence entre les deux termes : ce n’est pas la pensée qui fait l’existence, ni l’existence qui fait la pensée.</p>
<h2 id="vrai-et-faux-sentiment">Vrai et faux sentiment</h2>
<p>Ce qui distingue le sentiment vrai du sentiment faux ou ambigu, de la fausse conscience c’est <em>l’action</em>. Le sentiment vrai est vrai parce que mon existence y est toute entière engagée, parce que je fais vivre ce sentiment dans mes actes. Être amoureux c’est agir avec amour envers l’être aimé, c’est vivre le sentiment de l’amour dans chaque moment de l’existence, être courageux c’est vivre avec courage et affronter le danger.</p>
<p>Quand je m’engage dans le doute je fais cesser tout doute méta, toute régression à l’infini sur le doute de la réalité de ce que je ressens.</p>
<h2 id="sujet-objet-présence">Sujet + objet = présence</h2>
<p>Les choses n’ont un sens pour nous que parce que nous sommes dans une relation de présence à elles. Le sens suppose une position, une polarité donc un sujet qui crée les faits, les choses, le temps les phénomènes dans un certain sens. Le corps objectif, le monde objectif de la science n’est pas la vérité du corps phénoménal ou du monde phénoménal mais en est une image appauvrie, une représentation.</p>
<h2 id="la-liberté-comme-être-au-monde">La liberté comme <em>être au monde</em></h2>
<p>La liberté n’est pas l’infini des choix qu’une conscience isolée ferait, pure subjectivité, ou illusion totale déterminée par le monde. “Nous choisissons le monde comme lui nous choisit” il n’y a pas de liberté absolue car j’agis toujours en fonction d’une situation que m’offre le monde, mais il n’y a jamais absence de liberté car j’existe au mondne et agit sur lui.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>CodeMesh 2018</title>
    <link href="http://abailly.github.io/posts/codemesh-2018.html" />
    <id>http://abailly.github.io/posts/codemesh-2018.html</id>
    <published>2018-11-17T00:00:00Z</published>
    <updated>2018-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>CodeMesh 2018</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 17, 2018</div>

<p>Once again I have been lucky enough to attend this year’s <a href="https://codesync.global/conferences/code-mesh-2018/">codemesh</a> conference, but this time I was not only attending but also presenting with my friend <a href="https://twitter.com/abolibibelot">Yann Schwartz</a>, speaking of something we have been working on for a few months and thinking of for a few years: How to leverage the power of those billions of lines of logs our systems generate?</p>
<p>I only attended the first day of the conference so the following notes reflect only a fraction of the conference. Rumors have it that the second day was much better than the first, unfortunately.</p>
<ul>
<li>The first keynote was given by Carl Hewitt, of <a href="http://www.erights.org/history/actors.html">Actors</a> fame, and titled <em>Ultraconcurrency for the future</em>. This was some kind of research program or vision statement about the future of computing systems and different technologies and paradigms, from actors to <em>citadels</em> through <em>inference and planning systems</em> would led to <em>Scalable Intelligent Applications</em>. I must admit the talk was hard to follow…</li>
<li><a href="https://codesync.global/speaker/carlos-baquero-moreno/">Carlos Baquero Moreno</a> then talked about <a href="https://hal.inria.fr/inria-00555588">Convergent/Commutative/Conflict-free Replicated Data Types</a> of which he is one of the original creator. His talk was an introduction to CRDTs and it succeeded in giving a good intuition of some of the basic data structures you could build and the principles underlying both state and operation based CRDTs. Of special note was his use of a beautiful <em>isochronous map</em> drawn by Galton in the XIXth century coloring various parts of the planet according to the time it takes to reach them from then the Center of the World, London.</li>
<li>I was both excited and intrigued by the next talk, entitled <em>Verifying a distributed system with combinatorial topology</em>, so I was sorely disappointed when I realised it was a 40 minutes long rant about how inane current development practice of distributed systems are, and how mathematics, and more precisely combinatorial topology, could help solve our problems, without any single fact or even vaguely enlightening example to support this claim. Given that Maurice Herlihy recently published a <a href="https://www.amazon.com/Distributed-Computing-Through-Combinatorial-Topology/dp/0124045782">book</a> on this subject, I am 100% sure this is an interesting topic from which us practitioners could get deep insights, but this presentation failed to convey any useful intuition.</li>
<li><em>Coroutine explained</em> was a great overview of this sometimes confusing construct which can appear in various guises: Cooperative threads, asynchronous computations, first-class continuations. Coroutines are useful to simplify cooperative multitasking code, alleviating the pain of callback hell or even chain of promises, and removing context-switching overhead. It was interesting to see how async/await computations, and in general coroutines, are “compiled” to state-machines. I learnt about the difference between <em>stackful</em> and <em>stackless</em> coroutines, Lua being a representative of the former while JS implements the latter. The presentor highlighted some caveats when working with coroutines, liek painful stack traces, convoluted debugging and hard to maintain thread safety when using both coroutines and multithreading.</li>
<li>The last talk I attended was given by <a href="https://heather.miller.am/">Heather Miller</a> and aimed at providing a 10000 feet view of the state of research in distributed systems support from programming language theory. This talk was really awesome and treaded quite a lot of ground, from different consistency guarantees on data structures, to Heather Miller’s own Function Passing, through Session Types. <a href="https://heather.miller.am/blog/towards-language-support-for-distributed-systems-references.html">This URL</a> is supposed to host a collection of references to the various work cited: Can’t wait to see it filled.</li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>LambdaConf 2018</title>
    <link href="http://abailly.github.io/posts/rock-solid-haskell-services.html" />
    <id>http://abailly.github.io/posts/rock-solid-haskell-services.html</id>
    <published>2018-06-05T00:00:00Z</published>
    <updated>2018-06-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>LambdaConf 2018</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on June  5, 2018</div>

<h1 id="rock-solid-haskell-services">Rock-Solid Haskell Services</h1>
<ul>
<li>The workshop is presented by Roman Gonzales who is working for FP Complete and it leverages the company’s experience building highly-reliable services in Haskell</li>
<li>The overall architecture of the system is based on Matt Parson’s <a href="http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html">Three Layer Haskell Cake</a>, which is very reminiscent of Alistair Cockburn’s Hexagonal Architecture and DDD</li>
<li>It boils down to enforcing a strict separation between <em>resources</em>, <em>business services</em> and <em>core domain logic</em></li>
<li>To those 3 layers, Roman, drawing from his experience as a Clojure developer, adds a <em>Zero Layer</em> which is responsible for managing the lifecycle of <em>components</em> in such a way that they can be disposed of and <em>restarted</em> at will. This gives the developer the ability to interact with the “complete” system directly in the REPL and be able to reload any part of it at will</li>
<li>The <a href="http://hackage.haskell.org/package/componentm">componentm</a> library provides the needed tools for this, and the ability to report failures at startup/teardown time, as well as some timings on how much time each component took to startup and teardown. Note that I am slightly annoyed that all logging done happens to be text-based which to me seems like an anti-pattern: Logging issued at the application level should be structured and only ever converted to human-readable format when it is needed</li>
<li>Of course the greatest benefit of this approach is the shortening of the feedback loop it provides</li>
<li>Roman spends quite a long time presenting another tool he wrote to manage configuration, <a href="https://hackage.haskell.org/package/etc">etc</a>.</li>
<li><code>etc</code> allows one to define a lot of different sources of configuration like files, env variables, command-line flags, and merge them in a single JSON tree that can then be used by the application</li>
<li>I must say I am not a big fan of those big Yaml configurtion files although I must confess I sometimes indulge in them</li>
<li>Following a discussion with my colleague <a href="https://twitter.com/cvogt">Chris Vogt</a>, I more and more like the idea of limiting configuration to the bare minimum, e.g. to 0</li>
<li>Having non configurable executables that are produced and packaged for specific environment, which means moving the configuration up the stack, say at compile time</li>
<li>when we need to change some dependency, we recompile a process and redeploy it</li>
<li>this implies a solid deployment strategy and thec capability to rollback on errors</li>
<li>need to couple that with supervision trees in order to manage errors in an orderly manner</li>
<li>the presenter then introduces <a href="https://github.com/roman/Haskell-capataz">capataz</a> which is a Haskell implementation of <em>supervision</em> trees</li>
<li>supervision trees provide the ability to automatically restart components or components trees when an error happens</li>
<li>the workshop proceeds to deployment and production concerns, with <a href="https://pragprog.com/book/mnee2/release-it-second-edition">Release It!</a> as a reference pooint, and some definitions on various issues that can happen to a system:</li>
<li><em>impulses</em> are rapid shocks to the system</li>
<li><em>strain</em> is stress over time, which might be caused by dependency on another system that starts operating at half-capacity
<ul>
<li>signs are unresponsive app, spikes on system-level metrics, excess I/O</li>
</ul></li>
<li>strain produce <em>Cracks</em> that can lead <em>cascading failures</em></li>
<li><em>faults</em> =&gt; <em>errors</em> =&gt; <em>failures</em></li>
<li>source of strains:</li>
<li>lack of timeouts on outbound requests</li>
<li>resource pools drained because of failures at lower level</li>
<li>system resource exhaustion (files, ports, RAM…)</li>
<li>not limiting size of resources (bounded queues)</li>
<li>limiting size of query results</li>
<li>timeouts are very rarely transient which means retries should be delayed</li>
<li><em>circuit breakers</em> allow keeping track of the state of a 3rd party system</li>
<li>when num of failures pass some threshold -&gt; make all subsequent requests fail or return default value, marking the circuit open</li>
<li>after some time -&gt; try again (canary requests) and close the circuit again if it succeeds (e.g. 3rd party system goes back to normal state)</li>
<li>use timeouts on every use of allocated resource</li>
<li>the last stage of the workshop goes to deploying all the services that have bben built. The presenter introduces (localstack)[https://localstack.cloud/] a tool to simulate part of AWS stack locally.</li>
</ul>
<h1 id="from-zero-to-live-with-functional-javascript">From Zero to Live with Functional Javascript</h1>
<p>This 2 hours workshop was given by Ian Thomas, CTO of SkyBet. It was a fast-paced overview on how to build modern javascript applications based on FP principles. The workshop is based on his <a href="https://github.com/anatomic/zero-to-live-fp-js-workshop">git repo</a> and builds a complete 12 factor app from the ground up. It contains lot of materials and the session was way too short to get more than a glimpse of it, but it’s definitely interesting material when one wants to build JS-based microservices.</p>
<p>Ian Thomas also gave a keynote on how FP helps break the <em>fear cycle</em> which prevents large code bases from changing.</p>
<h1 id="seeking-refuge-from-unsafe-javascript">Seeking Refuge from Unsafe JavaScript</h1>
<p>Another workshop dedicated to Functional Javascript, presented by David Chambers. It goes through the various pure FP constructs provided by <a href="">sanctuary</a>, a library which basically provides Haskell on top of JS. Sanctuary provides algebraic data types and all the classical functions we have come to love from Haskell, and more.</p>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>CodeMesh 2017 - Takeaways</title>
    <link href="http://abailly.github.io/posts/codemesh-2017.html" />
    <id>http://abailly.github.io/posts/codemesh-2017.html</id>
    <published>2017-11-13T00:00:00Z</published>
    <updated>2017-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>CodeMesh 2017 - Takeaways</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on November 13, 2017</div>

<p>here are some key takeaways from this year’s <a href="http://www.codemesh.io/codemesh2017">codemesh</a> conference. i must say i never had such an intense conference, with lot of fascinating and mind-blowing sessions which bred lots of new or old ideas in my mind. thanks a lot to the organisers and the amazing speakers which made this event memorable.</p>
<ul>
<li>How to apply simple machine learning techniques and speculative execution to optimise repeated executions of programs or program fragments, caching pre-computed execution path to skip some computations,</li>
<li>Using <em>session types</em> to design applicative protocols as <em>finite state machines</em> enforced by the type system hence statically verified, with some encoding examples in haskel and idris,</li>
<li>An answer to the classical <a href="http://wiki.c2.com/?FizzBuzzTest">fizzbuzz</a> interview test where one the y combinator and church numerals from scratch using a pure untyped λ-calculus, in the spirit of the now famous piece by Aphyr <a href="https://aphyr.com/posts/342-typing-the-technical-interview">Typing the technical interview</a>,</li>
<li>Why it is actually a good idea to model <code>IO</code> as a monad even in an impure language like scala, as it gives the compiler the capability to verify and enforce proper use of <em>side effects</em> statically,</li>
<li>How messy and imprecise the <em>Computer Science Metanotation</em>, a language which is ubiquitous in PLT research papers to define <em>formal systems</em>, has become over the past 30 or 40 years,</li>
<li>How to write (potentially infinite) <em>towers of interpreters</em>, with reflection and reification capabilities between each layer, and collapse the resulting tower in a single-pass compiler. This year’s <a href="http://lampwww.epfl.ch/~amin/">favorite</a>, ex aequo with Tomas Petricek’s talk,</li>
<li>Whence does Haskell come and what’s the history of Miranda, where one learns there was no λ-calculus nor first-class functions in McCarthy’s LISP and the Programming Languages’ history is far from the linear reconstruction we often are told it is,</li>
<li>Would aliens be able to understand λ-calculus which amounts to asking classical philosophy of mathematics question: Are mathematical objects <em>discovered</em> from the the land of eternal truths they are part of or <em>invented</em> hence subjects to historical and sociological contingencies. With fascinating references to works by Lakatos and Lakoff on the history and sociology of mathematics,</li>
<li>What benefits one can reap from abstracting concurrent IOs with <a href="https://github.com/facebook/Haxl/">Haxl</a>, a great library developed at Facebook by <a href="http://simonmar.github.io/">Simon Marlow</a>,</li>
<li>How to derive <em>implementations</em> of functions from examples thanks to <a href="https://github.com/webyrd/Barliman/">Barliman</a> and logic programming with <a href="http://minikanren.org/">miniKanren</a>,</li>
<li>The use of the concept of <em>Feedback Loops</em> and <em>Feedback Structures</em> to design and develop complex self-regulated distributed systems.</li>
</ul>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 39</title>
    <link href="http://abailly.github.io/posts/weekly-review-39.html" />
    <id>http://abailly.github.io/posts/weekly-review-39.html</id>
    <published>2017-09-25T00:00:00Z</published>
    <updated>2017-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 39</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 25, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Another great read from TMP, this time about the low-level <em>lingua franca</em> of browser-based computations. Lead me to also read <a href="http://languagengine.co/blog/differentiating-functional-programs/">languagengine - Blog - Differentiating Functional Programs</a> and the original specification: <a href="https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf">spec/pldi2017.pdf at master · WebAssembly/spec</a></p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/">To type or not to type: quantifying detectable bugs in JavaScript | the morning paper</a></dt>
<dd><p>Can static typing helps in getting rid of bugs? This paper provides a resounding <em>Yes!</em> answer.</p>
</dd>
<dt><a href="http://matt.might.net/papers/might2011derivatives.pdf">Parsing with Derivatives</a></dt>
<dd><p>One thing that always amazes me is how seemingly unrelated concepts of mathematics have deep and useful practical applications to computing. This paper shows how to apply the notion of <em>derivatives</em> of a function to generate parsers for context-free grammars, following a technique pioneered by Brzozowski in <a href="http://maveric.uwaterloo.ca/reports/1964_JACM_Brzozowski.pdf">Derivatives of Regular Expressions</a>.</p>
</dd>
<dt><a href="https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf">Totally Free</a></dt>
<dd><p>I am deeply indebted to my co-worker Alex Babkin for pointing me at this paper that links in very interesting ways to a lot of work I have been doing in the past with <em>Free monads</em> and <em>Effects</em>. I have translated the Agda code to Haskell and this helped me see the similarities between the <code>General</code> type McBride introduces and the various constructions for Free monads, notably exposed by Ed Kmett in a <a href="http://comonad.com/reader/2011/free-monads-for-less/">series of blog post</a>.</p>
</dd>
<dt><a href="https://www.linkedin.com/pulse/id-known-what-we-were-starting-ray-dillinger">If I’d Known What We Were Starting | Ray Dillinger | Pulse | LinkedIn</a></dt>
<dd><p>“ICOs are a scam” says one of the original inventor and developer of Bitcoin. Interesting insights into the chaotic history of the “blockchain”…</p>
</dd>
<dt><a href="http://www.cs.nott.ac.uk/~psztxa/publ/ydtm.pdf">Why Dependent Types Matter</a></dt>
<dd><p>An already old but nevertheless interesting paper advocating for the use of dependent types in mainstream programming languages. My first exposure to the <a href="https://github.com/mietek/epigram2">Epigram</a> programming language on which Edwin Brady worked before developing <a href="https://www.idris-lang.org/">Idris</a>.</p>
</dd>
<dt><a href="https://github.com/confluentinc/ducktape">confluentinc/ducktape: System integration and performance tests</a></dt>
<dd><p>A framework for testing microservices and distributed systems</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 38</title>
    <link href="http://abailly.github.io/posts/weekly-review-38.html" />
    <id>http://abailly.github.io/posts/weekly-review-38.html</id>
    <published>2017-09-18T00:00:00Z</published>
    <updated>2017-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 38</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September 18, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://vadosware.io/post/static-binaries-for-haskell-a-convoluted-approach/">Static Binaries for Haskell: A Convoluted Approach</a></dt>
<dd><p>When trying to build minimal docker images, having a statically linked binary is a plus. This is actually quite hard to realize in practice with GHC as this post demonstrates (note that I tried the suggested approach and failed…)</p>
</dd>
<dt><a href="http://graydon2.dreamwidth.org/253769.html">graydon2 | “What next?”</a></dt>
<dd><p>Interesting and opinionated post on <em>what’s next</em> in Programming languages, e.g. which features from PLT will reach mainstream. First-class modules done right is definitely something we are direly in need for!</p>
</dd>
<dt><a href="http://slatestarcodex.com/2017/09/05/book-review-surfing-uncertainty/">Book Review: Surfing Uncertainty | Slate Star Codex</a></dt>
<dd><p>A long book review on cognition and how our brain copes with uncertain, partial or plain wrong data.</p>
</dd>
<dt><a href="https://github.com/adericbourg/coreprotocols-fr">Les Protocoles Fondamentaux</a></dt>
<dd><p>French translation of Michelle and Jim McCarthy’s <a href="">Core Protocols</a>, using <a href="https://github.com/rkasper/coreprotocols">The Core Protocols: A Guide to Greatness</a> dfrom Richard Kasperowski as main source.</p>
</dd>
<dt><a href="https://filecoin.io/filecoin.pdf">FileCoin</a></dt>
<dd><p>A <em>cryptocurrency</em> providing blockchain-based file-system</p>
</dd>
<dt><a href="http://hackage.haskell.org/package/testing-feat">testing-feat: Functional Enumeration of Algebraic Types</a></dt>
<dd><p>A Haskell package to enumerate inhabitants of any ADT, useful for systematic testing of data types.</p>
</dd>
<dt><a href="http://www.samcoope.com/posts/deep_code_generation">Sam Coope - Blog</a></dt>
<dd><p>Looks fun! Did not read the full thesis though…</p>
</dd>
<dt><a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">PragPub January 2012 | Unit Tests Are FIRST | The Pragmatic Bookshelf</a></dt>
<dd><p>A gentle reminder about the properties that a proper unit test should exhibit: Fast, Isolated, Repeatable, Self-Verifying, and Timely</p>
</dd>
<dt><a href="https://www.tezos.com/">Tezos Crowdfunding</a></dt>
<dd><p>Tezos is a smart contracts platform that aims at offering a self-governing network. I read the <a href="https://www.tezos.com/static/papers/white_paper.pdf">language white paper</a> which interestingly draws ideas from Forth: The Tezos language is a typed stack-based language. Although of note is the fact the reference implementation is in OCaml.</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/">Bringing the web up to speed with WebAssembly | the morning paper</a></dt>
<dd><p>Speaking of languages, WebAssembly aims at providing a more solid foundation than Javascript as a the lingua franca for executing arbitrary code in browsers.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>
<entry>
    <title>Weekly Review - Week 36</title>
    <link href="http://abailly.github.io/posts/weekly-review-36.html" />
    <id>http://abailly.github.io/posts/weekly-review-36.html</id>
    <published>2017-09-04T00:00:00Z</published>
    <updated>2017-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Weekly Review - Week 36</h1>

  <h2 class="subtitle"></h2>

<div class="info">Posted on September  4, 2017</div>

<p>This post is a summary of my activities related to coding and software in the past week. Its purpose is both to serve as a high-level personal log and as a potential source of interesting (or not so interesting) links. Entries are provided in no particular order with minimal comments…</p>
<dl>
<dt><a href="https://github.com/solo-io/squash">solo-io/squash: The debugger for microservices</a></dt>
<dd><p>A tool to coordinate debugging of a bunch of processes running inside docker containers. Only for gdb and dlv based programs with VS Code editor</p>
</dd>
<dt><a href="https://github.com/jrclogic/smcdel">jrclogic/SMCDEL: A symbolic model checker for Dynamic Epistemic Logic.</a></dt>
<dd><p>I have been fascinated by model-checking and non standard logics since I discovered this in 2000. Too bad I never invested the time to genuinely master that field. Looks like past years have seen much advance in the field and this MC for epistemic logic interested me because it’s written in Haskell and implements BDD, something I might need for work I am currently doing on distributed systems testing.</p>
</dd>
<dt><a href="https://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html">apfelmus - Reasoning about space leaks with space invariants</a></dt>
<dd><p>Thanks to my coworker <a href="https://www.linkedin.com/in/alexbabkin/">Alex Babkin</a> for this post. It helped me get a deeper understanding of laziness and space-time tradeoffs in Haskell.</p>
</dd>
<dt><a href="https://ocharles.org.uk/blog/posts/2016-01-26-transformers-free-monads-mtl-laws.html">Monad transformers, free monads, mtl, laws and a new approach</a></dt>
<dd><p>An interesting approach to offer the best of both free monads/effects and monad transformers. Materialized in the <a href="https://ocharles.org.uk/blog/posts/2016-04-23-transformers-eff.html">transformers-eff</a> package</p>
</dd>
<dt><a href="http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf">Asymptotic Improvement Of Computations Over Free Monads</a></dt>
<dd><p>An important stop in my journey towards better understanding of free monads.</p>
</dd>
<dt><a href="http://homepages.inf.ed.ac.uk/slindley/papers/handlers.pdf">Handlers in action</a></dt>
<dd><p>An alternative approach to composable effects and transformers, based on a custom DSL for expressing effects. Uses TH’s quasi-quoters which I am not a big fan of…</p>
</dd>
<dt><a href="http://okmij.org/ftp/Haskell/extensible/param-eff.pdf">Parameterized Effects</a></dt>
<dd><p>Follow-up over <em>extensible effects</em> paper taking into account parametric monads. The goal is to be able to embed and check state transitions at the type level making it impossible to write things like reading a file before opening it</p>
</dd>
<dt><a href="https://blog.acolyer.org/2017/08/30/a-concurrent-perspective-on-smart-contracts/">A concurrent perspective on smart contracts | the morning paper</a></dt>
<dd><p>This week’s TMP was dedicated to a series of papers on Smart Contracts, a subject I have a keen interest in given that I am currently working for a company developing a platform for Smart Contracts! Also of interest is <a href="https://blog.acolyer.org/2017/08/31/adding-concurrency-to-smart-contracts/">Adding concurrency to smart contracts</a> and <a href="https://blog.acolyer.org/2017/09/01/step-by-step-towards-creating-a-safe-smart-contract-lessons-from-a-cryptocurrency-lab/">Step by step towards creating a safe smart contract: lessons from a cryptocurrency lab | the morning paper</a></p>
</dd>
<dt><a href="http://why3.lri.fr/">Why3</a></dt>
<dd><p>A platform for theorem-prover-based program verification providing a “front-end” on top of 2 dozens theorem proving tools, including Coq.</p>
</dd>
<dt><a href="https://www.tweag.io/posts/2017-08-24-linear-types-packed-data.html">Tweag I/O - Compact normal forms + linear types = efficient network communication</a></dt>
<dd><p>Nice insights on <em>linear types</em> from the people implementing them in GHC. Did I say how cool the people at http://tweag.io were?</p>
</dd>
<dt><a href="https://jship.github.io/posts/2017-08-27-monad-transformer-commutativity.html">jship - Monad Transformer Commutativity</a></dt>
<dd><p>Understanding how to stack your monad transformers</p>
</dd>
<dt><a href="http://idlewords.com/talks/web_design_first_100_years.htm">Web Design - The First 100 Years</a></dt>
<dd><p>Read this great talk thanks to my friend Bernard. Contains some important insights on how much we suck at predicting the future and an implicit call to arms to steer the future of the internet in the <em>right</em> direction</p>
</dd>
<dt><a href="https://github.com/barrucadu/dejafu">barrucadu/dejafu: Systematic concurrency testing meets Haskell.</a></dt>
<dd><p>Discovered this package thanks to Mathieu Boespflug from tweag.io! A great tool to systematically check concurrent programs.</p>
</dd>
<dt><a href="http://reasonablypolymorphic.com/blog/information-effects">Review: Information Effects :: Reasonably Polymorphic</a></dt>
<dd><p>Mind-boggling blog post on how to implement a language to define typed reversible computations in Haskell</p>
</dd>
<dt><a href="http://www.cs.utexas.edu/users/mckinley/papers/bpor-oopsla-2013.pdf">Partial Order Reduction</a></dt>
<dd><p>State explosion is the bane of model-checkers. This paper proposes algorithms (implemented in dejafu) to reduce the number of states to explore based on some notion of <em>equivalence relations</em> between states.</p>
</dd>
</dl>


<div id="disqus_thread"></div>
<script>
  (function() {  // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
  
    s.src = '//arnaudsblog.disqus.com/embed.js';
  
    s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


]]></summary>
</entry>

</feed>
